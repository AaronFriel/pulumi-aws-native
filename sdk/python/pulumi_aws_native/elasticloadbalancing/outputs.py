# coding=utf-8
# *** WARNING: this file was generated by pulumigen. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from .. import _utilities, _tables
from . import outputs
from .. import outputs as _root_outputs

__all__ = [
    'LoadBalancerAccessLoggingPolicy',
    'LoadBalancerAppCookieStickinessPolicy',
    'LoadBalancerAttributes',
    'LoadBalancerConnectionDrainingPolicy',
    'LoadBalancerConnectionSettings',
    'LoadBalancerHealthCheck',
    'LoadBalancerLBCookieStickinessPolicy',
    'LoadBalancerListeners',
    'LoadBalancerPolicies',
    'LoadBalancerProperties',
]

@pulumi.output_type
class LoadBalancerAccessLoggingPolicy(dict):
    """
    http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb-accessloggingpolicy.html
    """
    def __init__(__self__, *,
                 enabled: bool,
                 s3_bucket_name: str,
                 emit_interval: Optional[int] = None,
                 s3_bucket_prefix: Optional[str] = None):
        """
        http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb-accessloggingpolicy.html
        :param bool enabled: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb-accessloggingpolicy.html#cfn-elb-accessloggingpolicy-enabled
        :param str s3_bucket_name: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb-accessloggingpolicy.html#cfn-elb-accessloggingpolicy-s3bucketname
        :param int emit_interval: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb-accessloggingpolicy.html#cfn-elb-accessloggingpolicy-emitinterval
        :param str s3_bucket_prefix: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb-accessloggingpolicy.html#cfn-elb-accessloggingpolicy-s3bucketprefix
        """
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "s3_bucket_name", s3_bucket_name)
        if emit_interval is not None:
            pulumi.set(__self__, "emit_interval", emit_interval)
        if s3_bucket_prefix is not None:
            pulumi.set(__self__, "s3_bucket_prefix", s3_bucket_prefix)

    @property
    @pulumi.getter(name="Enabled")
    def enabled(self) -> bool:
        """
        http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb-accessloggingpolicy.html#cfn-elb-accessloggingpolicy-enabled
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="S3BucketName")
    def s3_bucket_name(self) -> str:
        """
        http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb-accessloggingpolicy.html#cfn-elb-accessloggingpolicy-s3bucketname
        """
        return pulumi.get(self, "s3_bucket_name")

    @property
    @pulumi.getter(name="EmitInterval")
    def emit_interval(self) -> Optional[int]:
        """
        http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb-accessloggingpolicy.html#cfn-elb-accessloggingpolicy-emitinterval
        """
        return pulumi.get(self, "emit_interval")

    @property
    @pulumi.getter(name="S3BucketPrefix")
    def s3_bucket_prefix(self) -> Optional[str]:
        """
        http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb-accessloggingpolicy.html#cfn-elb-accessloggingpolicy-s3bucketprefix
        """
        return pulumi.get(self, "s3_bucket_prefix")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class LoadBalancerAppCookieStickinessPolicy(dict):
    """
    http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb-AppCookieStickinessPolicy.html
    """
    def __init__(__self__, *,
                 cookie_name: str,
                 policy_name: str):
        """
        http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb-AppCookieStickinessPolicy.html
        :param str cookie_name: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb-AppCookieStickinessPolicy.html#cfn-elb-appcookiestickinesspolicy-cookiename
        :param str policy_name: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb-AppCookieStickinessPolicy.html#cfn-elb-appcookiestickinesspolicy-policyname
        """
        pulumi.set(__self__, "cookie_name", cookie_name)
        pulumi.set(__self__, "policy_name", policy_name)

    @property
    @pulumi.getter(name="CookieName")
    def cookie_name(self) -> str:
        """
        http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb-AppCookieStickinessPolicy.html#cfn-elb-appcookiestickinesspolicy-cookiename
        """
        return pulumi.get(self, "cookie_name")

    @property
    @pulumi.getter(name="PolicyName")
    def policy_name(self) -> str:
        """
        http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb-AppCookieStickinessPolicy.html#cfn-elb-appcookiestickinesspolicy-policyname
        """
        return pulumi.get(self, "policy_name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class LoadBalancerAttributes(dict):
    def __init__(__self__, *,
                 canonical_hosted_zone_name: str,
                 canonical_hosted_zone_name_id: str,
                 dns_name: str,
                 source_security_group_group_name: str,
                 source_security_group_owner_alias: str):
        pulumi.set(__self__, "canonical_hosted_zone_name", canonical_hosted_zone_name)
        pulumi.set(__self__, "canonical_hosted_zone_name_id", canonical_hosted_zone_name_id)
        pulumi.set(__self__, "dns_name", dns_name)
        pulumi.set(__self__, "source_security_group_group_name", source_security_group_group_name)
        pulumi.set(__self__, "source_security_group_owner_alias", source_security_group_owner_alias)

    @property
    @pulumi.getter(name="CanonicalHostedZoneName")
    def canonical_hosted_zone_name(self) -> str:
        return pulumi.get(self, "canonical_hosted_zone_name")

    @property
    @pulumi.getter(name="CanonicalHostedZoneNameID")
    def canonical_hosted_zone_name_id(self) -> str:
        return pulumi.get(self, "canonical_hosted_zone_name_id")

    @property
    @pulumi.getter(name="DNSName")
    def dns_name(self) -> str:
        return pulumi.get(self, "dns_name")

    @property
    @pulumi.getter(name="SourceSecurityGroupGroupName")
    def source_security_group_group_name(self) -> str:
        return pulumi.get(self, "source_security_group_group_name")

    @property
    @pulumi.getter(name="SourceSecurityGroupOwnerAlias")
    def source_security_group_owner_alias(self) -> str:
        return pulumi.get(self, "source_security_group_owner_alias")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class LoadBalancerConnectionDrainingPolicy(dict):
    """
    http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb-connectiondrainingpolicy.html
    """
    def __init__(__self__, *,
                 enabled: bool,
                 timeout: Optional[int] = None):
        """
        http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb-connectiondrainingpolicy.html
        :param bool enabled: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb-connectiondrainingpolicy.html#cfn-elb-connectiondrainingpolicy-enabled
        :param int timeout: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb-connectiondrainingpolicy.html#cfn-elb-connectiondrainingpolicy-timeout
        """
        pulumi.set(__self__, "enabled", enabled)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)

    @property
    @pulumi.getter(name="Enabled")
    def enabled(self) -> bool:
        """
        http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb-connectiondrainingpolicy.html#cfn-elb-connectiondrainingpolicy-enabled
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="Timeout")
    def timeout(self) -> Optional[int]:
        """
        http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb-connectiondrainingpolicy.html#cfn-elb-connectiondrainingpolicy-timeout
        """
        return pulumi.get(self, "timeout")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class LoadBalancerConnectionSettings(dict):
    """
    http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb-connectionsettings.html
    """
    def __init__(__self__, *,
                 idle_timeout: int):
        """
        http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb-connectionsettings.html
        :param int idle_timeout: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb-connectionsettings.html#cfn-elb-connectionsettings-idletimeout
        """
        pulumi.set(__self__, "idle_timeout", idle_timeout)

    @property
    @pulumi.getter(name="IdleTimeout")
    def idle_timeout(self) -> int:
        """
        http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb-connectionsettings.html#cfn-elb-connectionsettings-idletimeout
        """
        return pulumi.get(self, "idle_timeout")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class LoadBalancerHealthCheck(dict):
    """
    http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb-health-check.html
    """
    def __init__(__self__, *,
                 healthy_threshold: str,
                 interval: str,
                 target: str,
                 timeout: str,
                 unhealthy_threshold: str):
        """
        http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb-health-check.html
        :param str healthy_threshold: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb-health-check.html#cfn-elb-healthcheck-healthythreshold
        :param str interval: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb-health-check.html#cfn-elb-healthcheck-interval
        :param str target: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb-health-check.html#cfn-elb-healthcheck-target
        :param str timeout: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb-health-check.html#cfn-elb-healthcheck-timeout
        :param str unhealthy_threshold: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb-health-check.html#cfn-elb-healthcheck-unhealthythreshold
        """
        pulumi.set(__self__, "healthy_threshold", healthy_threshold)
        pulumi.set(__self__, "interval", interval)
        pulumi.set(__self__, "target", target)
        pulumi.set(__self__, "timeout", timeout)
        pulumi.set(__self__, "unhealthy_threshold", unhealthy_threshold)

    @property
    @pulumi.getter(name="HealthyThreshold")
    def healthy_threshold(self) -> str:
        """
        http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb-health-check.html#cfn-elb-healthcheck-healthythreshold
        """
        return pulumi.get(self, "healthy_threshold")

    @property
    @pulumi.getter(name="Interval")
    def interval(self) -> str:
        """
        http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb-health-check.html#cfn-elb-healthcheck-interval
        """
        return pulumi.get(self, "interval")

    @property
    @pulumi.getter(name="Target")
    def target(self) -> str:
        """
        http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb-health-check.html#cfn-elb-healthcheck-target
        """
        return pulumi.get(self, "target")

    @property
    @pulumi.getter(name="Timeout")
    def timeout(self) -> str:
        """
        http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb-health-check.html#cfn-elb-healthcheck-timeout
        """
        return pulumi.get(self, "timeout")

    @property
    @pulumi.getter(name="UnhealthyThreshold")
    def unhealthy_threshold(self) -> str:
        """
        http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb-health-check.html#cfn-elb-healthcheck-unhealthythreshold
        """
        return pulumi.get(self, "unhealthy_threshold")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class LoadBalancerLBCookieStickinessPolicy(dict):
    """
    http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb-LBCookieStickinessPolicy.html
    """
    def __init__(__self__, *,
                 cookie_expiration_period: Optional[str] = None,
                 policy_name: Optional[str] = None):
        """
        http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb-LBCookieStickinessPolicy.html
        :param str cookie_expiration_period: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb-LBCookieStickinessPolicy.html#cfn-elb-lbcookiestickinesspolicy-cookieexpirationperiod
        :param str policy_name: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb-LBCookieStickinessPolicy.html#cfn-elb-lbcookiestickinesspolicy-policyname
        """
        if cookie_expiration_period is not None:
            pulumi.set(__self__, "cookie_expiration_period", cookie_expiration_period)
        if policy_name is not None:
            pulumi.set(__self__, "policy_name", policy_name)

    @property
    @pulumi.getter(name="CookieExpirationPeriod")
    def cookie_expiration_period(self) -> Optional[str]:
        """
        http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb-LBCookieStickinessPolicy.html#cfn-elb-lbcookiestickinesspolicy-cookieexpirationperiod
        """
        return pulumi.get(self, "cookie_expiration_period")

    @property
    @pulumi.getter(name="PolicyName")
    def policy_name(self) -> Optional[str]:
        """
        http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb-LBCookieStickinessPolicy.html#cfn-elb-lbcookiestickinesspolicy-policyname
        """
        return pulumi.get(self, "policy_name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class LoadBalancerListeners(dict):
    """
    http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb-listener.html
    """
    def __init__(__self__, *,
                 instance_port: str,
                 load_balancer_port: str,
                 protocol: str,
                 instance_protocol: Optional[str] = None,
                 policy_names: Optional[Sequence[str]] = None,
                 ssl_certificate_id: Optional[str] = None):
        """
        http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb-listener.html
        :param str instance_port: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb-listener.html#cfn-ec2-elb-listener-instanceport
        :param str load_balancer_port: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb-listener.html#cfn-ec2-elb-listener-loadbalancerport
        :param str protocol: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb-listener.html#cfn-ec2-elb-listener-protocol
        :param str instance_protocol: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb-listener.html#cfn-ec2-elb-listener-instanceprotocol
        :param Sequence[str] policy_names: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb-listener.html#cfn-ec2-elb-listener-policynames
        :param str ssl_certificate_id: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb-listener.html#cfn-ec2-elb-listener-sslcertificateid
        """
        pulumi.set(__self__, "instance_port", instance_port)
        pulumi.set(__self__, "load_balancer_port", load_balancer_port)
        pulumi.set(__self__, "protocol", protocol)
        if instance_protocol is not None:
            pulumi.set(__self__, "instance_protocol", instance_protocol)
        if policy_names is not None:
            pulumi.set(__self__, "policy_names", policy_names)
        if ssl_certificate_id is not None:
            pulumi.set(__self__, "ssl_certificate_id", ssl_certificate_id)

    @property
    @pulumi.getter(name="InstancePort")
    def instance_port(self) -> str:
        """
        http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb-listener.html#cfn-ec2-elb-listener-instanceport
        """
        return pulumi.get(self, "instance_port")

    @property
    @pulumi.getter(name="LoadBalancerPort")
    def load_balancer_port(self) -> str:
        """
        http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb-listener.html#cfn-ec2-elb-listener-loadbalancerport
        """
        return pulumi.get(self, "load_balancer_port")

    @property
    @pulumi.getter(name="Protocol")
    def protocol(self) -> str:
        """
        http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb-listener.html#cfn-ec2-elb-listener-protocol
        """
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="InstanceProtocol")
    def instance_protocol(self) -> Optional[str]:
        """
        http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb-listener.html#cfn-ec2-elb-listener-instanceprotocol
        """
        return pulumi.get(self, "instance_protocol")

    @property
    @pulumi.getter(name="PolicyNames")
    def policy_names(self) -> Optional[Sequence[str]]:
        """
        http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb-listener.html#cfn-ec2-elb-listener-policynames
        """
        return pulumi.get(self, "policy_names")

    @property
    @pulumi.getter(name="SSLCertificateId")
    def ssl_certificate_id(self) -> Optional[str]:
        """
        http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb-listener.html#cfn-ec2-elb-listener-sslcertificateid
        """
        return pulumi.get(self, "ssl_certificate_id")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class LoadBalancerPolicies(dict):
    """
    http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb-policy.html
    """
    def __init__(__self__, *,
                 attributes: Sequence[str],
                 policy_name: str,
                 policy_type: str,
                 instance_ports: Optional[Sequence[str]] = None,
                 load_balancer_ports: Optional[Sequence[str]] = None):
        """
        http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb-policy.html
        :param Sequence[Union[Any, str]] attributes: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb-policy.html#cfn-ec2-elb-policy-attributes
        :param str policy_name: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb-policy.html#cfn-ec2-elb-policy-policyname
        :param str policy_type: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb-policy.html#cfn-ec2-elb-policy-policytype
        :param Sequence[str] instance_ports: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb-policy.html#cfn-ec2-elb-policy-instanceports
        :param Sequence[str] load_balancer_ports: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb-policy.html#cfn-ec2-elb-policy-loadbalancerports
        """
        pulumi.set(__self__, "attributes", attributes)
        pulumi.set(__self__, "policy_name", policy_name)
        pulumi.set(__self__, "policy_type", policy_type)
        if instance_ports is not None:
            pulumi.set(__self__, "instance_ports", instance_ports)
        if load_balancer_ports is not None:
            pulumi.set(__self__, "load_balancer_ports", load_balancer_ports)

    @property
    @pulumi.getter(name="Attributes")
    def attributes(self) -> Sequence[str]:
        """
        http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb-policy.html#cfn-ec2-elb-policy-attributes
        """
        return pulumi.get(self, "attributes")

    @property
    @pulumi.getter(name="PolicyName")
    def policy_name(self) -> str:
        """
        http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb-policy.html#cfn-ec2-elb-policy-policyname
        """
        return pulumi.get(self, "policy_name")

    @property
    @pulumi.getter(name="PolicyType")
    def policy_type(self) -> str:
        """
        http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb-policy.html#cfn-ec2-elb-policy-policytype
        """
        return pulumi.get(self, "policy_type")

    @property
    @pulumi.getter(name="InstancePorts")
    def instance_ports(self) -> Optional[Sequence[str]]:
        """
        http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb-policy.html#cfn-ec2-elb-policy-instanceports
        """
        return pulumi.get(self, "instance_ports")

    @property
    @pulumi.getter(name="LoadBalancerPorts")
    def load_balancer_ports(self) -> Optional[Sequence[str]]:
        """
        http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb-policy.html#cfn-ec2-elb-policy-loadbalancerports
        """
        return pulumi.get(self, "load_balancer_ports")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class LoadBalancerProperties(dict):
    """
    http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb.html
    """
    def __init__(__self__, *,
                 listeners: Sequence['outputs.LoadBalancerListeners'],
                 access_logging_policy: Optional['outputs.LoadBalancerAccessLoggingPolicy'] = None,
                 app_cookie_stickiness_policy: Optional[Sequence['outputs.LoadBalancerAppCookieStickinessPolicy']] = None,
                 availability_zones: Optional[Sequence[str]] = None,
                 connection_draining_policy: Optional['outputs.LoadBalancerConnectionDrainingPolicy'] = None,
                 connection_settings: Optional['outputs.LoadBalancerConnectionSettings'] = None,
                 cross_zone: Optional[bool] = None,
                 health_check: Optional['outputs.LoadBalancerHealthCheck'] = None,
                 instances: Optional[Sequence[str]] = None,
                 lb_cookie_stickiness_policy: Optional[Sequence['outputs.LoadBalancerLBCookieStickinessPolicy']] = None,
                 load_balancer_name: Optional[str] = None,
                 policies: Optional[Sequence['outputs.LoadBalancerPolicies']] = None,
                 scheme: Optional[str] = None,
                 security_groups: Optional[Sequence[str]] = None,
                 subnets: Optional[Sequence[str]] = None,
                 tags: Optional[Sequence['_root_outputs.Tag']] = None):
        """
        http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb.html
        :param Sequence['LoadBalancerListenersArgs'] listeners: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb.html#cfn-ec2-elb-listeners
        :param 'LoadBalancerAccessLoggingPolicyArgs' access_logging_policy: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb.html#cfn-ec2-elb-accessloggingpolicy
        :param Sequence['LoadBalancerAppCookieStickinessPolicyArgs'] app_cookie_stickiness_policy: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb.html#cfn-ec2-elb-appcookiestickinesspolicy
        :param Sequence[str] availability_zones: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb.html#cfn-ec2-elb-availabilityzones
        :param 'LoadBalancerConnectionDrainingPolicyArgs' connection_draining_policy: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb.html#cfn-ec2-elb-connectiondrainingpolicy
        :param 'LoadBalancerConnectionSettingsArgs' connection_settings: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb.html#cfn-ec2-elb-connectionsettings
        :param bool cross_zone: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb.html#cfn-ec2-elb-crosszone
        :param 'LoadBalancerHealthCheckArgs' health_check: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb.html#cfn-ec2-elb-healthcheck
        :param Sequence[str] instances: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb.html#cfn-ec2-elb-instances
        :param Sequence['LoadBalancerLBCookieStickinessPolicyArgs'] lb_cookie_stickiness_policy: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb.html#cfn-ec2-elb-lbcookiestickinesspolicy
        :param str load_balancer_name: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb.html#cfn-ec2-elb-elbname
        :param Sequence['LoadBalancerPoliciesArgs'] policies: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb.html#cfn-ec2-elb-policies
        :param str scheme: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb.html#cfn-ec2-elb-scheme
        :param Sequence[str] security_groups: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb.html#cfn-ec2-elb-securitygroups
        :param Sequence[str] subnets: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb.html#cfn-ec2-elb-subnets
        :param Sequence['_root_inputs.TagArgs'] tags: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb.html#cfn-elasticloadbalancing-loadbalancer-tags
        """
        pulumi.set(__self__, "listeners", listeners)
        if access_logging_policy is not None:
            pulumi.set(__self__, "access_logging_policy", access_logging_policy)
        if app_cookie_stickiness_policy is not None:
            pulumi.set(__self__, "app_cookie_stickiness_policy", app_cookie_stickiness_policy)
        if availability_zones is not None:
            pulumi.set(__self__, "availability_zones", availability_zones)
        if connection_draining_policy is not None:
            pulumi.set(__self__, "connection_draining_policy", connection_draining_policy)
        if connection_settings is not None:
            pulumi.set(__self__, "connection_settings", connection_settings)
        if cross_zone is not None:
            pulumi.set(__self__, "cross_zone", cross_zone)
        if health_check is not None:
            pulumi.set(__self__, "health_check", health_check)
        if instances is not None:
            pulumi.set(__self__, "instances", instances)
        if lb_cookie_stickiness_policy is not None:
            pulumi.set(__self__, "lb_cookie_stickiness_policy", lb_cookie_stickiness_policy)
        if load_balancer_name is not None:
            pulumi.set(__self__, "load_balancer_name", load_balancer_name)
        if policies is not None:
            pulumi.set(__self__, "policies", policies)
        if scheme is not None:
            pulumi.set(__self__, "scheme", scheme)
        if security_groups is not None:
            pulumi.set(__self__, "security_groups", security_groups)
        if subnets is not None:
            pulumi.set(__self__, "subnets", subnets)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="Listeners")
    def listeners(self) -> Sequence['outputs.LoadBalancerListeners']:
        """
        http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb.html#cfn-ec2-elb-listeners
        """
        return pulumi.get(self, "listeners")

    @property
    @pulumi.getter(name="AccessLoggingPolicy")
    def access_logging_policy(self) -> Optional['outputs.LoadBalancerAccessLoggingPolicy']:
        """
        http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb.html#cfn-ec2-elb-accessloggingpolicy
        """
        return pulumi.get(self, "access_logging_policy")

    @property
    @pulumi.getter(name="AppCookieStickinessPolicy")
    def app_cookie_stickiness_policy(self) -> Optional[Sequence['outputs.LoadBalancerAppCookieStickinessPolicy']]:
        """
        http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb.html#cfn-ec2-elb-appcookiestickinesspolicy
        """
        return pulumi.get(self, "app_cookie_stickiness_policy")

    @property
    @pulumi.getter(name="AvailabilityZones")
    def availability_zones(self) -> Optional[Sequence[str]]:
        """
        http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb.html#cfn-ec2-elb-availabilityzones
        """
        return pulumi.get(self, "availability_zones")

    @property
    @pulumi.getter(name="ConnectionDrainingPolicy")
    def connection_draining_policy(self) -> Optional['outputs.LoadBalancerConnectionDrainingPolicy']:
        """
        http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb.html#cfn-ec2-elb-connectiondrainingpolicy
        """
        return pulumi.get(self, "connection_draining_policy")

    @property
    @pulumi.getter(name="ConnectionSettings")
    def connection_settings(self) -> Optional['outputs.LoadBalancerConnectionSettings']:
        """
        http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb.html#cfn-ec2-elb-connectionsettings
        """
        return pulumi.get(self, "connection_settings")

    @property
    @pulumi.getter(name="CrossZone")
    def cross_zone(self) -> Optional[bool]:
        """
        http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb.html#cfn-ec2-elb-crosszone
        """
        return pulumi.get(self, "cross_zone")

    @property
    @pulumi.getter(name="HealthCheck")
    def health_check(self) -> Optional['outputs.LoadBalancerHealthCheck']:
        """
        http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb.html#cfn-ec2-elb-healthcheck
        """
        return pulumi.get(self, "health_check")

    @property
    @pulumi.getter(name="Instances")
    def instances(self) -> Optional[Sequence[str]]:
        """
        http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb.html#cfn-ec2-elb-instances
        """
        return pulumi.get(self, "instances")

    @property
    @pulumi.getter(name="LBCookieStickinessPolicy")
    def lb_cookie_stickiness_policy(self) -> Optional[Sequence['outputs.LoadBalancerLBCookieStickinessPolicy']]:
        """
        http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb.html#cfn-ec2-elb-lbcookiestickinesspolicy
        """
        return pulumi.get(self, "lb_cookie_stickiness_policy")

    @property
    @pulumi.getter(name="LoadBalancerName")
    def load_balancer_name(self) -> Optional[str]:
        """
        http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb.html#cfn-ec2-elb-elbname
        """
        return pulumi.get(self, "load_balancer_name")

    @property
    @pulumi.getter(name="Policies")
    def policies(self) -> Optional[Sequence['outputs.LoadBalancerPolicies']]:
        """
        http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb.html#cfn-ec2-elb-policies
        """
        return pulumi.get(self, "policies")

    @property
    @pulumi.getter(name="Scheme")
    def scheme(self) -> Optional[str]:
        """
        http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb.html#cfn-ec2-elb-scheme
        """
        return pulumi.get(self, "scheme")

    @property
    @pulumi.getter(name="SecurityGroups")
    def security_groups(self) -> Optional[Sequence[str]]:
        """
        http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb.html#cfn-ec2-elb-securitygroups
        """
        return pulumi.get(self, "security_groups")

    @property
    @pulumi.getter(name="Subnets")
    def subnets(self) -> Optional[Sequence[str]]:
        """
        http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb.html#cfn-ec2-elb-subnets
        """
        return pulumi.get(self, "subnets")

    @property
    @pulumi.getter(name="Tags")
    def tags(self) -> Optional[Sequence['_root_outputs.Tag']]:
        """
        http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb.html#cfn-elasticloadbalancing-loadbalancer-tags
        """
        return pulumi.get(self, "tags")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


