# coding=utf-8
# *** WARNING: this file was generated by pulumigen. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from . import _utilities, _tables

__all__ = [
    'AutoscalingCreationPolicyArgs',
    'CreationPolicyArgs',
    'ResourceSignalArgs',
    'TagArgs',
]

@pulumi.input_type
class AutoscalingCreationPolicyArgs:
    def __init__(__self__, *,
                 min_successful_instances_percent: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] min_successful_instances_percent: Specifies the percentage of instances in an Auto Scaling replacement update that must
               signal success for the update to succeed. You can specify a value from 0 to 100. AWS
               CloudFormation rounds to the nearest tenth of a percent. For example, if you update five
               instances with a minimum successful percentage of 50, three instances must signal success. If
               an instance doesn't send a signal within the time specified by the Timeout property, AWS
               CloudFormation assumes that the instance wasn't created.
        """
        if min_successful_instances_percent is None:
            min_successful_instances_percent = 100
        if min_successful_instances_percent is not None:
            pulumi.set(__self__, "min_successful_instances_percent", min_successful_instances_percent)

    @property
    @pulumi.getter(name="MinSuccessfulInstancesPercent")
    def min_successful_instances_percent(self) -> Optional[pulumi.Input[int]]:
        """
        Specifies the percentage of instances in an Auto Scaling replacement update that must
        signal success for the update to succeed. You can specify a value from 0 to 100. AWS
        CloudFormation rounds to the nearest tenth of a percent. For example, if you update five
        instances with a minimum successful percentage of 50, three instances must signal success. If
        an instance doesn't send a signal within the time specified by the Timeout property, AWS
        CloudFormation assumes that the instance wasn't created.
        """
        return pulumi.get(self, "min_successful_instances_percent")

    @min_successful_instances_percent.setter
    def min_successful_instances_percent(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "min_successful_instances_percent", value)


@pulumi.input_type
class CreationPolicyArgs:
    def __init__(__self__, *,
                 auto_scaling_creation_policy: Optional[pulumi.Input['AutoscalingCreationPolicyArgs']] = None,
                 resource_signal: Optional[pulumi.Input['ResourceSignalArgs']] = None):
        """
        The CreationPolicy for a resource.
        :param pulumi.Input['AutoscalingCreationPolicyArgs'] auto_scaling_creation_policy: For an Auto Scaling group replacement update, specifies how many instances must
               signal success for the update to succeed.
        :param pulumi.Input['ResourceSignalArgs'] resource_signal: When AWS CloudFormation creates the associated resource, configures the number of
               required success signals and the length of time that AWS CloudFormation waits for those signals.
        """
        if auto_scaling_creation_policy is not None:
            pulumi.set(__self__, "auto_scaling_creation_policy", auto_scaling_creation_policy)
        if resource_signal is not None:
            pulumi.set(__self__, "resource_signal", resource_signal)

    @property
    @pulumi.getter(name="AutoScalingCreationPolicy")
    def auto_scaling_creation_policy(self) -> Optional[pulumi.Input['AutoscalingCreationPolicyArgs']]:
        """
        For an Auto Scaling group replacement update, specifies how many instances must
        signal success for the update to succeed.
        """
        return pulumi.get(self, "auto_scaling_creation_policy")

    @auto_scaling_creation_policy.setter
    def auto_scaling_creation_policy(self, value: Optional[pulumi.Input['AutoscalingCreationPolicyArgs']]):
        pulumi.set(self, "auto_scaling_creation_policy", value)

    @property
    @pulumi.getter(name="ResourceSignal")
    def resource_signal(self) -> Optional[pulumi.Input['ResourceSignalArgs']]:
        """
        When AWS CloudFormation creates the associated resource, configures the number of
        required success signals and the length of time that AWS CloudFormation waits for those signals.
        """
        return pulumi.get(self, "resource_signal")

    @resource_signal.setter
    def resource_signal(self, value: Optional[pulumi.Input['ResourceSignalArgs']]):
        pulumi.set(self, "resource_signal", value)


@pulumi.input_type
class ResourceSignalArgs:
    def __init__(__self__, *,
                 count: Optional[pulumi.Input[int]] = None,
                 timeout: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] count: The number of success signals AWS CloudFormation must receive before it sets the
               resource status as CREATE_COMPLETE. If the resource receives a failure signal or doesn't
               receive the specified number of signals before the timeout period expires, the resource
               creation fails and AWS CloudFormation rolls the stack back.
        :param pulumi.Input[str] timeout: The length of time that AWS CloudFormation waits for the number of signals that was
               specified in the Count property. The timeout period starts after AWS CloudFormation starts
               creating the resource, and the timeout expires no sooner than the time you specify but can
               occur shortly thereafter. The maximum time that you can specify is 12 hours.
               
               The value must be in ISO8601 duration format, in the form: "PT#H#M#S", where each # is the
               number of hours, minutes, and seconds, respectively. For best results, specify a period of
               time that gives your instances plenty of time to get up and running. A shorter timeout can
               cause a rollback.
        """
        if count is None:
            count = 1
        if count is not None:
            pulumi.set(__self__, "count", count)
        if timeout is None:
            timeout = 'PT5M'
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)

    @property
    @pulumi.getter(name="Count")
    def count(self) -> Optional[pulumi.Input[int]]:
        """
        The number of success signals AWS CloudFormation must receive before it sets the
        resource status as CREATE_COMPLETE. If the resource receives a failure signal or doesn't
        receive the specified number of signals before the timeout period expires, the resource
        creation fails and AWS CloudFormation rolls the stack back.
        """
        return pulumi.get(self, "count")

    @count.setter
    def count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "count", value)

    @property
    @pulumi.getter(name="Timeout")
    def timeout(self) -> Optional[pulumi.Input[str]]:
        """
        The length of time that AWS CloudFormation waits for the number of signals that was
        specified in the Count property. The timeout period starts after AWS CloudFormation starts
        creating the resource, and the timeout expires no sooner than the time you specify but can
        occur shortly thereafter. The maximum time that you can specify is 12 hours.

        The value must be in ISO8601 duration format, in the form: "PT#H#M#S", where each # is the
        number of hours, minutes, and seconds, respectively. For best results, specify a period of
        time that gives your instances plenty of time to get up and running. A shorter timeout can
        cause a rollback.
        """
        return pulumi.get(self, "timeout")

    @timeout.setter
    def timeout(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "timeout", value)


@pulumi.input_type
class TagArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-resource-tags.html
        :param pulumi.Input[str] key: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-resource-tags.html#cfn-resource-tags-key
        :param pulumi.Input[str] value: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-resource-tags.html#cfn-resource-tags-value
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="Key")
    def key(self) -> pulumi.Input[str]:
        """
        http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-resource-tags.html#cfn-resource-tags-key
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter(name="Value")
    def value(self) -> pulumi.Input[str]:
        """
        http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-resource-tags.html#cfn-resource-tags-value
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


