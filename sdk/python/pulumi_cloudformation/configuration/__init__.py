# coding=utf-8
# *** WARNING: this file was generated by pulumigen. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

# Export this package's modules as members:
from .aggregation_authorization import *
from .config_rule import *
from .configuration_aggregator import *
from .configuration_recorder import *
from .conformance_pack import *
from .delivery_channel import *
from .organization_config_rule import *
from .organization_conformance_pack import *
from .remediation_configuration import *
from ._inputs import *
from . import outputs

def _register_module():
    import pulumi
    from .. import _utilities


    class Module(pulumi.runtime.ResourceModule):
        _version = _utilities.get_semver_version()

        def version(self):
            return Module._version

        def construct(self, name: str, typ: str, urn: str) -> pulumi.Resource:
            if typ == "cloudformation:Configuration:AggregationAuthorization":
                return AggregationAuthorization(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "cloudformation:Configuration:ConfigRule":
                return ConfigRule(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "cloudformation:Configuration:ConfigurationAggregator":
                return ConfigurationAggregator(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "cloudformation:Configuration:ConfigurationRecorder":
                return ConfigurationRecorder(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "cloudformation:Configuration:ConformancePack":
                return ConformancePack(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "cloudformation:Configuration:DeliveryChannel":
                return DeliveryChannel(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "cloudformation:Configuration:OrganizationConfigRule":
                return OrganizationConfigRule(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "cloudformation:Configuration:OrganizationConformancePack":
                return OrganizationConformancePack(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "cloudformation:Configuration:RemediationConfiguration":
                return RemediationConfiguration(name, pulumi.ResourceOptions(urn=urn))
            else:
                raise Exception(f"unknown resource type {typ}")


    _module_instance = Module()
    pulumi.runtime.register_resource_module("cloudformation", "Configuration", _module_instance)

_register_module()
