# coding=utf-8
# *** WARNING: this file was generated by pulumigen. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

# Export this package's modules as members:
from .accepted_portfolio_share import *
from .cloud_formation_product import *
from .cloud_formation_provisioned_product import *
from .launch_notification_constraint import *
from .launch_role_constraint import *
from .launch_template_constraint import *
from .portfolio import *
from .portfolio_principal_association import *
from .portfolio_product_association import *
from .portfolio_share import *
from .resource_update_constraint import *
from .stack_set_constraint import *
from .tag_option import *
from .tag_option_association import *
from ._inputs import *
from . import outputs

def _register_module():
    import pulumi
    from .. import _utilities


    class Module(pulumi.runtime.ResourceModule):
        _version = _utilities.get_semver_version()

        def version(self):
            return Module._version

        def construct(self, name: str, typ: str, urn: str) -> pulumi.Resource:
            if typ == "cloudformation:ServiceCatalog:AcceptedPortfolioShare":
                return AcceptedPortfolioShare(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "cloudformation:ServiceCatalog:CloudFormationProduct":
                return CloudFormationProduct(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "cloudformation:ServiceCatalog:CloudFormationProvisionedProduct":
                return CloudFormationProvisionedProduct(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "cloudformation:ServiceCatalog:LaunchNotificationConstraint":
                return LaunchNotificationConstraint(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "cloudformation:ServiceCatalog:LaunchRoleConstraint":
                return LaunchRoleConstraint(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "cloudformation:ServiceCatalog:LaunchTemplateConstraint":
                return LaunchTemplateConstraint(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "cloudformation:ServiceCatalog:Portfolio":
                return Portfolio(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "cloudformation:ServiceCatalog:PortfolioPrincipalAssociation":
                return PortfolioPrincipalAssociation(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "cloudformation:ServiceCatalog:PortfolioProductAssociation":
                return PortfolioProductAssociation(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "cloudformation:ServiceCatalog:PortfolioShare":
                return PortfolioShare(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "cloudformation:ServiceCatalog:ResourceUpdateConstraint":
                return ResourceUpdateConstraint(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "cloudformation:ServiceCatalog:StackSetConstraint":
                return StackSetConstraint(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "cloudformation:ServiceCatalog:TagOption":
                return TagOption(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "cloudformation:ServiceCatalog:TagOptionAssociation":
                return TagOptionAssociation(name, pulumi.ResourceOptions(urn=urn))
            else:
                raise Exception(f"unknown resource type {typ}")


    _module_instance = Module()
    pulumi.runtime.register_resource_module("cloudformation", "ServiceCatalog", _module_instance)

_register_module()
