# coding=utf-8
# *** WARNING: this file was generated by pulumigen. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

# Export this package's modules as members:
from .account import *
from .api_key import *
from .authorizer import *
from .base_path_mapping import *
from .client_certificate import *
from .deployment import *
from .documentation_part import *
from .documentation_version import *
from .domain_name import *
from .gateway_response import *
from .method import *
from .model import *
from .request_validator import *
from .resource import *
from .rest_api import *
from .stage import *
from .usage_plan import *
from .usage_plan_key import *
from .vpc_link import *
from ._inputs import *
from . import outputs

def _register_module():
    import pulumi
    from .. import _utilities


    class Module(pulumi.runtime.ResourceModule):
        _version = _utilities.get_semver_version()

        def version(self):
            return Module._version

        def construct(self, name: str, typ: str, urn: str) -> pulumi.Resource:
            if typ == "cloudformation:ApiGateway:Account":
                return Account(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "cloudformation:ApiGateway:ApiKey":
                return ApiKey(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "cloudformation:ApiGateway:Authorizer":
                return Authorizer(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "cloudformation:ApiGateway:BasePathMapping":
                return BasePathMapping(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "cloudformation:ApiGateway:ClientCertificate":
                return ClientCertificate(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "cloudformation:ApiGateway:Deployment":
                return Deployment(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "cloudformation:ApiGateway:DocumentationPart":
                return DocumentationPart(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "cloudformation:ApiGateway:DocumentationVersion":
                return DocumentationVersion(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "cloudformation:ApiGateway:DomainName":
                return DomainName(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "cloudformation:ApiGateway:GatewayResponse":
                return GatewayResponse(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "cloudformation:ApiGateway:Method":
                return Method(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "cloudformation:ApiGateway:Model":
                return Model(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "cloudformation:ApiGateway:RequestValidator":
                return RequestValidator(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "cloudformation:ApiGateway:Resource":
                return Resource(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "cloudformation:ApiGateway:RestApi":
                return RestApi(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "cloudformation:ApiGateway:Stage":
                return Stage(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "cloudformation:ApiGateway:UsagePlan":
                return UsagePlan(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "cloudformation:ApiGateway:UsagePlanKey":
                return UsagePlanKey(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "cloudformation:ApiGateway:VpcLink":
                return VpcLink(name, pulumi.ResourceOptions(urn=urn))
            else:
                raise Exception(f"unknown resource type {typ}")


    _module_instance = Module()
    pulumi.runtime.register_resource_module("cloudformation", "ApiGateway", _module_instance)

_register_module()
