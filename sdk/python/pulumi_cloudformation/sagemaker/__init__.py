# coding=utf-8
# *** WARNING: this file was generated by pulumigen. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

# Export this package's modules as members:
from .code_repository import *
from .data_quality_job_definition import *
from .device import *
from .device_fleet import *
from .endpoint import *
from .endpoint_config import *
from .model import *
from .model_bias_job_definition import *
from .model_explainability_job_definition import *
from .model_package_group import *
from .model_quality_job_definition import *
from .monitoring_schedule import *
from .notebook_instance import *
from .notebook_instance_lifecycle_config import *
from .pipeline import *
from .project import *
from .workteam import *
from ._inputs import *
from . import outputs

def _register_module():
    import pulumi
    from .. import _utilities


    class Module(pulumi.runtime.ResourceModule):
        _version = _utilities.get_semver_version()

        def version(self):
            return Module._version

        def construct(self, name: str, typ: str, urn: str) -> pulumi.Resource:
            if typ == "cloudformation:SageMaker:CodeRepository":
                return CodeRepository(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "cloudformation:SageMaker:DataQualityJobDefinition":
                return DataQualityJobDefinition(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "cloudformation:SageMaker:Device":
                return Device(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "cloudformation:SageMaker:DeviceFleet":
                return DeviceFleet(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "cloudformation:SageMaker:Endpoint":
                return Endpoint(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "cloudformation:SageMaker:EndpointConfig":
                return EndpointConfig(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "cloudformation:SageMaker:Model":
                return Model(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "cloudformation:SageMaker:ModelBiasJobDefinition":
                return ModelBiasJobDefinition(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "cloudformation:SageMaker:ModelExplainabilityJobDefinition":
                return ModelExplainabilityJobDefinition(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "cloudformation:SageMaker:ModelPackageGroup":
                return ModelPackageGroup(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "cloudformation:SageMaker:ModelQualityJobDefinition":
                return ModelQualityJobDefinition(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "cloudformation:SageMaker:MonitoringSchedule":
                return MonitoringSchedule(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "cloudformation:SageMaker:NotebookInstance":
                return NotebookInstance(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "cloudformation:SageMaker:NotebookInstanceLifecycleConfig":
                return NotebookInstanceLifecycleConfig(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "cloudformation:SageMaker:Pipeline":
                return Pipeline(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "cloudformation:SageMaker:Project":
                return Project(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "cloudformation:SageMaker:Workteam":
                return Workteam(name, pulumi.ResourceOptions(urn=urn))
            else:
                raise Exception(f"unknown resource type {typ}")


    _module_instance = Module()
    pulumi.runtime.register_resource_module("cloudformation", "SageMaker", _module_instance)

_register_module()
