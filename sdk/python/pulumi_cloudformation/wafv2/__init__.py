# coding=utf-8
# *** WARNING: this file was generated by pulumigen. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

# Export this package's modules as members:
from .ip_set import *
from .regex_pattern_set import *
from .rule_group import *
from .web_acl import *
from .web_aclassociation import *
from ._inputs import *
from . import outputs

def _register_module():
    import pulumi
    from .. import _utilities


    class Module(pulumi.runtime.ResourceModule):
        _version = _utilities.get_semver_version()

        def version(self):
            return Module._version

        def construct(self, name: str, typ: str, urn: str) -> pulumi.Resource:
            if typ == "cloudformation:WAFv2:IPSet":
                return IPSet(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "cloudformation:WAFv2:RegexPatternSet":
                return RegexPatternSet(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "cloudformation:WAFv2:RuleGroup":
                return RuleGroup(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "cloudformation:WAFv2:WebACL":
                return WebACL(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "cloudformation:WAFv2:WebACLAssociation":
                return WebACLAssociation(name, pulumi.ResourceOptions(urn=urn))
            else:
                raise Exception(f"unknown resource type {typ}")


    _module_instance = Module()
    pulumi.runtime.register_resource_module("cloudformation", "WAFv2", _module_instance)

_register_module()
