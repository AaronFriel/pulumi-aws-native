# coding=utf-8
# *** WARNING: this file was generated by pulumigen. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

# Export this package's modules as members:
from .directory_config import *
from .fleet import *
from .image_builder import *
from .stack import *
from .stack_fleet_association import *
from .stack_user_association import *
from .user import *
from ._inputs import *
from . import outputs

def _register_module():
    import pulumi
    from .. import _utilities


    class Module(pulumi.runtime.ResourceModule):
        _version = _utilities.get_semver_version()

        def version(self):
            return Module._version

        def construct(self, name: str, typ: str, urn: str) -> pulumi.Resource:
            if typ == "cloudformation:AppStream:DirectoryConfig":
                return DirectoryConfig(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "cloudformation:AppStream:Fleet":
                return Fleet(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "cloudformation:AppStream:ImageBuilder":
                return ImageBuilder(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "cloudformation:AppStream:Stack":
                return Stack(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "cloudformation:AppStream:StackFleetAssociation":
                return StackFleetAssociation(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "cloudformation:AppStream:StackUserAssociation":
                return StackUserAssociation(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "cloudformation:AppStream:User":
                return User(name, pulumi.ResourceOptions(urn=urn))
            else:
                raise Exception(f"unknown resource type {typ}")


    _module_instance = Module()
    pulumi.runtime.register_resource_module("cloudformation", "AppStream", _module_instance)

_register_module()
