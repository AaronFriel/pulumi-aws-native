// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Cloudformation.Route53.Outputs
{

    [OutputType]
    public sealed class HealthCheckHealthCheckConfig
    {
        /// <summary>
        /// http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-route53-healthcheck-healthcheckconfig.html#cfn-route53-healthcheck-healthcheckconfig-alarmidentifier
        /// </summary>
        public readonly Outputs.HealthCheckAlarmIdentifier? AlarmIdentifier;
        /// <summary>
        /// http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-route53-healthcheck-healthcheckconfig.html#cfn-route53-healthcheck-healthcheckconfig-childhealthchecks
        /// </summary>
        public readonly ImmutableArray<string> ChildHealthChecks;
        /// <summary>
        /// http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-route53-healthcheck-healthcheckconfig.html#cfn-route53-healthcheck-healthcheckconfig-enablesni
        /// </summary>
        public readonly bool? EnableSNI;
        /// <summary>
        /// http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-route53-healthcheck-healthcheckconfig.html#cfn-route53-healthcheck-healthcheckconfig-failurethreshold
        /// </summary>
        public readonly int? FailureThreshold;
        /// <summary>
        /// http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-route53-healthcheck-healthcheckconfig.html#cfn-route53-healthcheck-healthcheckconfig-fullyqualifieddomainname
        /// </summary>
        public readonly string? FullyQualifiedDomainName;
        /// <summary>
        /// http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-route53-healthcheck-healthcheckconfig.html#cfn-route53-healthcheck-healthcheckconfig-healththreshold
        /// </summary>
        public readonly int? HealthThreshold;
        /// <summary>
        /// http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-route53-healthcheck-healthcheckconfig.html#cfn-route53-healthcheck-healthcheckconfig-ipaddress
        /// </summary>
        public readonly string? IPAddress;
        /// <summary>
        /// http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-route53-healthcheck-healthcheckconfig.html#cfn-route53-healthcheck-healthcheckconfig-insufficientdatahealthstatus
        /// </summary>
        public readonly string? InsufficientDataHealthStatus;
        /// <summary>
        /// http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-route53-healthcheck-healthcheckconfig.html#cfn-route53-healthcheck-healthcheckconfig-inverted
        /// </summary>
        public readonly bool? Inverted;
        /// <summary>
        /// http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-route53-healthcheck-healthcheckconfig.html#cfn-route53-healthcheck-healthcheckconfig-measurelatency
        /// </summary>
        public readonly bool? MeasureLatency;
        /// <summary>
        /// http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-route53-healthcheck-healthcheckconfig.html#cfn-route53-healthcheck-healthcheckconfig-port
        /// </summary>
        public readonly int? Port;
        /// <summary>
        /// http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-route53-healthcheck-healthcheckconfig.html#cfn-route53-healthcheck-healthcheckconfig-regions
        /// </summary>
        public readonly ImmutableArray<string> Regions;
        /// <summary>
        /// http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-route53-healthcheck-healthcheckconfig.html#cfn-route53-healthcheck-healthcheckconfig-requestinterval
        /// </summary>
        public readonly int? RequestInterval;
        /// <summary>
        /// http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-route53-healthcheck-healthcheckconfig.html#cfn-route53-healthcheck-healthcheckconfig-resourcepath
        /// </summary>
        public readonly string? ResourcePath;
        /// <summary>
        /// http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-route53-healthcheck-healthcheckconfig.html#cfn-route53-healthcheck-healthcheckconfig-searchstring
        /// </summary>
        public readonly string? SearchString;
        /// <summary>
        /// http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-route53-healthcheck-healthcheckconfig.html#cfn-route53-healthcheck-healthcheckconfig-type
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private HealthCheckHealthCheckConfig(
            Outputs.HealthCheckAlarmIdentifier? AlarmIdentifier,

            ImmutableArray<string> ChildHealthChecks,

            bool? EnableSNI,

            int? FailureThreshold,

            string? FullyQualifiedDomainName,

            int? HealthThreshold,

            string? IPAddress,

            string? InsufficientDataHealthStatus,

            bool? Inverted,

            bool? MeasureLatency,

            int? Port,

            ImmutableArray<string> Regions,

            int? RequestInterval,

            string? ResourcePath,

            string? SearchString,

            string Type)
        {
            this.AlarmIdentifier = AlarmIdentifier;
            this.ChildHealthChecks = ChildHealthChecks;
            this.EnableSNI = EnableSNI;
            this.FailureThreshold = FailureThreshold;
            this.FullyQualifiedDomainName = FullyQualifiedDomainName;
            this.HealthThreshold = HealthThreshold;
            this.IPAddress = IPAddress;
            this.InsufficientDataHealthStatus = InsufficientDataHealthStatus;
            this.Inverted = Inverted;
            this.MeasureLatency = MeasureLatency;
            this.Port = Port;
            this.Regions = Regions;
            this.RequestInterval = RequestInterval;
            this.ResourcePath = ResourcePath;
            this.SearchString = SearchString;
            this.Type = Type;
        }
    }
}
