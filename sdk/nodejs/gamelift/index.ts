// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export * from "./alias";
export * from "./build";
export * from "./fleet";
export * from "./gameServerGroup";
export * from "./gameSessionQueue";
export * from "./matchmakingConfiguration";
export * from "./matchmakingRuleSet";
export * from "./script";

// Import resources to register:
import { Alias } from "./alias";
import { Build } from "./build";
import { Fleet } from "./fleet";
import { GameServerGroup } from "./gameServerGroup";
import { GameSessionQueue } from "./gameSessionQueue";
import { MatchmakingConfiguration } from "./matchmakingConfiguration";
import { MatchmakingRuleSet } from "./matchmakingRuleSet";
import { Script } from "./script";

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "cloudformation:GameLift:Alias":
                return new Alias(name, <any>undefined, { urn })
            case "cloudformation:GameLift:Build":
                return new Build(name, <any>undefined, { urn })
            case "cloudformation:GameLift:Fleet":
                return new Fleet(name, <any>undefined, { urn })
            case "cloudformation:GameLift:GameServerGroup":
                return new GameServerGroup(name, <any>undefined, { urn })
            case "cloudformation:GameLift:GameSessionQueue":
                return new GameSessionQueue(name, <any>undefined, { urn })
            case "cloudformation:GameLift:MatchmakingConfiguration":
                return new MatchmakingConfiguration(name, <any>undefined, { urn })
            case "cloudformation:GameLift:MatchmakingRuleSet":
                return new MatchmakingRuleSet(name, <any>undefined, { urn })
            case "cloudformation:GameLift:Script":
                return new Script(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("cloudformation", "GameLift", _module)
