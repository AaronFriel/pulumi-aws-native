// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export * from "./destination";
export * from "./logGroup";
export * from "./logStream";
export * from "./metricFilter";
export * from "./subscriptionFilter";

// Import resources to register:
import { Destination } from "./destination";
import { LogGroup } from "./logGroup";
import { LogStream } from "./logStream";
import { MetricFilter } from "./metricFilter";
import { SubscriptionFilter } from "./subscriptionFilter";

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "cloudformation:Logs:Destination":
                return new Destination(name, <any>undefined, { urn })
            case "cloudformation:Logs:LogGroup":
                return new LogGroup(name, <any>undefined, { urn })
            case "cloudformation:Logs:LogStream":
                return new LogStream(name, <any>undefined, { urn })
            case "cloudformation:Logs:MetricFilter":
                return new MetricFilter(name, <any>undefined, { urn })
            case "cloudformation:Logs:SubscriptionFilter":
                return new SubscriptionFilter(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("cloudformation", "Logs", _module)
