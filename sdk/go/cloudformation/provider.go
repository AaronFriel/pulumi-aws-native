// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package cloudformation

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type Provider struct {
	pulumi.ProviderResourceState

	// the region to use for deployments
	Region pulumi.StringOutput `pulumi:"region"`
	// the name of the stack to use for deployments
	Stack pulumi.StringOutput `pulumi:"stack"`
}

// NewProvider registers a new resource with the given unique name, arguments, and options.
func NewProvider(ctx *pulumi.Context,
	name string, args *ProviderArgs, opts ...pulumi.ResourceOption) (*Provider, error) {
	if args == nil || args.Region == nil {
		return nil, errors.New("missing required argument 'Region'")
	}
	if args == nil || args.Stack == nil {
		return nil, errors.New("missing required argument 'Stack'")
	}
	if args == nil {
		args = &ProviderArgs{}
	}
	var resource Provider
	err := ctx.RegisterResource("pulumi:providers:cloudformation", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

type providerArgs struct {
	// the region to use for deployments
	Region string `pulumi:"region"`
	// the name of the stack to use for deployments
	Stack string `pulumi:"stack"`
}

// The set of arguments for constructing a Provider resource.
type ProviderArgs struct {
	// the region to use for deployments
	Region pulumi.StringInput
	// the name of the stack to use for deployments
	Stack pulumi.StringInput
}

func (ProviderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*providerArgs)(nil)).Elem()
}
