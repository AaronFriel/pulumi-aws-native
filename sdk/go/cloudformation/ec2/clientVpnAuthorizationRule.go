// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ec2

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-clientvpnauthorizationrule.html
type ClientVpnAuthorizationRule struct {
	pulumi.CustomResourceState

	// The attributes associated with the resource
	Attributes ClientVpnAuthorizationRuleAttributesOutput `pulumi:"attributes"`
	// An explicit logical ID for the resource
	LogicalId pulumi.StringPtrOutput `pulumi:"logicalId"`
	// Arbitrary structured data associated with the resource
	Metadata pulumi.AnyOutput `pulumi:"metadata"`
	// The input properties associated with the resource
	Properties ClientVpnAuthorizationRulePropertiesOutput `pulumi:"properties"`
}

// NewClientVpnAuthorizationRule registers a new resource with the given unique name, arguments, and options.
func NewClientVpnAuthorizationRule(ctx *pulumi.Context,
	name string, args *ClientVpnAuthorizationRuleArgs, opts ...pulumi.ResourceOption) (*ClientVpnAuthorizationRule, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Properties == nil {
		return nil, errors.New("invalid value for required argument 'Properties'")
	}
	var resource ClientVpnAuthorizationRule
	err := ctx.RegisterResource("cloudformation:EC2:ClientVpnAuthorizationRule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetClientVpnAuthorizationRule gets an existing ClientVpnAuthorizationRule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetClientVpnAuthorizationRule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ClientVpnAuthorizationRuleState, opts ...pulumi.ResourceOption) (*ClientVpnAuthorizationRule, error) {
	var resource ClientVpnAuthorizationRule
	err := ctx.ReadResource("cloudformation:EC2:ClientVpnAuthorizationRule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ClientVpnAuthorizationRule resources.
type clientVpnAuthorizationRuleState struct {
	// The attributes associated with the resource
	Attributes *ClientVpnAuthorizationRuleAttributes `pulumi:"attributes"`
	// An explicit logical ID for the resource
	LogicalId *string `pulumi:"logicalId"`
	// Arbitrary structured data associated with the resource
	Metadata interface{} `pulumi:"metadata"`
	// The input properties associated with the resource
	Properties *ClientVpnAuthorizationRuleProperties `pulumi:"properties"`
}

type ClientVpnAuthorizationRuleState struct {
	// The attributes associated with the resource
	Attributes ClientVpnAuthorizationRuleAttributesPtrInput
	// An explicit logical ID for the resource
	LogicalId pulumi.StringPtrInput
	// Arbitrary structured data associated with the resource
	Metadata pulumi.Input
	// The input properties associated with the resource
	Properties ClientVpnAuthorizationRulePropertiesPtrInput
}

func (ClientVpnAuthorizationRuleState) ElementType() reflect.Type {
	return reflect.TypeOf((*clientVpnAuthorizationRuleState)(nil)).Elem()
}

type clientVpnAuthorizationRuleArgs struct {
	// With the deletionPolicy attribute you can preserve or (in some cases) backup a resource when its stack is deleted. You can specify a deletionPolicy attribute for each resource that you want to control. If a resource has no deletionPolicy attribute, AWS CloudFormation deletes the resource by default.
	DeletionPolicy *string `pulumi:"deletionPolicy"`
	// An explicit logical ID for the resource
	LogicalId *string `pulumi:"logicalId"`
	// Arbitrary structured data associated with the resource
	Metadata interface{} `pulumi:"metadata"`
	// The input properties associated with the resource
	Properties ClientVpnAuthorizationRuleProperties `pulumi:"properties"`
	// Use the updateReplacePolicy attribute to retain or (in some cases) backup the existing physical instance of a resource when it is replaced during a stack update operation.
	UpdateReplacePolicy *string `pulumi:"updateReplacePolicy"`
}

// The set of arguments for constructing a ClientVpnAuthorizationRule resource.
type ClientVpnAuthorizationRuleArgs struct {
	// With the deletionPolicy attribute you can preserve or (in some cases) backup a resource when its stack is deleted. You can specify a deletionPolicy attribute for each resource that you want to control. If a resource has no deletionPolicy attribute, AWS CloudFormation deletes the resource by default.
	DeletionPolicy pulumi.StringPtrInput
	// An explicit logical ID for the resource
	LogicalId pulumi.StringPtrInput
	// Arbitrary structured data associated with the resource
	Metadata pulumi.Input
	// The input properties associated with the resource
	Properties ClientVpnAuthorizationRulePropertiesInput
	// Use the updateReplacePolicy attribute to retain or (in some cases) backup the existing physical instance of a resource when it is replaced during a stack update operation.
	UpdateReplacePolicy pulumi.StringPtrInput
}

func (ClientVpnAuthorizationRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*clientVpnAuthorizationRuleArgs)(nil)).Elem()
}

type ClientVpnAuthorizationRuleInput interface {
	pulumi.Input

	ToClientVpnAuthorizationRuleOutput() ClientVpnAuthorizationRuleOutput
	ToClientVpnAuthorizationRuleOutputWithContext(ctx context.Context) ClientVpnAuthorizationRuleOutput
}

func (*ClientVpnAuthorizationRule) ElementType() reflect.Type {
	return reflect.TypeOf((*ClientVpnAuthorizationRule)(nil))
}

func (i *ClientVpnAuthorizationRule) ToClientVpnAuthorizationRuleOutput() ClientVpnAuthorizationRuleOutput {
	return i.ToClientVpnAuthorizationRuleOutputWithContext(context.Background())
}

func (i *ClientVpnAuthorizationRule) ToClientVpnAuthorizationRuleOutputWithContext(ctx context.Context) ClientVpnAuthorizationRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClientVpnAuthorizationRuleOutput)
}

type ClientVpnAuthorizationRuleOutput struct {
	*pulumi.OutputState
}

func (ClientVpnAuthorizationRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClientVpnAuthorizationRule)(nil))
}

func (o ClientVpnAuthorizationRuleOutput) ToClientVpnAuthorizationRuleOutput() ClientVpnAuthorizationRuleOutput {
	return o
}

func (o ClientVpnAuthorizationRuleOutput) ToClientVpnAuthorizationRuleOutputWithContext(ctx context.Context) ClientVpnAuthorizationRuleOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(ClientVpnAuthorizationRuleOutput{})
}
