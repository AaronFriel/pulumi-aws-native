// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ec2

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-ec2fleet.html
type EC2Fleet struct {
	pulumi.CustomResourceState

	// The attributes associated with the resource
	Attributes EC2FleetAttributesOutput `pulumi:"attributes"`
	// An explicit logical ID for the resource
	LogicalId pulumi.StringPtrOutput `pulumi:"logicalId"`
	// Arbitrary structured data associated with the resource
	Metadata pulumi.AnyOutput `pulumi:"metadata"`
	// The input properties associated with the resource
	Properties EC2FleetPropertiesOutput `pulumi:"properties"`
}

// NewEC2Fleet registers a new resource with the given unique name, arguments, and options.
func NewEC2Fleet(ctx *pulumi.Context,
	name string, args *EC2FleetArgs, opts ...pulumi.ResourceOption) (*EC2Fleet, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Properties == nil {
		return nil, errors.New("invalid value for required argument 'Properties'")
	}
	var resource EC2Fleet
	err := ctx.RegisterResource("cloudformation:EC2:EC2Fleet", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEC2Fleet gets an existing EC2Fleet resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEC2Fleet(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EC2FleetState, opts ...pulumi.ResourceOption) (*EC2Fleet, error) {
	var resource EC2Fleet
	err := ctx.ReadResource("cloudformation:EC2:EC2Fleet", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering EC2Fleet resources.
type ec2fleetState struct {
	// The attributes associated with the resource
	Attributes *EC2FleetAttributes `pulumi:"attributes"`
	// An explicit logical ID for the resource
	LogicalId *string `pulumi:"logicalId"`
	// Arbitrary structured data associated with the resource
	Metadata interface{} `pulumi:"metadata"`
	// The input properties associated with the resource
	Properties *EC2FleetProperties `pulumi:"properties"`
}

type EC2FleetState struct {
	// The attributes associated with the resource
	Attributes EC2FleetAttributesPtrInput
	// An explicit logical ID for the resource
	LogicalId pulumi.StringPtrInput
	// Arbitrary structured data associated with the resource
	Metadata pulumi.Input
	// The input properties associated with the resource
	Properties EC2FleetPropertiesPtrInput
}

func (EC2FleetState) ElementType() reflect.Type {
	return reflect.TypeOf((*ec2fleetState)(nil)).Elem()
}

type ec2fleetArgs struct {
	// With the deletionPolicy attribute you can preserve or (in some cases) backup a resource when its stack is deleted. You can specify a deletionPolicy attribute for each resource that you want to control. If a resource has no deletionPolicy attribute, AWS CloudFormation deletes the resource by default.
	DeletionPolicy *string `pulumi:"deletionPolicy"`
	// An explicit logical ID for the resource
	LogicalId *string `pulumi:"logicalId"`
	// Arbitrary structured data associated with the resource
	Metadata interface{} `pulumi:"metadata"`
	// The input properties associated with the resource
	Properties EC2FleetProperties `pulumi:"properties"`
	// Use the updateReplacePolicy attribute to retain or (in some cases) backup the existing physical instance of a resource when it is replaced during a stack update operation.
	UpdateReplacePolicy *string `pulumi:"updateReplacePolicy"`
}

// The set of arguments for constructing a EC2Fleet resource.
type EC2FleetArgs struct {
	// With the deletionPolicy attribute you can preserve or (in some cases) backup a resource when its stack is deleted. You can specify a deletionPolicy attribute for each resource that you want to control. If a resource has no deletionPolicy attribute, AWS CloudFormation deletes the resource by default.
	DeletionPolicy pulumi.StringPtrInput
	// An explicit logical ID for the resource
	LogicalId pulumi.StringPtrInput
	// Arbitrary structured data associated with the resource
	Metadata pulumi.Input
	// The input properties associated with the resource
	Properties EC2FleetPropertiesInput
	// Use the updateReplacePolicy attribute to retain or (in some cases) backup the existing physical instance of a resource when it is replaced during a stack update operation.
	UpdateReplacePolicy pulumi.StringPtrInput
}

func (EC2FleetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ec2fleetArgs)(nil)).Elem()
}

type EC2FleetInput interface {
	pulumi.Input

	ToEC2FleetOutput() EC2FleetOutput
	ToEC2FleetOutputWithContext(ctx context.Context) EC2FleetOutput
}

func (*EC2Fleet) ElementType() reflect.Type {
	return reflect.TypeOf((*EC2Fleet)(nil))
}

func (i *EC2Fleet) ToEC2FleetOutput() EC2FleetOutput {
	return i.ToEC2FleetOutputWithContext(context.Background())
}

func (i *EC2Fleet) ToEC2FleetOutputWithContext(ctx context.Context) EC2FleetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EC2FleetOutput)
}

type EC2FleetOutput struct {
	*pulumi.OutputState
}

func (EC2FleetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EC2Fleet)(nil))
}

func (o EC2FleetOutput) ToEC2FleetOutput() EC2FleetOutput {
	return o
}

func (o EC2FleetOutput) ToEC2FleetOutputWithContext(ctx context.Context) EC2FleetOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(EC2FleetOutput{})
}
