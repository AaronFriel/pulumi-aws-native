// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ec2

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-clientvpntargetnetworkassociation.html
type ClientVpnTargetNetworkAssociation struct {
	pulumi.CustomResourceState

	// The attributes associated with the resource
	Attributes ClientVpnTargetNetworkAssociationAttributesOutput `pulumi:"attributes"`
	// An explicit logical ID for the resource
	LogicalId pulumi.StringPtrOutput `pulumi:"logicalId"`
	// Arbitrary structured data associated with the resource
	Metadata pulumi.AnyOutput `pulumi:"metadata"`
	// The input properties associated with the resource
	Properties ClientVpnTargetNetworkAssociationPropertiesOutput `pulumi:"properties"`
}

// NewClientVpnTargetNetworkAssociation registers a new resource with the given unique name, arguments, and options.
func NewClientVpnTargetNetworkAssociation(ctx *pulumi.Context,
	name string, args *ClientVpnTargetNetworkAssociationArgs, opts ...pulumi.ResourceOption) (*ClientVpnTargetNetworkAssociation, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Properties == nil {
		return nil, errors.New("invalid value for required argument 'Properties'")
	}
	var resource ClientVpnTargetNetworkAssociation
	err := ctx.RegisterResource("cloudformation:EC2:ClientVpnTargetNetworkAssociation", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetClientVpnTargetNetworkAssociation gets an existing ClientVpnTargetNetworkAssociation resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetClientVpnTargetNetworkAssociation(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ClientVpnTargetNetworkAssociationState, opts ...pulumi.ResourceOption) (*ClientVpnTargetNetworkAssociation, error) {
	var resource ClientVpnTargetNetworkAssociation
	err := ctx.ReadResource("cloudformation:EC2:ClientVpnTargetNetworkAssociation", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ClientVpnTargetNetworkAssociation resources.
type clientVpnTargetNetworkAssociationState struct {
	// The attributes associated with the resource
	Attributes *ClientVpnTargetNetworkAssociationAttributes `pulumi:"attributes"`
	// An explicit logical ID for the resource
	LogicalId *string `pulumi:"logicalId"`
	// Arbitrary structured data associated with the resource
	Metadata interface{} `pulumi:"metadata"`
	// The input properties associated with the resource
	Properties *ClientVpnTargetNetworkAssociationProperties `pulumi:"properties"`
}

type ClientVpnTargetNetworkAssociationState struct {
	// The attributes associated with the resource
	Attributes ClientVpnTargetNetworkAssociationAttributesPtrInput
	// An explicit logical ID for the resource
	LogicalId pulumi.StringPtrInput
	// Arbitrary structured data associated with the resource
	Metadata pulumi.Input
	// The input properties associated with the resource
	Properties ClientVpnTargetNetworkAssociationPropertiesPtrInput
}

func (ClientVpnTargetNetworkAssociationState) ElementType() reflect.Type {
	return reflect.TypeOf((*clientVpnTargetNetworkAssociationState)(nil)).Elem()
}

type clientVpnTargetNetworkAssociationArgs struct {
	// With the deletionPolicy attribute you can preserve or (in some cases) backup a resource when its stack is deleted. You can specify a deletionPolicy attribute for each resource that you want to control. If a resource has no deletionPolicy attribute, AWS CloudFormation deletes the resource by default.
	DeletionPolicy *string `pulumi:"deletionPolicy"`
	// An explicit logical ID for the resource
	LogicalId *string `pulumi:"logicalId"`
	// Arbitrary structured data associated with the resource
	Metadata interface{} `pulumi:"metadata"`
	// The input properties associated with the resource
	Properties ClientVpnTargetNetworkAssociationProperties `pulumi:"properties"`
	// Use the updateReplacePolicy attribute to retain or (in some cases) backup the existing physical instance of a resource when it is replaced during a stack update operation.
	UpdateReplacePolicy *string `pulumi:"updateReplacePolicy"`
}

// The set of arguments for constructing a ClientVpnTargetNetworkAssociation resource.
type ClientVpnTargetNetworkAssociationArgs struct {
	// With the deletionPolicy attribute you can preserve or (in some cases) backup a resource when its stack is deleted. You can specify a deletionPolicy attribute for each resource that you want to control. If a resource has no deletionPolicy attribute, AWS CloudFormation deletes the resource by default.
	DeletionPolicy pulumi.StringPtrInput
	// An explicit logical ID for the resource
	LogicalId pulumi.StringPtrInput
	// Arbitrary structured data associated with the resource
	Metadata pulumi.Input
	// The input properties associated with the resource
	Properties ClientVpnTargetNetworkAssociationPropertiesInput
	// Use the updateReplacePolicy attribute to retain or (in some cases) backup the existing physical instance of a resource when it is replaced during a stack update operation.
	UpdateReplacePolicy pulumi.StringPtrInput
}

func (ClientVpnTargetNetworkAssociationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*clientVpnTargetNetworkAssociationArgs)(nil)).Elem()
}

type ClientVpnTargetNetworkAssociationInput interface {
	pulumi.Input

	ToClientVpnTargetNetworkAssociationOutput() ClientVpnTargetNetworkAssociationOutput
	ToClientVpnTargetNetworkAssociationOutputWithContext(ctx context.Context) ClientVpnTargetNetworkAssociationOutput
}

func (*ClientVpnTargetNetworkAssociation) ElementType() reflect.Type {
	return reflect.TypeOf((*ClientVpnTargetNetworkAssociation)(nil))
}

func (i *ClientVpnTargetNetworkAssociation) ToClientVpnTargetNetworkAssociationOutput() ClientVpnTargetNetworkAssociationOutput {
	return i.ToClientVpnTargetNetworkAssociationOutputWithContext(context.Background())
}

func (i *ClientVpnTargetNetworkAssociation) ToClientVpnTargetNetworkAssociationOutputWithContext(ctx context.Context) ClientVpnTargetNetworkAssociationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClientVpnTargetNetworkAssociationOutput)
}

type ClientVpnTargetNetworkAssociationOutput struct {
	*pulumi.OutputState
}

func (ClientVpnTargetNetworkAssociationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClientVpnTargetNetworkAssociation)(nil))
}

func (o ClientVpnTargetNetworkAssociationOutput) ToClientVpnTargetNetworkAssociationOutput() ClientVpnTargetNetworkAssociationOutput {
	return o
}

func (o ClientVpnTargetNetworkAssociationOutput) ToClientVpnTargetNetworkAssociationOutputWithContext(ctx context.Context) ClientVpnTargetNetworkAssociationOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(ClientVpnTargetNetworkAssociationOutput{})
}
