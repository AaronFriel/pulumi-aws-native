// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package cognito

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cognito-userpooluser.html
type UserPoolUser struct {
	pulumi.CustomResourceState

	// The attributes associated with the resource
	Attributes UserPoolUserAttributesOutput `pulumi:"attributes"`
	// An explicit logical ID for the resource
	LogicalId pulumi.StringPtrOutput `pulumi:"logicalId"`
	// Arbitrary structured data associated with the resource
	Metadata pulumi.AnyOutput `pulumi:"metadata"`
	// The input properties associated with the resource
	Properties UserPoolUserPropertiesOutput `pulumi:"properties"`
}

// NewUserPoolUser registers a new resource with the given unique name, arguments, and options.
func NewUserPoolUser(ctx *pulumi.Context,
	name string, args *UserPoolUserArgs, opts ...pulumi.ResourceOption) (*UserPoolUser, error) {
	if args == nil || args.Properties == nil {
		return nil, errors.New("missing required argument 'Properties'")
	}
	if args == nil {
		args = &UserPoolUserArgs{}
	}
	var resource UserPoolUser
	err := ctx.RegisterResource("cloudformation:Cognito:UserPoolUser", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetUserPoolUser gets an existing UserPoolUser resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetUserPoolUser(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *UserPoolUserState, opts ...pulumi.ResourceOption) (*UserPoolUser, error) {
	var resource UserPoolUser
	err := ctx.ReadResource("cloudformation:Cognito:UserPoolUser", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering UserPoolUser resources.
type userPoolUserState struct {
	// The attributes associated with the resource
	Attributes *UserPoolUserAttributes `pulumi:"attributes"`
	// An explicit logical ID for the resource
	LogicalId *string `pulumi:"logicalId"`
	// Arbitrary structured data associated with the resource
	Metadata interface{} `pulumi:"metadata"`
	// The input properties associated with the resource
	Properties *UserPoolUserProperties `pulumi:"properties"`
}

type UserPoolUserState struct {
	// The attributes associated with the resource
	Attributes UserPoolUserAttributesPtrInput
	// An explicit logical ID for the resource
	LogicalId pulumi.StringPtrInput
	// Arbitrary structured data associated with the resource
	Metadata pulumi.Input
	// The input properties associated with the resource
	Properties UserPoolUserPropertiesPtrInput
}

func (UserPoolUserState) ElementType() reflect.Type {
	return reflect.TypeOf((*userPoolUserState)(nil)).Elem()
}

type userPoolUserArgs struct {
	// With the deletionPolicy attribute you can preserve or (in some cases) backup a resource when its stack is deleted. You can specify a deletionPolicy attribute for each resource that you want to control. If a resource has no deletionPolicy attribute, AWS CloudFormation deletes the resource by default.
	DeletionPolicy *string `pulumi:"deletionPolicy"`
	// An explicit logical ID for the resource
	LogicalId *string `pulumi:"logicalId"`
	// Arbitrary structured data associated with the resource
	Metadata interface{} `pulumi:"metadata"`
	// The input properties associated with the resource
	Properties UserPoolUserProperties `pulumi:"properties"`
	// Use the updateReplacePolicy attribute to retain or (in some cases) backup the existing physical instance of a resource when it is replaced during a stack update operation.
	UpdateReplacePolicy *string `pulumi:"updateReplacePolicy"`
}

// The set of arguments for constructing a UserPoolUser resource.
type UserPoolUserArgs struct {
	// With the deletionPolicy attribute you can preserve or (in some cases) backup a resource when its stack is deleted. You can specify a deletionPolicy attribute for each resource that you want to control. If a resource has no deletionPolicy attribute, AWS CloudFormation deletes the resource by default.
	DeletionPolicy pulumi.StringPtrInput
	// An explicit logical ID for the resource
	LogicalId pulumi.StringPtrInput
	// Arbitrary structured data associated with the resource
	Metadata pulumi.Input
	// The input properties associated with the resource
	Properties UserPoolUserPropertiesInput
	// Use the updateReplacePolicy attribute to retain or (in some cases) backup the existing physical instance of a resource when it is replaced during a stack update operation.
	UpdateReplacePolicy pulumi.StringPtrInput
}

func (UserPoolUserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*userPoolUserArgs)(nil)).Elem()
}
