// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package kinesisanalyticsv2

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-kinesisanalyticsv2-applicationoutput.html
type ApplicationOutput struct {
	pulumi.CustomResourceState

	// http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-kinesisanalyticsv2-applicationoutput.html#cfn-kinesisanalyticsv2-applicationoutput-applicationname
	ApplicationName pulumi.StringOutput `pulumi:"applicationName"`
	// http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-kinesisanalyticsv2-applicationoutput.html#cfn-kinesisanalyticsv2-applicationoutput-output
	Output ApplicationOutputOutputTypeOutput `pulumi:"output"`
}

// NewApplicationOutput registers a new resource with the given unique name, arguments, and options.
func NewApplicationOutput(ctx *pulumi.Context,
	name string, args *ApplicationOutputArgs, opts ...pulumi.ResourceOption) (*ApplicationOutput, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ApplicationName == nil {
		return nil, errors.New("invalid value for required argument 'ApplicationName'")
	}
	if args.Output == nil {
		return nil, errors.New("invalid value for required argument 'Output'")
	}
	var resource ApplicationOutput
	err := ctx.RegisterResource("aws-native:kinesisanalyticsv2:ApplicationOutput", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetApplicationOutput gets an existing ApplicationOutput resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetApplicationOutput(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ApplicationOutputState, opts ...pulumi.ResourceOption) (*ApplicationOutput, error) {
	var resource ApplicationOutput
	err := ctx.ReadResource("aws-native:kinesisanalyticsv2:ApplicationOutput", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ApplicationOutput resources.
type applicationOutputState struct {
}

type ApplicationOutputState struct {
}

func (ApplicationOutputState) ElementType() reflect.Type {
	return reflect.TypeOf((*applicationOutputState)(nil)).Elem()
}

type applicationOutputArgs struct {
	// http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-kinesisanalyticsv2-applicationoutput.html#cfn-kinesisanalyticsv2-applicationoutput-applicationname
	ApplicationName string `pulumi:"applicationName"`
	// http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-kinesisanalyticsv2-applicationoutput.html#cfn-kinesisanalyticsv2-applicationoutput-output
	Output ApplicationOutputOutputType `pulumi:"output"`
}

// The set of arguments for constructing a ApplicationOutput resource.
type ApplicationOutputArgs struct {
	// http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-kinesisanalyticsv2-applicationoutput.html#cfn-kinesisanalyticsv2-applicationoutput-applicationname
	ApplicationName pulumi.StringInput
	// http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-kinesisanalyticsv2-applicationoutput.html#cfn-kinesisanalyticsv2-applicationoutput-output
	Output ApplicationOutputOutputTypeInput
}

func (ApplicationOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*applicationOutputArgs)(nil)).Elem()
}

type ApplicationOutputInput interface {
	pulumi.Input

	ToApplicationOutputOutput() ApplicationOutputOutput
	ToApplicationOutputOutputWithContext(ctx context.Context) ApplicationOutputOutput
}

func (*ApplicationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationOutput)(nil))
}

func (i *ApplicationOutput) ToApplicationOutputOutput() ApplicationOutputOutput {
	return i.ToApplicationOutputOutputWithContext(context.Background())
}

func (i *ApplicationOutput) ToApplicationOutputOutputWithContext(ctx context.Context) ApplicationOutputOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationOutputOutput)
}

type ApplicationOutputOutput struct{ *pulumi.OutputState }

func (ApplicationOutputOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationOutput)(nil))
}

func (o ApplicationOutputOutput) ToApplicationOutputOutput() ApplicationOutputOutput {
	return o
}

func (o ApplicationOutputOutput) ToApplicationOutputOutputWithContext(ctx context.Context) ApplicationOutputOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(ApplicationOutputOutput{})
}
