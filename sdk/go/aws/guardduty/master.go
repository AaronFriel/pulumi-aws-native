// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package guardduty

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-guardduty-master.html
type Master struct {
	pulumi.CustomResourceState

	// http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-guardduty-master.html#cfn-guardduty-master-detectorid
	DetectorId pulumi.StringOutput `pulumi:"detectorId"`
	// http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-guardduty-master.html#cfn-guardduty-master-invitationid
	InvitationId pulumi.StringPtrOutput `pulumi:"invitationId"`
	// http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-guardduty-master.html#cfn-guardduty-master-masterid
	MasterId pulumi.StringOutput `pulumi:"masterId"`
}

// NewMaster registers a new resource with the given unique name, arguments, and options.
func NewMaster(ctx *pulumi.Context,
	name string, args *MasterArgs, opts ...pulumi.ResourceOption) (*Master, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DetectorId == nil {
		return nil, errors.New("invalid value for required argument 'DetectorId'")
	}
	if args.MasterId == nil {
		return nil, errors.New("invalid value for required argument 'MasterId'")
	}
	var resource Master
	err := ctx.RegisterResource("aws-native:guardduty:Master", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMaster gets an existing Master resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMaster(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MasterState, opts ...pulumi.ResourceOption) (*Master, error) {
	var resource Master
	err := ctx.ReadResource("aws-native:guardduty:Master", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Master resources.
type masterState struct {
}

type MasterState struct {
}

func (MasterState) ElementType() reflect.Type {
	return reflect.TypeOf((*masterState)(nil)).Elem()
}

type masterArgs struct {
	// http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-guardduty-master.html#cfn-guardduty-master-detectorid
	DetectorId string `pulumi:"detectorId"`
	// http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-guardduty-master.html#cfn-guardduty-master-invitationid
	InvitationId *string `pulumi:"invitationId"`
	// http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-guardduty-master.html#cfn-guardduty-master-masterid
	MasterId string `pulumi:"masterId"`
}

// The set of arguments for constructing a Master resource.
type MasterArgs struct {
	// http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-guardduty-master.html#cfn-guardduty-master-detectorid
	DetectorId pulumi.StringInput
	// http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-guardduty-master.html#cfn-guardduty-master-invitationid
	InvitationId pulumi.StringPtrInput
	// http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-guardduty-master.html#cfn-guardduty-master-masterid
	MasterId pulumi.StringInput
}

func (MasterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*masterArgs)(nil)).Elem()
}

type MasterInput interface {
	pulumi.Input

	ToMasterOutput() MasterOutput
	ToMasterOutputWithContext(ctx context.Context) MasterOutput
}

func (*Master) ElementType() reflect.Type {
	return reflect.TypeOf((*Master)(nil))
}

func (i *Master) ToMasterOutput() MasterOutput {
	return i.ToMasterOutputWithContext(context.Background())
}

func (i *Master) ToMasterOutputWithContext(ctx context.Context) MasterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MasterOutput)
}

type MasterOutput struct{ *pulumi.OutputState }

func (MasterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Master)(nil))
}

func (o MasterOutput) ToMasterOutput() MasterOutput {
	return o
}

func (o MasterOutput) ToMasterOutputWithContext(ctx context.Context) MasterOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(MasterOutput{})
}
