// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package cognito

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cognito-userpoolresourceserver.html
type UserPoolResourceServer struct {
	pulumi.CustomResourceState

	// http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cognito-userpoolresourceserver.html#cfn-cognito-userpoolresourceserver-identifier
	Identifier pulumi.StringOutput `pulumi:"identifier"`
	// http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cognito-userpoolresourceserver.html#cfn-cognito-userpoolresourceserver-name
	Name pulumi.StringOutput `pulumi:"name"`
	// http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cognito-userpoolresourceserver.html#cfn-cognito-userpoolresourceserver-scopes
	Scopes UserPoolResourceServerResourceServerScopeTypeArrayOutput `pulumi:"scopes"`
	// http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cognito-userpoolresourceserver.html#cfn-cognito-userpoolresourceserver-userpoolid
	UserPoolId pulumi.StringOutput `pulumi:"userPoolId"`
}

// NewUserPoolResourceServer registers a new resource with the given unique name, arguments, and options.
func NewUserPoolResourceServer(ctx *pulumi.Context,
	name string, args *UserPoolResourceServerArgs, opts ...pulumi.ResourceOption) (*UserPoolResourceServer, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Identifier == nil {
		return nil, errors.New("invalid value for required argument 'Identifier'")
	}
	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	if args.UserPoolId == nil {
		return nil, errors.New("invalid value for required argument 'UserPoolId'")
	}
	var resource UserPoolResourceServer
	err := ctx.RegisterResource("aws-native:cognito:UserPoolResourceServer", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetUserPoolResourceServer gets an existing UserPoolResourceServer resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetUserPoolResourceServer(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *UserPoolResourceServerState, opts ...pulumi.ResourceOption) (*UserPoolResourceServer, error) {
	var resource UserPoolResourceServer
	err := ctx.ReadResource("aws-native:cognito:UserPoolResourceServer", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering UserPoolResourceServer resources.
type userPoolResourceServerState struct {
}

type UserPoolResourceServerState struct {
}

func (UserPoolResourceServerState) ElementType() reflect.Type {
	return reflect.TypeOf((*userPoolResourceServerState)(nil)).Elem()
}

type userPoolResourceServerArgs struct {
	// http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cognito-userpoolresourceserver.html#cfn-cognito-userpoolresourceserver-identifier
	Identifier string `pulumi:"identifier"`
	// http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cognito-userpoolresourceserver.html#cfn-cognito-userpoolresourceserver-name
	Name string `pulumi:"name"`
	// http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cognito-userpoolresourceserver.html#cfn-cognito-userpoolresourceserver-scopes
	Scopes []UserPoolResourceServerResourceServerScopeType `pulumi:"scopes"`
	// http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cognito-userpoolresourceserver.html#cfn-cognito-userpoolresourceserver-userpoolid
	UserPoolId string `pulumi:"userPoolId"`
}

// The set of arguments for constructing a UserPoolResourceServer resource.
type UserPoolResourceServerArgs struct {
	// http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cognito-userpoolresourceserver.html#cfn-cognito-userpoolresourceserver-identifier
	Identifier pulumi.StringInput
	// http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cognito-userpoolresourceserver.html#cfn-cognito-userpoolresourceserver-name
	Name pulumi.StringInput
	// http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cognito-userpoolresourceserver.html#cfn-cognito-userpoolresourceserver-scopes
	Scopes UserPoolResourceServerResourceServerScopeTypeArrayInput
	// http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cognito-userpoolresourceserver.html#cfn-cognito-userpoolresourceserver-userpoolid
	UserPoolId pulumi.StringInput
}

func (UserPoolResourceServerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*userPoolResourceServerArgs)(nil)).Elem()
}

type UserPoolResourceServerInput interface {
	pulumi.Input

	ToUserPoolResourceServerOutput() UserPoolResourceServerOutput
	ToUserPoolResourceServerOutputWithContext(ctx context.Context) UserPoolResourceServerOutput
}

func (*UserPoolResourceServer) ElementType() reflect.Type {
	return reflect.TypeOf((*UserPoolResourceServer)(nil))
}

func (i *UserPoolResourceServer) ToUserPoolResourceServerOutput() UserPoolResourceServerOutput {
	return i.ToUserPoolResourceServerOutputWithContext(context.Background())
}

func (i *UserPoolResourceServer) ToUserPoolResourceServerOutputWithContext(ctx context.Context) UserPoolResourceServerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserPoolResourceServerOutput)
}

type UserPoolResourceServerOutput struct{ *pulumi.OutputState }

func (UserPoolResourceServerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserPoolResourceServer)(nil))
}

func (o UserPoolResourceServerOutput) ToUserPoolResourceServerOutput() UserPoolResourceServerOutput {
	return o
}

func (o UserPoolResourceServerOutput) ToUserPoolResourceServerOutputWithContext(ctx context.Context) UserPoolResourceServerOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(UserPoolResourceServerOutput{})
}
