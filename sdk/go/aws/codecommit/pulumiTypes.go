// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package codecommit

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type RepositoryCode struct {
	BranchName *string      `pulumi:"branchName"`
	S3         RepositoryS3 `pulumi:"s3"`
}

// RepositoryCodeInput is an input type that accepts RepositoryCodeArgs and RepositoryCodeOutput values.
// You can construct a concrete instance of `RepositoryCodeInput` via:
//
//          RepositoryCodeArgs{...}
type RepositoryCodeInput interface {
	pulumi.Input

	ToRepositoryCodeOutput() RepositoryCodeOutput
	ToRepositoryCodeOutputWithContext(context.Context) RepositoryCodeOutput
}

type RepositoryCodeArgs struct {
	BranchName pulumi.StringPtrInput `pulumi:"branchName"`
	S3         RepositoryS3Input     `pulumi:"s3"`
}

func (RepositoryCodeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositoryCode)(nil)).Elem()
}

func (i RepositoryCodeArgs) ToRepositoryCodeOutput() RepositoryCodeOutput {
	return i.ToRepositoryCodeOutputWithContext(context.Background())
}

func (i RepositoryCodeArgs) ToRepositoryCodeOutputWithContext(ctx context.Context) RepositoryCodeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryCodeOutput)
}

func (i RepositoryCodeArgs) ToRepositoryCodePtrOutput() RepositoryCodePtrOutput {
	return i.ToRepositoryCodePtrOutputWithContext(context.Background())
}

func (i RepositoryCodeArgs) ToRepositoryCodePtrOutputWithContext(ctx context.Context) RepositoryCodePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryCodeOutput).ToRepositoryCodePtrOutputWithContext(ctx)
}

// RepositoryCodePtrInput is an input type that accepts RepositoryCodeArgs, RepositoryCodePtr and RepositoryCodePtrOutput values.
// You can construct a concrete instance of `RepositoryCodePtrInput` via:
//
//          RepositoryCodeArgs{...}
//
//  or:
//
//          nil
type RepositoryCodePtrInput interface {
	pulumi.Input

	ToRepositoryCodePtrOutput() RepositoryCodePtrOutput
	ToRepositoryCodePtrOutputWithContext(context.Context) RepositoryCodePtrOutput
}

type repositoryCodePtrType RepositoryCodeArgs

func RepositoryCodePtr(v *RepositoryCodeArgs) RepositoryCodePtrInput {
	return (*repositoryCodePtrType)(v)
}

func (*repositoryCodePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RepositoryCode)(nil)).Elem()
}

func (i *repositoryCodePtrType) ToRepositoryCodePtrOutput() RepositoryCodePtrOutput {
	return i.ToRepositoryCodePtrOutputWithContext(context.Background())
}

func (i *repositoryCodePtrType) ToRepositoryCodePtrOutputWithContext(ctx context.Context) RepositoryCodePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryCodePtrOutput)
}

type RepositoryCodeOutput struct{ *pulumi.OutputState }

func (RepositoryCodeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositoryCode)(nil)).Elem()
}

func (o RepositoryCodeOutput) ToRepositoryCodeOutput() RepositoryCodeOutput {
	return o
}

func (o RepositoryCodeOutput) ToRepositoryCodeOutputWithContext(ctx context.Context) RepositoryCodeOutput {
	return o
}

func (o RepositoryCodeOutput) ToRepositoryCodePtrOutput() RepositoryCodePtrOutput {
	return o.ToRepositoryCodePtrOutputWithContext(context.Background())
}

func (o RepositoryCodeOutput) ToRepositoryCodePtrOutputWithContext(ctx context.Context) RepositoryCodePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RepositoryCode) *RepositoryCode {
		return &v
	}).(RepositoryCodePtrOutput)
}

func (o RepositoryCodeOutput) BranchName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RepositoryCode) *string { return v.BranchName }).(pulumi.StringPtrOutput)
}

func (o RepositoryCodeOutput) S3() RepositoryS3Output {
	return o.ApplyT(func(v RepositoryCode) RepositoryS3 { return v.S3 }).(RepositoryS3Output)
}

type RepositoryCodePtrOutput struct{ *pulumi.OutputState }

func (RepositoryCodePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RepositoryCode)(nil)).Elem()
}

func (o RepositoryCodePtrOutput) ToRepositoryCodePtrOutput() RepositoryCodePtrOutput {
	return o
}

func (o RepositoryCodePtrOutput) ToRepositoryCodePtrOutputWithContext(ctx context.Context) RepositoryCodePtrOutput {
	return o
}

func (o RepositoryCodePtrOutput) Elem() RepositoryCodeOutput {
	return o.ApplyT(func(v *RepositoryCode) RepositoryCode {
		if v != nil {
			return *v
		}
		var ret RepositoryCode
		return ret
	}).(RepositoryCodeOutput)
}

func (o RepositoryCodePtrOutput) BranchName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RepositoryCode) *string {
		if v == nil {
			return nil
		}
		return v.BranchName
	}).(pulumi.StringPtrOutput)
}

func (o RepositoryCodePtrOutput) S3() RepositoryS3PtrOutput {
	return o.ApplyT(func(v *RepositoryCode) *RepositoryS3 {
		if v == nil {
			return nil
		}
		return &v.S3
	}).(RepositoryS3PtrOutput)
}

type RepositoryRepositoryTrigger struct {
	Branches       []string `pulumi:"branches"`
	CustomData     *string  `pulumi:"customData"`
	DestinationArn string   `pulumi:"destinationArn"`
	Events         []string `pulumi:"events"`
	Name           string   `pulumi:"name"`
}

// RepositoryRepositoryTriggerInput is an input type that accepts RepositoryRepositoryTriggerArgs and RepositoryRepositoryTriggerOutput values.
// You can construct a concrete instance of `RepositoryRepositoryTriggerInput` via:
//
//          RepositoryRepositoryTriggerArgs{...}
type RepositoryRepositoryTriggerInput interface {
	pulumi.Input

	ToRepositoryRepositoryTriggerOutput() RepositoryRepositoryTriggerOutput
	ToRepositoryRepositoryTriggerOutputWithContext(context.Context) RepositoryRepositoryTriggerOutput
}

type RepositoryRepositoryTriggerArgs struct {
	Branches       pulumi.StringArrayInput `pulumi:"branches"`
	CustomData     pulumi.StringPtrInput   `pulumi:"customData"`
	DestinationArn pulumi.StringInput      `pulumi:"destinationArn"`
	Events         pulumi.StringArrayInput `pulumi:"events"`
	Name           pulumi.StringInput      `pulumi:"name"`
}

func (RepositoryRepositoryTriggerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositoryRepositoryTrigger)(nil)).Elem()
}

func (i RepositoryRepositoryTriggerArgs) ToRepositoryRepositoryTriggerOutput() RepositoryRepositoryTriggerOutput {
	return i.ToRepositoryRepositoryTriggerOutputWithContext(context.Background())
}

func (i RepositoryRepositoryTriggerArgs) ToRepositoryRepositoryTriggerOutputWithContext(ctx context.Context) RepositoryRepositoryTriggerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryRepositoryTriggerOutput)
}

// RepositoryRepositoryTriggerArrayInput is an input type that accepts RepositoryRepositoryTriggerArray and RepositoryRepositoryTriggerArrayOutput values.
// You can construct a concrete instance of `RepositoryRepositoryTriggerArrayInput` via:
//
//          RepositoryRepositoryTriggerArray{ RepositoryRepositoryTriggerArgs{...} }
type RepositoryRepositoryTriggerArrayInput interface {
	pulumi.Input

	ToRepositoryRepositoryTriggerArrayOutput() RepositoryRepositoryTriggerArrayOutput
	ToRepositoryRepositoryTriggerArrayOutputWithContext(context.Context) RepositoryRepositoryTriggerArrayOutput
}

type RepositoryRepositoryTriggerArray []RepositoryRepositoryTriggerInput

func (RepositoryRepositoryTriggerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RepositoryRepositoryTrigger)(nil)).Elem()
}

func (i RepositoryRepositoryTriggerArray) ToRepositoryRepositoryTriggerArrayOutput() RepositoryRepositoryTriggerArrayOutput {
	return i.ToRepositoryRepositoryTriggerArrayOutputWithContext(context.Background())
}

func (i RepositoryRepositoryTriggerArray) ToRepositoryRepositoryTriggerArrayOutputWithContext(ctx context.Context) RepositoryRepositoryTriggerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryRepositoryTriggerArrayOutput)
}

type RepositoryRepositoryTriggerOutput struct{ *pulumi.OutputState }

func (RepositoryRepositoryTriggerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositoryRepositoryTrigger)(nil)).Elem()
}

func (o RepositoryRepositoryTriggerOutput) ToRepositoryRepositoryTriggerOutput() RepositoryRepositoryTriggerOutput {
	return o
}

func (o RepositoryRepositoryTriggerOutput) ToRepositoryRepositoryTriggerOutputWithContext(ctx context.Context) RepositoryRepositoryTriggerOutput {
	return o
}

func (o RepositoryRepositoryTriggerOutput) Branches() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RepositoryRepositoryTrigger) []string { return v.Branches }).(pulumi.StringArrayOutput)
}

func (o RepositoryRepositoryTriggerOutput) CustomData() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RepositoryRepositoryTrigger) *string { return v.CustomData }).(pulumi.StringPtrOutput)
}

func (o RepositoryRepositoryTriggerOutput) DestinationArn() pulumi.StringOutput {
	return o.ApplyT(func(v RepositoryRepositoryTrigger) string { return v.DestinationArn }).(pulumi.StringOutput)
}

func (o RepositoryRepositoryTriggerOutput) Events() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RepositoryRepositoryTrigger) []string { return v.Events }).(pulumi.StringArrayOutput)
}

func (o RepositoryRepositoryTriggerOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v RepositoryRepositoryTrigger) string { return v.Name }).(pulumi.StringOutput)
}

type RepositoryRepositoryTriggerArrayOutput struct{ *pulumi.OutputState }

func (RepositoryRepositoryTriggerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RepositoryRepositoryTrigger)(nil)).Elem()
}

func (o RepositoryRepositoryTriggerArrayOutput) ToRepositoryRepositoryTriggerArrayOutput() RepositoryRepositoryTriggerArrayOutput {
	return o
}

func (o RepositoryRepositoryTriggerArrayOutput) ToRepositoryRepositoryTriggerArrayOutputWithContext(ctx context.Context) RepositoryRepositoryTriggerArrayOutput {
	return o
}

func (o RepositoryRepositoryTriggerArrayOutput) Index(i pulumi.IntInput) RepositoryRepositoryTriggerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RepositoryRepositoryTrigger {
		return vs[0].([]RepositoryRepositoryTrigger)[vs[1].(int)]
	}).(RepositoryRepositoryTriggerOutput)
}

type RepositoryS3 struct {
	Bucket        string  `pulumi:"bucket"`
	Key           string  `pulumi:"key"`
	ObjectVersion *string `pulumi:"objectVersion"`
}

// RepositoryS3Input is an input type that accepts RepositoryS3Args and RepositoryS3Output values.
// You can construct a concrete instance of `RepositoryS3Input` via:
//
//          RepositoryS3Args{...}
type RepositoryS3Input interface {
	pulumi.Input

	ToRepositoryS3Output() RepositoryS3Output
	ToRepositoryS3OutputWithContext(context.Context) RepositoryS3Output
}

type RepositoryS3Args struct {
	Bucket        pulumi.StringInput    `pulumi:"bucket"`
	Key           pulumi.StringInput    `pulumi:"key"`
	ObjectVersion pulumi.StringPtrInput `pulumi:"objectVersion"`
}

func (RepositoryS3Args) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositoryS3)(nil)).Elem()
}

func (i RepositoryS3Args) ToRepositoryS3Output() RepositoryS3Output {
	return i.ToRepositoryS3OutputWithContext(context.Background())
}

func (i RepositoryS3Args) ToRepositoryS3OutputWithContext(ctx context.Context) RepositoryS3Output {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryS3Output)
}

func (i RepositoryS3Args) ToRepositoryS3PtrOutput() RepositoryS3PtrOutput {
	return i.ToRepositoryS3PtrOutputWithContext(context.Background())
}

func (i RepositoryS3Args) ToRepositoryS3PtrOutputWithContext(ctx context.Context) RepositoryS3PtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryS3Output).ToRepositoryS3PtrOutputWithContext(ctx)
}

// RepositoryS3PtrInput is an input type that accepts RepositoryS3Args, RepositoryS3Ptr and RepositoryS3PtrOutput values.
// You can construct a concrete instance of `RepositoryS3PtrInput` via:
//
//          RepositoryS3Args{...}
//
//  or:
//
//          nil
type RepositoryS3PtrInput interface {
	pulumi.Input

	ToRepositoryS3PtrOutput() RepositoryS3PtrOutput
	ToRepositoryS3PtrOutputWithContext(context.Context) RepositoryS3PtrOutput
}

type repositoryS3PtrType RepositoryS3Args

func RepositoryS3Ptr(v *RepositoryS3Args) RepositoryS3PtrInput {
	return (*repositoryS3PtrType)(v)
}

func (*repositoryS3PtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RepositoryS3)(nil)).Elem()
}

func (i *repositoryS3PtrType) ToRepositoryS3PtrOutput() RepositoryS3PtrOutput {
	return i.ToRepositoryS3PtrOutputWithContext(context.Background())
}

func (i *repositoryS3PtrType) ToRepositoryS3PtrOutputWithContext(ctx context.Context) RepositoryS3PtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryS3PtrOutput)
}

type RepositoryS3Output struct{ *pulumi.OutputState }

func (RepositoryS3Output) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositoryS3)(nil)).Elem()
}

func (o RepositoryS3Output) ToRepositoryS3Output() RepositoryS3Output {
	return o
}

func (o RepositoryS3Output) ToRepositoryS3OutputWithContext(ctx context.Context) RepositoryS3Output {
	return o
}

func (o RepositoryS3Output) ToRepositoryS3PtrOutput() RepositoryS3PtrOutput {
	return o.ToRepositoryS3PtrOutputWithContext(context.Background())
}

func (o RepositoryS3Output) ToRepositoryS3PtrOutputWithContext(ctx context.Context) RepositoryS3PtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RepositoryS3) *RepositoryS3 {
		return &v
	}).(RepositoryS3PtrOutput)
}

func (o RepositoryS3Output) Bucket() pulumi.StringOutput {
	return o.ApplyT(func(v RepositoryS3) string { return v.Bucket }).(pulumi.StringOutput)
}

func (o RepositoryS3Output) Key() pulumi.StringOutput {
	return o.ApplyT(func(v RepositoryS3) string { return v.Key }).(pulumi.StringOutput)
}

func (o RepositoryS3Output) ObjectVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RepositoryS3) *string { return v.ObjectVersion }).(pulumi.StringPtrOutput)
}

type RepositoryS3PtrOutput struct{ *pulumi.OutputState }

func (RepositoryS3PtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RepositoryS3)(nil)).Elem()
}

func (o RepositoryS3PtrOutput) ToRepositoryS3PtrOutput() RepositoryS3PtrOutput {
	return o
}

func (o RepositoryS3PtrOutput) ToRepositoryS3PtrOutputWithContext(ctx context.Context) RepositoryS3PtrOutput {
	return o
}

func (o RepositoryS3PtrOutput) Elem() RepositoryS3Output {
	return o.ApplyT(func(v *RepositoryS3) RepositoryS3 {
		if v != nil {
			return *v
		}
		var ret RepositoryS3
		return ret
	}).(RepositoryS3Output)
}

func (o RepositoryS3PtrOutput) Bucket() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RepositoryS3) *string {
		if v == nil {
			return nil
		}
		return &v.Bucket
	}).(pulumi.StringPtrOutput)
}

func (o RepositoryS3PtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RepositoryS3) *string {
		if v == nil {
			return nil
		}
		return &v.Key
	}).(pulumi.StringPtrOutput)
}

func (o RepositoryS3PtrOutput) ObjectVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RepositoryS3) *string {
		if v == nil {
			return nil
		}
		return v.ObjectVersion
	}).(pulumi.StringPtrOutput)
}

type RepositoryTag struct {
	Key   string `pulumi:"key"`
	Value string `pulumi:"value"`
}

// RepositoryTagInput is an input type that accepts RepositoryTagArgs and RepositoryTagOutput values.
// You can construct a concrete instance of `RepositoryTagInput` via:
//
//          RepositoryTagArgs{...}
type RepositoryTagInput interface {
	pulumi.Input

	ToRepositoryTagOutput() RepositoryTagOutput
	ToRepositoryTagOutputWithContext(context.Context) RepositoryTagOutput
}

type RepositoryTagArgs struct {
	Key   pulumi.StringInput `pulumi:"key"`
	Value pulumi.StringInput `pulumi:"value"`
}

func (RepositoryTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositoryTag)(nil)).Elem()
}

func (i RepositoryTagArgs) ToRepositoryTagOutput() RepositoryTagOutput {
	return i.ToRepositoryTagOutputWithContext(context.Background())
}

func (i RepositoryTagArgs) ToRepositoryTagOutputWithContext(ctx context.Context) RepositoryTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryTagOutput)
}

// RepositoryTagArrayInput is an input type that accepts RepositoryTagArray and RepositoryTagArrayOutput values.
// You can construct a concrete instance of `RepositoryTagArrayInput` via:
//
//          RepositoryTagArray{ RepositoryTagArgs{...} }
type RepositoryTagArrayInput interface {
	pulumi.Input

	ToRepositoryTagArrayOutput() RepositoryTagArrayOutput
	ToRepositoryTagArrayOutputWithContext(context.Context) RepositoryTagArrayOutput
}

type RepositoryTagArray []RepositoryTagInput

func (RepositoryTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RepositoryTag)(nil)).Elem()
}

func (i RepositoryTagArray) ToRepositoryTagArrayOutput() RepositoryTagArrayOutput {
	return i.ToRepositoryTagArrayOutputWithContext(context.Background())
}

func (i RepositoryTagArray) ToRepositoryTagArrayOutputWithContext(ctx context.Context) RepositoryTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryTagArrayOutput)
}

type RepositoryTagOutput struct{ *pulumi.OutputState }

func (RepositoryTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositoryTag)(nil)).Elem()
}

func (o RepositoryTagOutput) ToRepositoryTagOutput() RepositoryTagOutput {
	return o
}

func (o RepositoryTagOutput) ToRepositoryTagOutputWithContext(ctx context.Context) RepositoryTagOutput {
	return o
}

func (o RepositoryTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v RepositoryTag) string { return v.Key }).(pulumi.StringOutput)
}

func (o RepositoryTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v RepositoryTag) string { return v.Value }).(pulumi.StringOutput)
}

type RepositoryTagArrayOutput struct{ *pulumi.OutputState }

func (RepositoryTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RepositoryTag)(nil)).Elem()
}

func (o RepositoryTagArrayOutput) ToRepositoryTagArrayOutput() RepositoryTagArrayOutput {
	return o
}

func (o RepositoryTagArrayOutput) ToRepositoryTagArrayOutputWithContext(ctx context.Context) RepositoryTagArrayOutput {
	return o
}

func (o RepositoryTagArrayOutput) Index(i pulumi.IntInput) RepositoryTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RepositoryTag {
		return vs[0].([]RepositoryTag)[vs[1].(int)]
	}).(RepositoryTagOutput)
}

func init() {
	pulumi.RegisterOutputType(RepositoryCodeOutput{})
	pulumi.RegisterOutputType(RepositoryCodePtrOutput{})
	pulumi.RegisterOutputType(RepositoryRepositoryTriggerOutput{})
	pulumi.RegisterOutputType(RepositoryRepositoryTriggerArrayOutput{})
	pulumi.RegisterOutputType(RepositoryS3Output{})
	pulumi.RegisterOutputType(RepositoryS3PtrOutput{})
	pulumi.RegisterOutputType(RepositoryTagOutput{})
	pulumi.RegisterOutputType(RepositoryTagArrayOutput{})
}
