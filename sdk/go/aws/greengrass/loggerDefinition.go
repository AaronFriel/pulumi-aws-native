// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package greengrass

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-greengrass-loggerdefinition.html
type LoggerDefinition struct {
	pulumi.CustomResourceState

	Arn pulumi.StringOutput `pulumi:"arn"`
	Id  pulumi.StringOutput `pulumi:"id"`
	// http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-greengrass-loggerdefinition.html#cfn-greengrass-loggerdefinition-initialversion
	InitialVersion   LoggerDefinitionLoggerDefinitionVersionPtrOutput `pulumi:"initialVersion"`
	LatestVersionArn pulumi.StringOutput                              `pulumi:"latestVersionArn"`
	Name             pulumi.StringOutput                              `pulumi:"name"`
	// http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-greengrass-loggerdefinition.html#cfn-greengrass-loggerdefinition-tags
	Tags pulumi.AnyOutput `pulumi:"tags"`
}

// NewLoggerDefinition registers a new resource with the given unique name, arguments, and options.
func NewLoggerDefinition(ctx *pulumi.Context,
	name string, args *LoggerDefinitionArgs, opts ...pulumi.ResourceOption) (*LoggerDefinition, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	var resource LoggerDefinition
	err := ctx.RegisterResource("aws-native:greengrass:LoggerDefinition", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLoggerDefinition gets an existing LoggerDefinition resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLoggerDefinition(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LoggerDefinitionState, opts ...pulumi.ResourceOption) (*LoggerDefinition, error) {
	var resource LoggerDefinition
	err := ctx.ReadResource("aws-native:greengrass:LoggerDefinition", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LoggerDefinition resources.
type loggerDefinitionState struct {
}

type LoggerDefinitionState struct {
}

func (LoggerDefinitionState) ElementType() reflect.Type {
	return reflect.TypeOf((*loggerDefinitionState)(nil)).Elem()
}

type loggerDefinitionArgs struct {
	// http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-greengrass-loggerdefinition.html#cfn-greengrass-loggerdefinition-initialversion
	InitialVersion *LoggerDefinitionLoggerDefinitionVersion `pulumi:"initialVersion"`
	// http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-greengrass-loggerdefinition.html#cfn-greengrass-loggerdefinition-name
	Name string `pulumi:"name"`
	// http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-greengrass-loggerdefinition.html#cfn-greengrass-loggerdefinition-tags
	Tags interface{} `pulumi:"tags"`
}

// The set of arguments for constructing a LoggerDefinition resource.
type LoggerDefinitionArgs struct {
	// http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-greengrass-loggerdefinition.html#cfn-greengrass-loggerdefinition-initialversion
	InitialVersion LoggerDefinitionLoggerDefinitionVersionPtrInput
	// http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-greengrass-loggerdefinition.html#cfn-greengrass-loggerdefinition-name
	Name pulumi.StringInput
	// http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-greengrass-loggerdefinition.html#cfn-greengrass-loggerdefinition-tags
	Tags pulumi.Input
}

func (LoggerDefinitionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*loggerDefinitionArgs)(nil)).Elem()
}

type LoggerDefinitionInput interface {
	pulumi.Input

	ToLoggerDefinitionOutput() LoggerDefinitionOutput
	ToLoggerDefinitionOutputWithContext(ctx context.Context) LoggerDefinitionOutput
}

func (*LoggerDefinition) ElementType() reflect.Type {
	return reflect.TypeOf((*LoggerDefinition)(nil))
}

func (i *LoggerDefinition) ToLoggerDefinitionOutput() LoggerDefinitionOutput {
	return i.ToLoggerDefinitionOutputWithContext(context.Background())
}

func (i *LoggerDefinition) ToLoggerDefinitionOutputWithContext(ctx context.Context) LoggerDefinitionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoggerDefinitionOutput)
}

type LoggerDefinitionOutput struct{ *pulumi.OutputState }

func (LoggerDefinitionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LoggerDefinition)(nil))
}

func (o LoggerDefinitionOutput) ToLoggerDefinitionOutput() LoggerDefinitionOutput {
	return o
}

func (o LoggerDefinitionOutput) ToLoggerDefinitionOutputWithContext(ctx context.Context) LoggerDefinitionOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(LoggerDefinitionOutput{})
}
