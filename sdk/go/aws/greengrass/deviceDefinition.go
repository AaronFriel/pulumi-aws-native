// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package greengrass

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-greengrass-devicedefinition.html
type DeviceDefinition struct {
	pulumi.CustomResourceState

	Arn pulumi.StringOutput `pulumi:"arn"`
	Id  pulumi.StringOutput `pulumi:"id"`
	// http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-greengrass-devicedefinition.html#cfn-greengrass-devicedefinition-initialversion
	InitialVersion   DeviceDefinitionDeviceDefinitionVersionPtrOutput `pulumi:"initialVersion"`
	LatestVersionArn pulumi.StringOutput                              `pulumi:"latestVersionArn"`
	Name             pulumi.StringOutput                              `pulumi:"name"`
	// http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-greengrass-devicedefinition.html#cfn-greengrass-devicedefinition-tags
	Tags pulumi.AnyOutput `pulumi:"tags"`
}

// NewDeviceDefinition registers a new resource with the given unique name, arguments, and options.
func NewDeviceDefinition(ctx *pulumi.Context,
	name string, args *DeviceDefinitionArgs, opts ...pulumi.ResourceOption) (*DeviceDefinition, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	var resource DeviceDefinition
	err := ctx.RegisterResource("aws-native:greengrass:DeviceDefinition", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDeviceDefinition gets an existing DeviceDefinition resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDeviceDefinition(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DeviceDefinitionState, opts ...pulumi.ResourceOption) (*DeviceDefinition, error) {
	var resource DeviceDefinition
	err := ctx.ReadResource("aws-native:greengrass:DeviceDefinition", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DeviceDefinition resources.
type deviceDefinitionState struct {
}

type DeviceDefinitionState struct {
}

func (DeviceDefinitionState) ElementType() reflect.Type {
	return reflect.TypeOf((*deviceDefinitionState)(nil)).Elem()
}

type deviceDefinitionArgs struct {
	// http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-greengrass-devicedefinition.html#cfn-greengrass-devicedefinition-initialversion
	InitialVersion *DeviceDefinitionDeviceDefinitionVersion `pulumi:"initialVersion"`
	// http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-greengrass-devicedefinition.html#cfn-greengrass-devicedefinition-name
	Name string `pulumi:"name"`
	// http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-greengrass-devicedefinition.html#cfn-greengrass-devicedefinition-tags
	Tags interface{} `pulumi:"tags"`
}

// The set of arguments for constructing a DeviceDefinition resource.
type DeviceDefinitionArgs struct {
	// http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-greengrass-devicedefinition.html#cfn-greengrass-devicedefinition-initialversion
	InitialVersion DeviceDefinitionDeviceDefinitionVersionPtrInput
	// http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-greengrass-devicedefinition.html#cfn-greengrass-devicedefinition-name
	Name pulumi.StringInput
	// http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-greengrass-devicedefinition.html#cfn-greengrass-devicedefinition-tags
	Tags pulumi.Input
}

func (DeviceDefinitionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*deviceDefinitionArgs)(nil)).Elem()
}

type DeviceDefinitionInput interface {
	pulumi.Input

	ToDeviceDefinitionOutput() DeviceDefinitionOutput
	ToDeviceDefinitionOutputWithContext(ctx context.Context) DeviceDefinitionOutput
}

func (*DeviceDefinition) ElementType() reflect.Type {
	return reflect.TypeOf((*DeviceDefinition)(nil))
}

func (i *DeviceDefinition) ToDeviceDefinitionOutput() DeviceDefinitionOutput {
	return i.ToDeviceDefinitionOutputWithContext(context.Background())
}

func (i *DeviceDefinition) ToDeviceDefinitionOutputWithContext(ctx context.Context) DeviceDefinitionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceDefinitionOutput)
}

type DeviceDefinitionOutput struct{ *pulumi.OutputState }

func (DeviceDefinitionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeviceDefinition)(nil))
}

func (o DeviceDefinitionOutput) ToDeviceDefinitionOutput() DeviceDefinitionOutput {
	return o
}

func (o DeviceDefinitionOutput) ToDeviceDefinitionOutputWithContext(ctx context.Context) DeviceDefinitionOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(DeviceDefinitionOutput{})
}
