// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package appsync

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-appsync-apicache.html
type ApiCache struct {
	pulumi.CustomResourceState

	// http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-appsync-apicache.html#cfn-appsync-apicache-apicachingbehavior
	ApiCachingBehavior pulumi.StringOutput `pulumi:"apiCachingBehavior"`
	// http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-appsync-apicache.html#cfn-appsync-apicache-apiid
	ApiId pulumi.StringOutput `pulumi:"apiId"`
	// http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-appsync-apicache.html#cfn-appsync-apicache-atrestencryptionenabled
	AtRestEncryptionEnabled pulumi.BoolPtrOutput `pulumi:"atRestEncryptionEnabled"`
	// http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-appsync-apicache.html#cfn-appsync-apicache-transitencryptionenabled
	TransitEncryptionEnabled pulumi.BoolPtrOutput `pulumi:"transitEncryptionEnabled"`
	// http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-appsync-apicache.html#cfn-appsync-apicache-ttl
	Ttl pulumi.Float64Output `pulumi:"ttl"`
	// http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-appsync-apicache.html#cfn-appsync-apicache-type
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewApiCache registers a new resource with the given unique name, arguments, and options.
func NewApiCache(ctx *pulumi.Context,
	name string, args *ApiCacheArgs, opts ...pulumi.ResourceOption) (*ApiCache, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ApiCachingBehavior == nil {
		return nil, errors.New("invalid value for required argument 'ApiCachingBehavior'")
	}
	if args.ApiId == nil {
		return nil, errors.New("invalid value for required argument 'ApiId'")
	}
	if args.Ttl == nil {
		return nil, errors.New("invalid value for required argument 'Ttl'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	var resource ApiCache
	err := ctx.RegisterResource("aws-native:appsync:ApiCache", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetApiCache gets an existing ApiCache resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetApiCache(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ApiCacheState, opts ...pulumi.ResourceOption) (*ApiCache, error) {
	var resource ApiCache
	err := ctx.ReadResource("aws-native:appsync:ApiCache", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ApiCache resources.
type apiCacheState struct {
}

type ApiCacheState struct {
}

func (ApiCacheState) ElementType() reflect.Type {
	return reflect.TypeOf((*apiCacheState)(nil)).Elem()
}

type apiCacheArgs struct {
	// http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-appsync-apicache.html#cfn-appsync-apicache-apicachingbehavior
	ApiCachingBehavior string `pulumi:"apiCachingBehavior"`
	// http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-appsync-apicache.html#cfn-appsync-apicache-apiid
	ApiId string `pulumi:"apiId"`
	// http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-appsync-apicache.html#cfn-appsync-apicache-atrestencryptionenabled
	AtRestEncryptionEnabled *bool `pulumi:"atRestEncryptionEnabled"`
	// http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-appsync-apicache.html#cfn-appsync-apicache-transitencryptionenabled
	TransitEncryptionEnabled *bool `pulumi:"transitEncryptionEnabled"`
	// http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-appsync-apicache.html#cfn-appsync-apicache-ttl
	Ttl float64 `pulumi:"ttl"`
	// http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-appsync-apicache.html#cfn-appsync-apicache-type
	Type string `pulumi:"type"`
}

// The set of arguments for constructing a ApiCache resource.
type ApiCacheArgs struct {
	// http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-appsync-apicache.html#cfn-appsync-apicache-apicachingbehavior
	ApiCachingBehavior pulumi.StringInput
	// http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-appsync-apicache.html#cfn-appsync-apicache-apiid
	ApiId pulumi.StringInput
	// http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-appsync-apicache.html#cfn-appsync-apicache-atrestencryptionenabled
	AtRestEncryptionEnabled pulumi.BoolPtrInput
	// http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-appsync-apicache.html#cfn-appsync-apicache-transitencryptionenabled
	TransitEncryptionEnabled pulumi.BoolPtrInput
	// http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-appsync-apicache.html#cfn-appsync-apicache-ttl
	Ttl pulumi.Float64Input
	// http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-appsync-apicache.html#cfn-appsync-apicache-type
	Type pulumi.StringInput
}

func (ApiCacheArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*apiCacheArgs)(nil)).Elem()
}

type ApiCacheInput interface {
	pulumi.Input

	ToApiCacheOutput() ApiCacheOutput
	ToApiCacheOutputWithContext(ctx context.Context) ApiCacheOutput
}

func (*ApiCache) ElementType() reflect.Type {
	return reflect.TypeOf((*ApiCache)(nil))
}

func (i *ApiCache) ToApiCacheOutput() ApiCacheOutput {
	return i.ToApiCacheOutputWithContext(context.Background())
}

func (i *ApiCache) ToApiCacheOutputWithContext(ctx context.Context) ApiCacheOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApiCacheOutput)
}

type ApiCacheOutput struct{ *pulumi.OutputState }

func (ApiCacheOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApiCache)(nil))
}

func (o ApiCacheOutput) ToApiCacheOutput() ApiCacheOutput {
	return o
}

func (o ApiCacheOutput) ToApiCacheOutputWithContext(ctx context.Context) ApiCacheOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(ApiCacheOutput{})
}
