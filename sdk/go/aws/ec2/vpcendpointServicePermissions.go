// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ec2

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-vpcendpointservicepermissions.html
type VPCEndpointServicePermissions struct {
	pulumi.CustomResourceState

	// http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-vpcendpointservicepermissions.html#cfn-ec2-vpcendpointservicepermissions-allowedprincipals
	AllowedPrincipals pulumi.StringArrayOutput `pulumi:"allowedPrincipals"`
	// http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-vpcendpointservicepermissions.html#cfn-ec2-vpcendpointservicepermissions-serviceid
	ServiceId pulumi.StringOutput `pulumi:"serviceId"`
}

// NewVPCEndpointServicePermissions registers a new resource with the given unique name, arguments, and options.
func NewVPCEndpointServicePermissions(ctx *pulumi.Context,
	name string, args *VPCEndpointServicePermissionsArgs, opts ...pulumi.ResourceOption) (*VPCEndpointServicePermissions, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ServiceId == nil {
		return nil, errors.New("invalid value for required argument 'ServiceId'")
	}
	var resource VPCEndpointServicePermissions
	err := ctx.RegisterResource("aws-native:ec2:VPCEndpointServicePermissions", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVPCEndpointServicePermissions gets an existing VPCEndpointServicePermissions resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVPCEndpointServicePermissions(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VPCEndpointServicePermissionsState, opts ...pulumi.ResourceOption) (*VPCEndpointServicePermissions, error) {
	var resource VPCEndpointServicePermissions
	err := ctx.ReadResource("aws-native:ec2:VPCEndpointServicePermissions", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VPCEndpointServicePermissions resources.
type vpcendpointServicePermissionsState struct {
}

type VPCEndpointServicePermissionsState struct {
}

func (VPCEndpointServicePermissionsState) ElementType() reflect.Type {
	return reflect.TypeOf((*vpcendpointServicePermissionsState)(nil)).Elem()
}

type vpcendpointServicePermissionsArgs struct {
	// http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-vpcendpointservicepermissions.html#cfn-ec2-vpcendpointservicepermissions-allowedprincipals
	AllowedPrincipals []string `pulumi:"allowedPrincipals"`
	// http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-vpcendpointservicepermissions.html#cfn-ec2-vpcendpointservicepermissions-serviceid
	ServiceId string `pulumi:"serviceId"`
}

// The set of arguments for constructing a VPCEndpointServicePermissions resource.
type VPCEndpointServicePermissionsArgs struct {
	// http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-vpcendpointservicepermissions.html#cfn-ec2-vpcendpointservicepermissions-allowedprincipals
	AllowedPrincipals pulumi.StringArrayInput
	// http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-vpcendpointservicepermissions.html#cfn-ec2-vpcendpointservicepermissions-serviceid
	ServiceId pulumi.StringInput
}

func (VPCEndpointServicePermissionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vpcendpointServicePermissionsArgs)(nil)).Elem()
}

type VPCEndpointServicePermissionsInput interface {
	pulumi.Input

	ToVPCEndpointServicePermissionsOutput() VPCEndpointServicePermissionsOutput
	ToVPCEndpointServicePermissionsOutputWithContext(ctx context.Context) VPCEndpointServicePermissionsOutput
}

func (*VPCEndpointServicePermissions) ElementType() reflect.Type {
	return reflect.TypeOf((*VPCEndpointServicePermissions)(nil))
}

func (i *VPCEndpointServicePermissions) ToVPCEndpointServicePermissionsOutput() VPCEndpointServicePermissionsOutput {
	return i.ToVPCEndpointServicePermissionsOutputWithContext(context.Background())
}

func (i *VPCEndpointServicePermissions) ToVPCEndpointServicePermissionsOutputWithContext(ctx context.Context) VPCEndpointServicePermissionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VPCEndpointServicePermissionsOutput)
}

type VPCEndpointServicePermissionsOutput struct{ *pulumi.OutputState }

func (VPCEndpointServicePermissionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VPCEndpointServicePermissions)(nil))
}

func (o VPCEndpointServicePermissionsOutput) ToVPCEndpointServicePermissionsOutput() VPCEndpointServicePermissionsOutput {
	return o
}

func (o VPCEndpointServicePermissionsOutput) ToVPCEndpointServicePermissionsOutputWithContext(ctx context.Context) VPCEndpointServicePermissionsOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(VPCEndpointServicePermissionsOutput{})
}
