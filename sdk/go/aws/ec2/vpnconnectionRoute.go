// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ec2

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-vpn-connection-route.html
type VPNConnectionRoute struct {
	pulumi.CustomResourceState

	// http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-vpn-connection-route.html#cfn-ec2-vpnconnectionroute-cidrblock
	DestinationCidrBlock pulumi.StringOutput `pulumi:"destinationCidrBlock"`
	// http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-vpn-connection-route.html#cfn-ec2-vpnconnectionroute-connectionid
	VpnConnectionId pulumi.StringOutput `pulumi:"vpnConnectionId"`
}

// NewVPNConnectionRoute registers a new resource with the given unique name, arguments, and options.
func NewVPNConnectionRoute(ctx *pulumi.Context,
	name string, args *VPNConnectionRouteArgs, opts ...pulumi.ResourceOption) (*VPNConnectionRoute, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DestinationCidrBlock == nil {
		return nil, errors.New("invalid value for required argument 'DestinationCidrBlock'")
	}
	if args.VpnConnectionId == nil {
		return nil, errors.New("invalid value for required argument 'VpnConnectionId'")
	}
	var resource VPNConnectionRoute
	err := ctx.RegisterResource("aws-native:ec2:VPNConnectionRoute", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVPNConnectionRoute gets an existing VPNConnectionRoute resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVPNConnectionRoute(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VPNConnectionRouteState, opts ...pulumi.ResourceOption) (*VPNConnectionRoute, error) {
	var resource VPNConnectionRoute
	err := ctx.ReadResource("aws-native:ec2:VPNConnectionRoute", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VPNConnectionRoute resources.
type vpnconnectionRouteState struct {
}

type VPNConnectionRouteState struct {
}

func (VPNConnectionRouteState) ElementType() reflect.Type {
	return reflect.TypeOf((*vpnconnectionRouteState)(nil)).Elem()
}

type vpnconnectionRouteArgs struct {
	// http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-vpn-connection-route.html#cfn-ec2-vpnconnectionroute-cidrblock
	DestinationCidrBlock string `pulumi:"destinationCidrBlock"`
	// http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-vpn-connection-route.html#cfn-ec2-vpnconnectionroute-connectionid
	VpnConnectionId string `pulumi:"vpnConnectionId"`
}

// The set of arguments for constructing a VPNConnectionRoute resource.
type VPNConnectionRouteArgs struct {
	// http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-vpn-connection-route.html#cfn-ec2-vpnconnectionroute-cidrblock
	DestinationCidrBlock pulumi.StringInput
	// http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-vpn-connection-route.html#cfn-ec2-vpnconnectionroute-connectionid
	VpnConnectionId pulumi.StringInput
}

func (VPNConnectionRouteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vpnconnectionRouteArgs)(nil)).Elem()
}

type VPNConnectionRouteInput interface {
	pulumi.Input

	ToVPNConnectionRouteOutput() VPNConnectionRouteOutput
	ToVPNConnectionRouteOutputWithContext(ctx context.Context) VPNConnectionRouteOutput
}

func (*VPNConnectionRoute) ElementType() reflect.Type {
	return reflect.TypeOf((*VPNConnectionRoute)(nil))
}

func (i *VPNConnectionRoute) ToVPNConnectionRouteOutput() VPNConnectionRouteOutput {
	return i.ToVPNConnectionRouteOutputWithContext(context.Background())
}

func (i *VPNConnectionRoute) ToVPNConnectionRouteOutputWithContext(ctx context.Context) VPNConnectionRouteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VPNConnectionRouteOutput)
}

type VPNConnectionRouteOutput struct{ *pulumi.OutputState }

func (VPNConnectionRouteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VPNConnectionRoute)(nil))
}

func (o VPNConnectionRouteOutput) ToVPNConnectionRouteOutput() VPNConnectionRouteOutput {
	return o
}

func (o VPNConnectionRouteOutput) ToVPNConnectionRouteOutputWithContext(ctx context.Context) VPNConnectionRouteOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(VPNConnectionRouteOutput{})
}
