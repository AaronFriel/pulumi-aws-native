// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package codebuild

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ProjectArtifacts struct {
	ArtifactIdentifier   *string `pulumi:"artifactIdentifier"`
	EncryptionDisabled   *bool   `pulumi:"encryptionDisabled"`
	Location             *string `pulumi:"location"`
	Name                 *string `pulumi:"name"`
	NamespaceType        *string `pulumi:"namespaceType"`
	OverrideArtifactName *bool   `pulumi:"overrideArtifactName"`
	Packaging            *string `pulumi:"packaging"`
	Path                 *string `pulumi:"path"`
	Type                 string  `pulumi:"type"`
}

// ProjectArtifactsInput is an input type that accepts ProjectArtifactsArgs and ProjectArtifactsOutput values.
// You can construct a concrete instance of `ProjectArtifactsInput` via:
//
//          ProjectArtifactsArgs{...}
type ProjectArtifactsInput interface {
	pulumi.Input

	ToProjectArtifactsOutput() ProjectArtifactsOutput
	ToProjectArtifactsOutputWithContext(context.Context) ProjectArtifactsOutput
}

type ProjectArtifactsArgs struct {
	ArtifactIdentifier   pulumi.StringPtrInput `pulumi:"artifactIdentifier"`
	EncryptionDisabled   pulumi.BoolPtrInput   `pulumi:"encryptionDisabled"`
	Location             pulumi.StringPtrInput `pulumi:"location"`
	Name                 pulumi.StringPtrInput `pulumi:"name"`
	NamespaceType        pulumi.StringPtrInput `pulumi:"namespaceType"`
	OverrideArtifactName pulumi.BoolPtrInput   `pulumi:"overrideArtifactName"`
	Packaging            pulumi.StringPtrInput `pulumi:"packaging"`
	Path                 pulumi.StringPtrInput `pulumi:"path"`
	Type                 pulumi.StringInput    `pulumi:"type"`
}

func (ProjectArtifactsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectArtifacts)(nil)).Elem()
}

func (i ProjectArtifactsArgs) ToProjectArtifactsOutput() ProjectArtifactsOutput {
	return i.ToProjectArtifactsOutputWithContext(context.Background())
}

func (i ProjectArtifactsArgs) ToProjectArtifactsOutputWithContext(ctx context.Context) ProjectArtifactsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectArtifactsOutput)
}

func (i ProjectArtifactsArgs) ToProjectArtifactsPtrOutput() ProjectArtifactsPtrOutput {
	return i.ToProjectArtifactsPtrOutputWithContext(context.Background())
}

func (i ProjectArtifactsArgs) ToProjectArtifactsPtrOutputWithContext(ctx context.Context) ProjectArtifactsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectArtifactsOutput).ToProjectArtifactsPtrOutputWithContext(ctx)
}

// ProjectArtifactsPtrInput is an input type that accepts ProjectArtifactsArgs, ProjectArtifactsPtr and ProjectArtifactsPtrOutput values.
// You can construct a concrete instance of `ProjectArtifactsPtrInput` via:
//
//          ProjectArtifactsArgs{...}
//
//  or:
//
//          nil
type ProjectArtifactsPtrInput interface {
	pulumi.Input

	ToProjectArtifactsPtrOutput() ProjectArtifactsPtrOutput
	ToProjectArtifactsPtrOutputWithContext(context.Context) ProjectArtifactsPtrOutput
}

type projectArtifactsPtrType ProjectArtifactsArgs

func ProjectArtifactsPtr(v *ProjectArtifactsArgs) ProjectArtifactsPtrInput {
	return (*projectArtifactsPtrType)(v)
}

func (*projectArtifactsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectArtifacts)(nil)).Elem()
}

func (i *projectArtifactsPtrType) ToProjectArtifactsPtrOutput() ProjectArtifactsPtrOutput {
	return i.ToProjectArtifactsPtrOutputWithContext(context.Background())
}

func (i *projectArtifactsPtrType) ToProjectArtifactsPtrOutputWithContext(ctx context.Context) ProjectArtifactsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectArtifactsPtrOutput)
}

// ProjectArtifactsArrayInput is an input type that accepts ProjectArtifactsArray and ProjectArtifactsArrayOutput values.
// You can construct a concrete instance of `ProjectArtifactsArrayInput` via:
//
//          ProjectArtifactsArray{ ProjectArtifactsArgs{...} }
type ProjectArtifactsArrayInput interface {
	pulumi.Input

	ToProjectArtifactsArrayOutput() ProjectArtifactsArrayOutput
	ToProjectArtifactsArrayOutputWithContext(context.Context) ProjectArtifactsArrayOutput
}

type ProjectArtifactsArray []ProjectArtifactsInput

func (ProjectArtifactsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectArtifacts)(nil)).Elem()
}

func (i ProjectArtifactsArray) ToProjectArtifactsArrayOutput() ProjectArtifactsArrayOutput {
	return i.ToProjectArtifactsArrayOutputWithContext(context.Background())
}

func (i ProjectArtifactsArray) ToProjectArtifactsArrayOutputWithContext(ctx context.Context) ProjectArtifactsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectArtifactsArrayOutput)
}

type ProjectArtifactsOutput struct{ *pulumi.OutputState }

func (ProjectArtifactsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectArtifacts)(nil)).Elem()
}

func (o ProjectArtifactsOutput) ToProjectArtifactsOutput() ProjectArtifactsOutput {
	return o
}

func (o ProjectArtifactsOutput) ToProjectArtifactsOutputWithContext(ctx context.Context) ProjectArtifactsOutput {
	return o
}

func (o ProjectArtifactsOutput) ToProjectArtifactsPtrOutput() ProjectArtifactsPtrOutput {
	return o.ToProjectArtifactsPtrOutputWithContext(context.Background())
}

func (o ProjectArtifactsOutput) ToProjectArtifactsPtrOutputWithContext(ctx context.Context) ProjectArtifactsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ProjectArtifacts) *ProjectArtifacts {
		return &v
	}).(ProjectArtifactsPtrOutput)
}

func (o ProjectArtifactsOutput) ArtifactIdentifier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectArtifacts) *string { return v.ArtifactIdentifier }).(pulumi.StringPtrOutput)
}

func (o ProjectArtifactsOutput) EncryptionDisabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ProjectArtifacts) *bool { return v.EncryptionDisabled }).(pulumi.BoolPtrOutput)
}

func (o ProjectArtifactsOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectArtifacts) *string { return v.Location }).(pulumi.StringPtrOutput)
}

func (o ProjectArtifactsOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectArtifacts) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o ProjectArtifactsOutput) NamespaceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectArtifacts) *string { return v.NamespaceType }).(pulumi.StringPtrOutput)
}

func (o ProjectArtifactsOutput) OverrideArtifactName() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ProjectArtifacts) *bool { return v.OverrideArtifactName }).(pulumi.BoolPtrOutput)
}

func (o ProjectArtifactsOutput) Packaging() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectArtifacts) *string { return v.Packaging }).(pulumi.StringPtrOutput)
}

func (o ProjectArtifactsOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectArtifacts) *string { return v.Path }).(pulumi.StringPtrOutput)
}

func (o ProjectArtifactsOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectArtifacts) string { return v.Type }).(pulumi.StringOutput)
}

type ProjectArtifactsPtrOutput struct{ *pulumi.OutputState }

func (ProjectArtifactsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectArtifacts)(nil)).Elem()
}

func (o ProjectArtifactsPtrOutput) ToProjectArtifactsPtrOutput() ProjectArtifactsPtrOutput {
	return o
}

func (o ProjectArtifactsPtrOutput) ToProjectArtifactsPtrOutputWithContext(ctx context.Context) ProjectArtifactsPtrOutput {
	return o
}

func (o ProjectArtifactsPtrOutput) Elem() ProjectArtifactsOutput {
	return o.ApplyT(func(v *ProjectArtifacts) ProjectArtifacts {
		if v != nil {
			return *v
		}
		var ret ProjectArtifacts
		return ret
	}).(ProjectArtifactsOutput)
}

func (o ProjectArtifactsPtrOutput) ArtifactIdentifier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectArtifacts) *string {
		if v == nil {
			return nil
		}
		return v.ArtifactIdentifier
	}).(pulumi.StringPtrOutput)
}

func (o ProjectArtifactsPtrOutput) EncryptionDisabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ProjectArtifacts) *bool {
		if v == nil {
			return nil
		}
		return v.EncryptionDisabled
	}).(pulumi.BoolPtrOutput)
}

func (o ProjectArtifactsPtrOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectArtifacts) *string {
		if v == nil {
			return nil
		}
		return v.Location
	}).(pulumi.StringPtrOutput)
}

func (o ProjectArtifactsPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectArtifacts) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

func (o ProjectArtifactsPtrOutput) NamespaceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectArtifacts) *string {
		if v == nil {
			return nil
		}
		return v.NamespaceType
	}).(pulumi.StringPtrOutput)
}

func (o ProjectArtifactsPtrOutput) OverrideArtifactName() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ProjectArtifacts) *bool {
		if v == nil {
			return nil
		}
		return v.OverrideArtifactName
	}).(pulumi.BoolPtrOutput)
}

func (o ProjectArtifactsPtrOutput) Packaging() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectArtifacts) *string {
		if v == nil {
			return nil
		}
		return v.Packaging
	}).(pulumi.StringPtrOutput)
}

func (o ProjectArtifactsPtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectArtifacts) *string {
		if v == nil {
			return nil
		}
		return v.Path
	}).(pulumi.StringPtrOutput)
}

func (o ProjectArtifactsPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectArtifacts) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

type ProjectArtifactsArrayOutput struct{ *pulumi.OutputState }

func (ProjectArtifactsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectArtifacts)(nil)).Elem()
}

func (o ProjectArtifactsArrayOutput) ToProjectArtifactsArrayOutput() ProjectArtifactsArrayOutput {
	return o
}

func (o ProjectArtifactsArrayOutput) ToProjectArtifactsArrayOutputWithContext(ctx context.Context) ProjectArtifactsArrayOutput {
	return o
}

func (o ProjectArtifactsArrayOutput) Index(i pulumi.IntInput) ProjectArtifactsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ProjectArtifacts {
		return vs[0].([]ProjectArtifacts)[vs[1].(int)]
	}).(ProjectArtifactsOutput)
}

type ProjectBatchRestrictions struct {
	ComputeTypesAllowed  []string `pulumi:"computeTypesAllowed"`
	MaximumBuildsAllowed *int     `pulumi:"maximumBuildsAllowed"`
}

// ProjectBatchRestrictionsInput is an input type that accepts ProjectBatchRestrictionsArgs and ProjectBatchRestrictionsOutput values.
// You can construct a concrete instance of `ProjectBatchRestrictionsInput` via:
//
//          ProjectBatchRestrictionsArgs{...}
type ProjectBatchRestrictionsInput interface {
	pulumi.Input

	ToProjectBatchRestrictionsOutput() ProjectBatchRestrictionsOutput
	ToProjectBatchRestrictionsOutputWithContext(context.Context) ProjectBatchRestrictionsOutput
}

type ProjectBatchRestrictionsArgs struct {
	ComputeTypesAllowed  pulumi.StringArrayInput `pulumi:"computeTypesAllowed"`
	MaximumBuildsAllowed pulumi.IntPtrInput      `pulumi:"maximumBuildsAllowed"`
}

func (ProjectBatchRestrictionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectBatchRestrictions)(nil)).Elem()
}

func (i ProjectBatchRestrictionsArgs) ToProjectBatchRestrictionsOutput() ProjectBatchRestrictionsOutput {
	return i.ToProjectBatchRestrictionsOutputWithContext(context.Background())
}

func (i ProjectBatchRestrictionsArgs) ToProjectBatchRestrictionsOutputWithContext(ctx context.Context) ProjectBatchRestrictionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectBatchRestrictionsOutput)
}

func (i ProjectBatchRestrictionsArgs) ToProjectBatchRestrictionsPtrOutput() ProjectBatchRestrictionsPtrOutput {
	return i.ToProjectBatchRestrictionsPtrOutputWithContext(context.Background())
}

func (i ProjectBatchRestrictionsArgs) ToProjectBatchRestrictionsPtrOutputWithContext(ctx context.Context) ProjectBatchRestrictionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectBatchRestrictionsOutput).ToProjectBatchRestrictionsPtrOutputWithContext(ctx)
}

// ProjectBatchRestrictionsPtrInput is an input type that accepts ProjectBatchRestrictionsArgs, ProjectBatchRestrictionsPtr and ProjectBatchRestrictionsPtrOutput values.
// You can construct a concrete instance of `ProjectBatchRestrictionsPtrInput` via:
//
//          ProjectBatchRestrictionsArgs{...}
//
//  or:
//
//          nil
type ProjectBatchRestrictionsPtrInput interface {
	pulumi.Input

	ToProjectBatchRestrictionsPtrOutput() ProjectBatchRestrictionsPtrOutput
	ToProjectBatchRestrictionsPtrOutputWithContext(context.Context) ProjectBatchRestrictionsPtrOutput
}

type projectBatchRestrictionsPtrType ProjectBatchRestrictionsArgs

func ProjectBatchRestrictionsPtr(v *ProjectBatchRestrictionsArgs) ProjectBatchRestrictionsPtrInput {
	return (*projectBatchRestrictionsPtrType)(v)
}

func (*projectBatchRestrictionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectBatchRestrictions)(nil)).Elem()
}

func (i *projectBatchRestrictionsPtrType) ToProjectBatchRestrictionsPtrOutput() ProjectBatchRestrictionsPtrOutput {
	return i.ToProjectBatchRestrictionsPtrOutputWithContext(context.Background())
}

func (i *projectBatchRestrictionsPtrType) ToProjectBatchRestrictionsPtrOutputWithContext(ctx context.Context) ProjectBatchRestrictionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectBatchRestrictionsPtrOutput)
}

type ProjectBatchRestrictionsOutput struct{ *pulumi.OutputState }

func (ProjectBatchRestrictionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectBatchRestrictions)(nil)).Elem()
}

func (o ProjectBatchRestrictionsOutput) ToProjectBatchRestrictionsOutput() ProjectBatchRestrictionsOutput {
	return o
}

func (o ProjectBatchRestrictionsOutput) ToProjectBatchRestrictionsOutputWithContext(ctx context.Context) ProjectBatchRestrictionsOutput {
	return o
}

func (o ProjectBatchRestrictionsOutput) ToProjectBatchRestrictionsPtrOutput() ProjectBatchRestrictionsPtrOutput {
	return o.ToProjectBatchRestrictionsPtrOutputWithContext(context.Background())
}

func (o ProjectBatchRestrictionsOutput) ToProjectBatchRestrictionsPtrOutputWithContext(ctx context.Context) ProjectBatchRestrictionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ProjectBatchRestrictions) *ProjectBatchRestrictions {
		return &v
	}).(ProjectBatchRestrictionsPtrOutput)
}

func (o ProjectBatchRestrictionsOutput) ComputeTypesAllowed() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ProjectBatchRestrictions) []string { return v.ComputeTypesAllowed }).(pulumi.StringArrayOutput)
}

func (o ProjectBatchRestrictionsOutput) MaximumBuildsAllowed() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ProjectBatchRestrictions) *int { return v.MaximumBuildsAllowed }).(pulumi.IntPtrOutput)
}

type ProjectBatchRestrictionsPtrOutput struct{ *pulumi.OutputState }

func (ProjectBatchRestrictionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectBatchRestrictions)(nil)).Elem()
}

func (o ProjectBatchRestrictionsPtrOutput) ToProjectBatchRestrictionsPtrOutput() ProjectBatchRestrictionsPtrOutput {
	return o
}

func (o ProjectBatchRestrictionsPtrOutput) ToProjectBatchRestrictionsPtrOutputWithContext(ctx context.Context) ProjectBatchRestrictionsPtrOutput {
	return o
}

func (o ProjectBatchRestrictionsPtrOutput) Elem() ProjectBatchRestrictionsOutput {
	return o.ApplyT(func(v *ProjectBatchRestrictions) ProjectBatchRestrictions {
		if v != nil {
			return *v
		}
		var ret ProjectBatchRestrictions
		return ret
	}).(ProjectBatchRestrictionsOutput)
}

func (o ProjectBatchRestrictionsPtrOutput) ComputeTypesAllowed() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ProjectBatchRestrictions) []string {
		if v == nil {
			return nil
		}
		return v.ComputeTypesAllowed
	}).(pulumi.StringArrayOutput)
}

func (o ProjectBatchRestrictionsPtrOutput) MaximumBuildsAllowed() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ProjectBatchRestrictions) *int {
		if v == nil {
			return nil
		}
		return v.MaximumBuildsAllowed
	}).(pulumi.IntPtrOutput)
}

type ProjectBuildStatusConfig struct {
	Context   *string `pulumi:"context"`
	TargetUrl *string `pulumi:"targetUrl"`
}

// ProjectBuildStatusConfigInput is an input type that accepts ProjectBuildStatusConfigArgs and ProjectBuildStatusConfigOutput values.
// You can construct a concrete instance of `ProjectBuildStatusConfigInput` via:
//
//          ProjectBuildStatusConfigArgs{...}
type ProjectBuildStatusConfigInput interface {
	pulumi.Input

	ToProjectBuildStatusConfigOutput() ProjectBuildStatusConfigOutput
	ToProjectBuildStatusConfigOutputWithContext(context.Context) ProjectBuildStatusConfigOutput
}

type ProjectBuildStatusConfigArgs struct {
	Context   pulumi.StringPtrInput `pulumi:"context"`
	TargetUrl pulumi.StringPtrInput `pulumi:"targetUrl"`
}

func (ProjectBuildStatusConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectBuildStatusConfig)(nil)).Elem()
}

func (i ProjectBuildStatusConfigArgs) ToProjectBuildStatusConfigOutput() ProjectBuildStatusConfigOutput {
	return i.ToProjectBuildStatusConfigOutputWithContext(context.Background())
}

func (i ProjectBuildStatusConfigArgs) ToProjectBuildStatusConfigOutputWithContext(ctx context.Context) ProjectBuildStatusConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectBuildStatusConfigOutput)
}

func (i ProjectBuildStatusConfigArgs) ToProjectBuildStatusConfigPtrOutput() ProjectBuildStatusConfigPtrOutput {
	return i.ToProjectBuildStatusConfigPtrOutputWithContext(context.Background())
}

func (i ProjectBuildStatusConfigArgs) ToProjectBuildStatusConfigPtrOutputWithContext(ctx context.Context) ProjectBuildStatusConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectBuildStatusConfigOutput).ToProjectBuildStatusConfigPtrOutputWithContext(ctx)
}

// ProjectBuildStatusConfigPtrInput is an input type that accepts ProjectBuildStatusConfigArgs, ProjectBuildStatusConfigPtr and ProjectBuildStatusConfigPtrOutput values.
// You can construct a concrete instance of `ProjectBuildStatusConfigPtrInput` via:
//
//          ProjectBuildStatusConfigArgs{...}
//
//  or:
//
//          nil
type ProjectBuildStatusConfigPtrInput interface {
	pulumi.Input

	ToProjectBuildStatusConfigPtrOutput() ProjectBuildStatusConfigPtrOutput
	ToProjectBuildStatusConfigPtrOutputWithContext(context.Context) ProjectBuildStatusConfigPtrOutput
}

type projectBuildStatusConfigPtrType ProjectBuildStatusConfigArgs

func ProjectBuildStatusConfigPtr(v *ProjectBuildStatusConfigArgs) ProjectBuildStatusConfigPtrInput {
	return (*projectBuildStatusConfigPtrType)(v)
}

func (*projectBuildStatusConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectBuildStatusConfig)(nil)).Elem()
}

func (i *projectBuildStatusConfigPtrType) ToProjectBuildStatusConfigPtrOutput() ProjectBuildStatusConfigPtrOutput {
	return i.ToProjectBuildStatusConfigPtrOutputWithContext(context.Background())
}

func (i *projectBuildStatusConfigPtrType) ToProjectBuildStatusConfigPtrOutputWithContext(ctx context.Context) ProjectBuildStatusConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectBuildStatusConfigPtrOutput)
}

type ProjectBuildStatusConfigOutput struct{ *pulumi.OutputState }

func (ProjectBuildStatusConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectBuildStatusConfig)(nil)).Elem()
}

func (o ProjectBuildStatusConfigOutput) ToProjectBuildStatusConfigOutput() ProjectBuildStatusConfigOutput {
	return o
}

func (o ProjectBuildStatusConfigOutput) ToProjectBuildStatusConfigOutputWithContext(ctx context.Context) ProjectBuildStatusConfigOutput {
	return o
}

func (o ProjectBuildStatusConfigOutput) ToProjectBuildStatusConfigPtrOutput() ProjectBuildStatusConfigPtrOutput {
	return o.ToProjectBuildStatusConfigPtrOutputWithContext(context.Background())
}

func (o ProjectBuildStatusConfigOutput) ToProjectBuildStatusConfigPtrOutputWithContext(ctx context.Context) ProjectBuildStatusConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ProjectBuildStatusConfig) *ProjectBuildStatusConfig {
		return &v
	}).(ProjectBuildStatusConfigPtrOutput)
}

func (o ProjectBuildStatusConfigOutput) Context() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectBuildStatusConfig) *string { return v.Context }).(pulumi.StringPtrOutput)
}

func (o ProjectBuildStatusConfigOutput) TargetUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectBuildStatusConfig) *string { return v.TargetUrl }).(pulumi.StringPtrOutput)
}

type ProjectBuildStatusConfigPtrOutput struct{ *pulumi.OutputState }

func (ProjectBuildStatusConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectBuildStatusConfig)(nil)).Elem()
}

func (o ProjectBuildStatusConfigPtrOutput) ToProjectBuildStatusConfigPtrOutput() ProjectBuildStatusConfigPtrOutput {
	return o
}

func (o ProjectBuildStatusConfigPtrOutput) ToProjectBuildStatusConfigPtrOutputWithContext(ctx context.Context) ProjectBuildStatusConfigPtrOutput {
	return o
}

func (o ProjectBuildStatusConfigPtrOutput) Elem() ProjectBuildStatusConfigOutput {
	return o.ApplyT(func(v *ProjectBuildStatusConfig) ProjectBuildStatusConfig {
		if v != nil {
			return *v
		}
		var ret ProjectBuildStatusConfig
		return ret
	}).(ProjectBuildStatusConfigOutput)
}

func (o ProjectBuildStatusConfigPtrOutput) Context() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectBuildStatusConfig) *string {
		if v == nil {
			return nil
		}
		return v.Context
	}).(pulumi.StringPtrOutput)
}

func (o ProjectBuildStatusConfigPtrOutput) TargetUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectBuildStatusConfig) *string {
		if v == nil {
			return nil
		}
		return v.TargetUrl
	}).(pulumi.StringPtrOutput)
}

type ProjectCloudWatchLogsConfig struct {
	GroupName  *string `pulumi:"groupName"`
	Status     string  `pulumi:"status"`
	StreamName *string `pulumi:"streamName"`
}

// ProjectCloudWatchLogsConfigInput is an input type that accepts ProjectCloudWatchLogsConfigArgs and ProjectCloudWatchLogsConfigOutput values.
// You can construct a concrete instance of `ProjectCloudWatchLogsConfigInput` via:
//
//          ProjectCloudWatchLogsConfigArgs{...}
type ProjectCloudWatchLogsConfigInput interface {
	pulumi.Input

	ToProjectCloudWatchLogsConfigOutput() ProjectCloudWatchLogsConfigOutput
	ToProjectCloudWatchLogsConfigOutputWithContext(context.Context) ProjectCloudWatchLogsConfigOutput
}

type ProjectCloudWatchLogsConfigArgs struct {
	GroupName  pulumi.StringPtrInput `pulumi:"groupName"`
	Status     pulumi.StringInput    `pulumi:"status"`
	StreamName pulumi.StringPtrInput `pulumi:"streamName"`
}

func (ProjectCloudWatchLogsConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectCloudWatchLogsConfig)(nil)).Elem()
}

func (i ProjectCloudWatchLogsConfigArgs) ToProjectCloudWatchLogsConfigOutput() ProjectCloudWatchLogsConfigOutput {
	return i.ToProjectCloudWatchLogsConfigOutputWithContext(context.Background())
}

func (i ProjectCloudWatchLogsConfigArgs) ToProjectCloudWatchLogsConfigOutputWithContext(ctx context.Context) ProjectCloudWatchLogsConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectCloudWatchLogsConfigOutput)
}

func (i ProjectCloudWatchLogsConfigArgs) ToProjectCloudWatchLogsConfigPtrOutput() ProjectCloudWatchLogsConfigPtrOutput {
	return i.ToProjectCloudWatchLogsConfigPtrOutputWithContext(context.Background())
}

func (i ProjectCloudWatchLogsConfigArgs) ToProjectCloudWatchLogsConfigPtrOutputWithContext(ctx context.Context) ProjectCloudWatchLogsConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectCloudWatchLogsConfigOutput).ToProjectCloudWatchLogsConfigPtrOutputWithContext(ctx)
}

// ProjectCloudWatchLogsConfigPtrInput is an input type that accepts ProjectCloudWatchLogsConfigArgs, ProjectCloudWatchLogsConfigPtr and ProjectCloudWatchLogsConfigPtrOutput values.
// You can construct a concrete instance of `ProjectCloudWatchLogsConfigPtrInput` via:
//
//          ProjectCloudWatchLogsConfigArgs{...}
//
//  or:
//
//          nil
type ProjectCloudWatchLogsConfigPtrInput interface {
	pulumi.Input

	ToProjectCloudWatchLogsConfigPtrOutput() ProjectCloudWatchLogsConfigPtrOutput
	ToProjectCloudWatchLogsConfigPtrOutputWithContext(context.Context) ProjectCloudWatchLogsConfigPtrOutput
}

type projectCloudWatchLogsConfigPtrType ProjectCloudWatchLogsConfigArgs

func ProjectCloudWatchLogsConfigPtr(v *ProjectCloudWatchLogsConfigArgs) ProjectCloudWatchLogsConfigPtrInput {
	return (*projectCloudWatchLogsConfigPtrType)(v)
}

func (*projectCloudWatchLogsConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectCloudWatchLogsConfig)(nil)).Elem()
}

func (i *projectCloudWatchLogsConfigPtrType) ToProjectCloudWatchLogsConfigPtrOutput() ProjectCloudWatchLogsConfigPtrOutput {
	return i.ToProjectCloudWatchLogsConfigPtrOutputWithContext(context.Background())
}

func (i *projectCloudWatchLogsConfigPtrType) ToProjectCloudWatchLogsConfigPtrOutputWithContext(ctx context.Context) ProjectCloudWatchLogsConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectCloudWatchLogsConfigPtrOutput)
}

type ProjectCloudWatchLogsConfigOutput struct{ *pulumi.OutputState }

func (ProjectCloudWatchLogsConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectCloudWatchLogsConfig)(nil)).Elem()
}

func (o ProjectCloudWatchLogsConfigOutput) ToProjectCloudWatchLogsConfigOutput() ProjectCloudWatchLogsConfigOutput {
	return o
}

func (o ProjectCloudWatchLogsConfigOutput) ToProjectCloudWatchLogsConfigOutputWithContext(ctx context.Context) ProjectCloudWatchLogsConfigOutput {
	return o
}

func (o ProjectCloudWatchLogsConfigOutput) ToProjectCloudWatchLogsConfigPtrOutput() ProjectCloudWatchLogsConfigPtrOutput {
	return o.ToProjectCloudWatchLogsConfigPtrOutputWithContext(context.Background())
}

func (o ProjectCloudWatchLogsConfigOutput) ToProjectCloudWatchLogsConfigPtrOutputWithContext(ctx context.Context) ProjectCloudWatchLogsConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ProjectCloudWatchLogsConfig) *ProjectCloudWatchLogsConfig {
		return &v
	}).(ProjectCloudWatchLogsConfigPtrOutput)
}

func (o ProjectCloudWatchLogsConfigOutput) GroupName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectCloudWatchLogsConfig) *string { return v.GroupName }).(pulumi.StringPtrOutput)
}

func (o ProjectCloudWatchLogsConfigOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectCloudWatchLogsConfig) string { return v.Status }).(pulumi.StringOutput)
}

func (o ProjectCloudWatchLogsConfigOutput) StreamName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectCloudWatchLogsConfig) *string { return v.StreamName }).(pulumi.StringPtrOutput)
}

type ProjectCloudWatchLogsConfigPtrOutput struct{ *pulumi.OutputState }

func (ProjectCloudWatchLogsConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectCloudWatchLogsConfig)(nil)).Elem()
}

func (o ProjectCloudWatchLogsConfigPtrOutput) ToProjectCloudWatchLogsConfigPtrOutput() ProjectCloudWatchLogsConfigPtrOutput {
	return o
}

func (o ProjectCloudWatchLogsConfigPtrOutput) ToProjectCloudWatchLogsConfigPtrOutputWithContext(ctx context.Context) ProjectCloudWatchLogsConfigPtrOutput {
	return o
}

func (o ProjectCloudWatchLogsConfigPtrOutput) Elem() ProjectCloudWatchLogsConfigOutput {
	return o.ApplyT(func(v *ProjectCloudWatchLogsConfig) ProjectCloudWatchLogsConfig {
		if v != nil {
			return *v
		}
		var ret ProjectCloudWatchLogsConfig
		return ret
	}).(ProjectCloudWatchLogsConfigOutput)
}

func (o ProjectCloudWatchLogsConfigPtrOutput) GroupName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectCloudWatchLogsConfig) *string {
		if v == nil {
			return nil
		}
		return v.GroupName
	}).(pulumi.StringPtrOutput)
}

func (o ProjectCloudWatchLogsConfigPtrOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectCloudWatchLogsConfig) *string {
		if v == nil {
			return nil
		}
		return &v.Status
	}).(pulumi.StringPtrOutput)
}

func (o ProjectCloudWatchLogsConfigPtrOutput) StreamName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectCloudWatchLogsConfig) *string {
		if v == nil {
			return nil
		}
		return v.StreamName
	}).(pulumi.StringPtrOutput)
}

type ProjectEnvironment struct {
	Certificate              *string                      `pulumi:"certificate"`
	ComputeType              string                       `pulumi:"computeType"`
	EnvironmentVariables     []ProjectEnvironmentVariable `pulumi:"environmentVariables"`
	Image                    string                       `pulumi:"image"`
	ImagePullCredentialsType *string                      `pulumi:"imagePullCredentialsType"`
	PrivilegedMode           *bool                        `pulumi:"privilegedMode"`
	RegistryCredential       *ProjectRegistryCredential   `pulumi:"registryCredential"`
	Type                     string                       `pulumi:"type"`
}

// ProjectEnvironmentInput is an input type that accepts ProjectEnvironmentArgs and ProjectEnvironmentOutput values.
// You can construct a concrete instance of `ProjectEnvironmentInput` via:
//
//          ProjectEnvironmentArgs{...}
type ProjectEnvironmentInput interface {
	pulumi.Input

	ToProjectEnvironmentOutput() ProjectEnvironmentOutput
	ToProjectEnvironmentOutputWithContext(context.Context) ProjectEnvironmentOutput
}

type ProjectEnvironmentArgs struct {
	Certificate              pulumi.StringPtrInput                `pulumi:"certificate"`
	ComputeType              pulumi.StringInput                   `pulumi:"computeType"`
	EnvironmentVariables     ProjectEnvironmentVariableArrayInput `pulumi:"environmentVariables"`
	Image                    pulumi.StringInput                   `pulumi:"image"`
	ImagePullCredentialsType pulumi.StringPtrInput                `pulumi:"imagePullCredentialsType"`
	PrivilegedMode           pulumi.BoolPtrInput                  `pulumi:"privilegedMode"`
	RegistryCredential       ProjectRegistryCredentialPtrInput    `pulumi:"registryCredential"`
	Type                     pulumi.StringInput                   `pulumi:"type"`
}

func (ProjectEnvironmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectEnvironment)(nil)).Elem()
}

func (i ProjectEnvironmentArgs) ToProjectEnvironmentOutput() ProjectEnvironmentOutput {
	return i.ToProjectEnvironmentOutputWithContext(context.Background())
}

func (i ProjectEnvironmentArgs) ToProjectEnvironmentOutputWithContext(ctx context.Context) ProjectEnvironmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectEnvironmentOutput)
}

func (i ProjectEnvironmentArgs) ToProjectEnvironmentPtrOutput() ProjectEnvironmentPtrOutput {
	return i.ToProjectEnvironmentPtrOutputWithContext(context.Background())
}

func (i ProjectEnvironmentArgs) ToProjectEnvironmentPtrOutputWithContext(ctx context.Context) ProjectEnvironmentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectEnvironmentOutput).ToProjectEnvironmentPtrOutputWithContext(ctx)
}

// ProjectEnvironmentPtrInput is an input type that accepts ProjectEnvironmentArgs, ProjectEnvironmentPtr and ProjectEnvironmentPtrOutput values.
// You can construct a concrete instance of `ProjectEnvironmentPtrInput` via:
//
//          ProjectEnvironmentArgs{...}
//
//  or:
//
//          nil
type ProjectEnvironmentPtrInput interface {
	pulumi.Input

	ToProjectEnvironmentPtrOutput() ProjectEnvironmentPtrOutput
	ToProjectEnvironmentPtrOutputWithContext(context.Context) ProjectEnvironmentPtrOutput
}

type projectEnvironmentPtrType ProjectEnvironmentArgs

func ProjectEnvironmentPtr(v *ProjectEnvironmentArgs) ProjectEnvironmentPtrInput {
	return (*projectEnvironmentPtrType)(v)
}

func (*projectEnvironmentPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectEnvironment)(nil)).Elem()
}

func (i *projectEnvironmentPtrType) ToProjectEnvironmentPtrOutput() ProjectEnvironmentPtrOutput {
	return i.ToProjectEnvironmentPtrOutputWithContext(context.Background())
}

func (i *projectEnvironmentPtrType) ToProjectEnvironmentPtrOutputWithContext(ctx context.Context) ProjectEnvironmentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectEnvironmentPtrOutput)
}

type ProjectEnvironmentOutput struct{ *pulumi.OutputState }

func (ProjectEnvironmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectEnvironment)(nil)).Elem()
}

func (o ProjectEnvironmentOutput) ToProjectEnvironmentOutput() ProjectEnvironmentOutput {
	return o
}

func (o ProjectEnvironmentOutput) ToProjectEnvironmentOutputWithContext(ctx context.Context) ProjectEnvironmentOutput {
	return o
}

func (o ProjectEnvironmentOutput) ToProjectEnvironmentPtrOutput() ProjectEnvironmentPtrOutput {
	return o.ToProjectEnvironmentPtrOutputWithContext(context.Background())
}

func (o ProjectEnvironmentOutput) ToProjectEnvironmentPtrOutputWithContext(ctx context.Context) ProjectEnvironmentPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ProjectEnvironment) *ProjectEnvironment {
		return &v
	}).(ProjectEnvironmentPtrOutput)
}

func (o ProjectEnvironmentOutput) Certificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectEnvironment) *string { return v.Certificate }).(pulumi.StringPtrOutput)
}

func (o ProjectEnvironmentOutput) ComputeType() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectEnvironment) string { return v.ComputeType }).(pulumi.StringOutput)
}

func (o ProjectEnvironmentOutput) EnvironmentVariables() ProjectEnvironmentVariableArrayOutput {
	return o.ApplyT(func(v ProjectEnvironment) []ProjectEnvironmentVariable { return v.EnvironmentVariables }).(ProjectEnvironmentVariableArrayOutput)
}

func (o ProjectEnvironmentOutput) Image() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectEnvironment) string { return v.Image }).(pulumi.StringOutput)
}

func (o ProjectEnvironmentOutput) ImagePullCredentialsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectEnvironment) *string { return v.ImagePullCredentialsType }).(pulumi.StringPtrOutput)
}

func (o ProjectEnvironmentOutput) PrivilegedMode() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ProjectEnvironment) *bool { return v.PrivilegedMode }).(pulumi.BoolPtrOutput)
}

func (o ProjectEnvironmentOutput) RegistryCredential() ProjectRegistryCredentialPtrOutput {
	return o.ApplyT(func(v ProjectEnvironment) *ProjectRegistryCredential { return v.RegistryCredential }).(ProjectRegistryCredentialPtrOutput)
}

func (o ProjectEnvironmentOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectEnvironment) string { return v.Type }).(pulumi.StringOutput)
}

type ProjectEnvironmentPtrOutput struct{ *pulumi.OutputState }

func (ProjectEnvironmentPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectEnvironment)(nil)).Elem()
}

func (o ProjectEnvironmentPtrOutput) ToProjectEnvironmentPtrOutput() ProjectEnvironmentPtrOutput {
	return o
}

func (o ProjectEnvironmentPtrOutput) ToProjectEnvironmentPtrOutputWithContext(ctx context.Context) ProjectEnvironmentPtrOutput {
	return o
}

func (o ProjectEnvironmentPtrOutput) Elem() ProjectEnvironmentOutput {
	return o.ApplyT(func(v *ProjectEnvironment) ProjectEnvironment {
		if v != nil {
			return *v
		}
		var ret ProjectEnvironment
		return ret
	}).(ProjectEnvironmentOutput)
}

func (o ProjectEnvironmentPtrOutput) Certificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectEnvironment) *string {
		if v == nil {
			return nil
		}
		return v.Certificate
	}).(pulumi.StringPtrOutput)
}

func (o ProjectEnvironmentPtrOutput) ComputeType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectEnvironment) *string {
		if v == nil {
			return nil
		}
		return &v.ComputeType
	}).(pulumi.StringPtrOutput)
}

func (o ProjectEnvironmentPtrOutput) EnvironmentVariables() ProjectEnvironmentVariableArrayOutput {
	return o.ApplyT(func(v *ProjectEnvironment) []ProjectEnvironmentVariable {
		if v == nil {
			return nil
		}
		return v.EnvironmentVariables
	}).(ProjectEnvironmentVariableArrayOutput)
}

func (o ProjectEnvironmentPtrOutput) Image() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectEnvironment) *string {
		if v == nil {
			return nil
		}
		return &v.Image
	}).(pulumi.StringPtrOutput)
}

func (o ProjectEnvironmentPtrOutput) ImagePullCredentialsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectEnvironment) *string {
		if v == nil {
			return nil
		}
		return v.ImagePullCredentialsType
	}).(pulumi.StringPtrOutput)
}

func (o ProjectEnvironmentPtrOutput) PrivilegedMode() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ProjectEnvironment) *bool {
		if v == nil {
			return nil
		}
		return v.PrivilegedMode
	}).(pulumi.BoolPtrOutput)
}

func (o ProjectEnvironmentPtrOutput) RegistryCredential() ProjectRegistryCredentialPtrOutput {
	return o.ApplyT(func(v *ProjectEnvironment) *ProjectRegistryCredential {
		if v == nil {
			return nil
		}
		return v.RegistryCredential
	}).(ProjectRegistryCredentialPtrOutput)
}

func (o ProjectEnvironmentPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectEnvironment) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

type ProjectEnvironmentVariable struct {
	Name  string  `pulumi:"name"`
	Type  *string `pulumi:"type"`
	Value string  `pulumi:"value"`
}

// ProjectEnvironmentVariableInput is an input type that accepts ProjectEnvironmentVariableArgs and ProjectEnvironmentVariableOutput values.
// You can construct a concrete instance of `ProjectEnvironmentVariableInput` via:
//
//          ProjectEnvironmentVariableArgs{...}
type ProjectEnvironmentVariableInput interface {
	pulumi.Input

	ToProjectEnvironmentVariableOutput() ProjectEnvironmentVariableOutput
	ToProjectEnvironmentVariableOutputWithContext(context.Context) ProjectEnvironmentVariableOutput
}

type ProjectEnvironmentVariableArgs struct {
	Name  pulumi.StringInput    `pulumi:"name"`
	Type  pulumi.StringPtrInput `pulumi:"type"`
	Value pulumi.StringInput    `pulumi:"value"`
}

func (ProjectEnvironmentVariableArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectEnvironmentVariable)(nil)).Elem()
}

func (i ProjectEnvironmentVariableArgs) ToProjectEnvironmentVariableOutput() ProjectEnvironmentVariableOutput {
	return i.ToProjectEnvironmentVariableOutputWithContext(context.Background())
}

func (i ProjectEnvironmentVariableArgs) ToProjectEnvironmentVariableOutputWithContext(ctx context.Context) ProjectEnvironmentVariableOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectEnvironmentVariableOutput)
}

// ProjectEnvironmentVariableArrayInput is an input type that accepts ProjectEnvironmentVariableArray and ProjectEnvironmentVariableArrayOutput values.
// You can construct a concrete instance of `ProjectEnvironmentVariableArrayInput` via:
//
//          ProjectEnvironmentVariableArray{ ProjectEnvironmentVariableArgs{...} }
type ProjectEnvironmentVariableArrayInput interface {
	pulumi.Input

	ToProjectEnvironmentVariableArrayOutput() ProjectEnvironmentVariableArrayOutput
	ToProjectEnvironmentVariableArrayOutputWithContext(context.Context) ProjectEnvironmentVariableArrayOutput
}

type ProjectEnvironmentVariableArray []ProjectEnvironmentVariableInput

func (ProjectEnvironmentVariableArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectEnvironmentVariable)(nil)).Elem()
}

func (i ProjectEnvironmentVariableArray) ToProjectEnvironmentVariableArrayOutput() ProjectEnvironmentVariableArrayOutput {
	return i.ToProjectEnvironmentVariableArrayOutputWithContext(context.Background())
}

func (i ProjectEnvironmentVariableArray) ToProjectEnvironmentVariableArrayOutputWithContext(ctx context.Context) ProjectEnvironmentVariableArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectEnvironmentVariableArrayOutput)
}

type ProjectEnvironmentVariableOutput struct{ *pulumi.OutputState }

func (ProjectEnvironmentVariableOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectEnvironmentVariable)(nil)).Elem()
}

func (o ProjectEnvironmentVariableOutput) ToProjectEnvironmentVariableOutput() ProjectEnvironmentVariableOutput {
	return o
}

func (o ProjectEnvironmentVariableOutput) ToProjectEnvironmentVariableOutputWithContext(ctx context.Context) ProjectEnvironmentVariableOutput {
	return o
}

func (o ProjectEnvironmentVariableOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectEnvironmentVariable) string { return v.Name }).(pulumi.StringOutput)
}

func (o ProjectEnvironmentVariableOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectEnvironmentVariable) *string { return v.Type }).(pulumi.StringPtrOutput)
}

func (o ProjectEnvironmentVariableOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectEnvironmentVariable) string { return v.Value }).(pulumi.StringOutput)
}

type ProjectEnvironmentVariableArrayOutput struct{ *pulumi.OutputState }

func (ProjectEnvironmentVariableArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectEnvironmentVariable)(nil)).Elem()
}

func (o ProjectEnvironmentVariableArrayOutput) ToProjectEnvironmentVariableArrayOutput() ProjectEnvironmentVariableArrayOutput {
	return o
}

func (o ProjectEnvironmentVariableArrayOutput) ToProjectEnvironmentVariableArrayOutputWithContext(ctx context.Context) ProjectEnvironmentVariableArrayOutput {
	return o
}

func (o ProjectEnvironmentVariableArrayOutput) Index(i pulumi.IntInput) ProjectEnvironmentVariableOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ProjectEnvironmentVariable {
		return vs[0].([]ProjectEnvironmentVariable)[vs[1].(int)]
	}).(ProjectEnvironmentVariableOutput)
}

type ProjectFilterGroup struct {
}

// ProjectFilterGroupInput is an input type that accepts ProjectFilterGroupArgs and ProjectFilterGroupOutput values.
// You can construct a concrete instance of `ProjectFilterGroupInput` via:
//
//          ProjectFilterGroupArgs{...}
type ProjectFilterGroupInput interface {
	pulumi.Input

	ToProjectFilterGroupOutput() ProjectFilterGroupOutput
	ToProjectFilterGroupOutputWithContext(context.Context) ProjectFilterGroupOutput
}

type ProjectFilterGroupArgs struct {
}

func (ProjectFilterGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectFilterGroup)(nil)).Elem()
}

func (i ProjectFilterGroupArgs) ToProjectFilterGroupOutput() ProjectFilterGroupOutput {
	return i.ToProjectFilterGroupOutputWithContext(context.Background())
}

func (i ProjectFilterGroupArgs) ToProjectFilterGroupOutputWithContext(ctx context.Context) ProjectFilterGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectFilterGroupOutput)
}

// ProjectFilterGroupArrayInput is an input type that accepts ProjectFilterGroupArray and ProjectFilterGroupArrayOutput values.
// You can construct a concrete instance of `ProjectFilterGroupArrayInput` via:
//
//          ProjectFilterGroupArray{ ProjectFilterGroupArgs{...} }
type ProjectFilterGroupArrayInput interface {
	pulumi.Input

	ToProjectFilterGroupArrayOutput() ProjectFilterGroupArrayOutput
	ToProjectFilterGroupArrayOutputWithContext(context.Context) ProjectFilterGroupArrayOutput
}

type ProjectFilterGroupArray []ProjectFilterGroupInput

func (ProjectFilterGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectFilterGroup)(nil)).Elem()
}

func (i ProjectFilterGroupArray) ToProjectFilterGroupArrayOutput() ProjectFilterGroupArrayOutput {
	return i.ToProjectFilterGroupArrayOutputWithContext(context.Background())
}

func (i ProjectFilterGroupArray) ToProjectFilterGroupArrayOutputWithContext(ctx context.Context) ProjectFilterGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectFilterGroupArrayOutput)
}

type ProjectFilterGroupOutput struct{ *pulumi.OutputState }

func (ProjectFilterGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectFilterGroup)(nil)).Elem()
}

func (o ProjectFilterGroupOutput) ToProjectFilterGroupOutput() ProjectFilterGroupOutput {
	return o
}

func (o ProjectFilterGroupOutput) ToProjectFilterGroupOutputWithContext(ctx context.Context) ProjectFilterGroupOutput {
	return o
}

type ProjectFilterGroupArrayOutput struct{ *pulumi.OutputState }

func (ProjectFilterGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectFilterGroup)(nil)).Elem()
}

func (o ProjectFilterGroupArrayOutput) ToProjectFilterGroupArrayOutput() ProjectFilterGroupArrayOutput {
	return o
}

func (o ProjectFilterGroupArrayOutput) ToProjectFilterGroupArrayOutputWithContext(ctx context.Context) ProjectFilterGroupArrayOutput {
	return o
}

func (o ProjectFilterGroupArrayOutput) Index(i pulumi.IntInput) ProjectFilterGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ProjectFilterGroup {
		return vs[0].([]ProjectFilterGroup)[vs[1].(int)]
	}).(ProjectFilterGroupOutput)
}

type ProjectGitSubmodulesConfig struct {
	FetchSubmodules bool `pulumi:"fetchSubmodules"`
}

// ProjectGitSubmodulesConfigInput is an input type that accepts ProjectGitSubmodulesConfigArgs and ProjectGitSubmodulesConfigOutput values.
// You can construct a concrete instance of `ProjectGitSubmodulesConfigInput` via:
//
//          ProjectGitSubmodulesConfigArgs{...}
type ProjectGitSubmodulesConfigInput interface {
	pulumi.Input

	ToProjectGitSubmodulesConfigOutput() ProjectGitSubmodulesConfigOutput
	ToProjectGitSubmodulesConfigOutputWithContext(context.Context) ProjectGitSubmodulesConfigOutput
}

type ProjectGitSubmodulesConfigArgs struct {
	FetchSubmodules pulumi.BoolInput `pulumi:"fetchSubmodules"`
}

func (ProjectGitSubmodulesConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectGitSubmodulesConfig)(nil)).Elem()
}

func (i ProjectGitSubmodulesConfigArgs) ToProjectGitSubmodulesConfigOutput() ProjectGitSubmodulesConfigOutput {
	return i.ToProjectGitSubmodulesConfigOutputWithContext(context.Background())
}

func (i ProjectGitSubmodulesConfigArgs) ToProjectGitSubmodulesConfigOutputWithContext(ctx context.Context) ProjectGitSubmodulesConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectGitSubmodulesConfigOutput)
}

func (i ProjectGitSubmodulesConfigArgs) ToProjectGitSubmodulesConfigPtrOutput() ProjectGitSubmodulesConfigPtrOutput {
	return i.ToProjectGitSubmodulesConfigPtrOutputWithContext(context.Background())
}

func (i ProjectGitSubmodulesConfigArgs) ToProjectGitSubmodulesConfigPtrOutputWithContext(ctx context.Context) ProjectGitSubmodulesConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectGitSubmodulesConfigOutput).ToProjectGitSubmodulesConfigPtrOutputWithContext(ctx)
}

// ProjectGitSubmodulesConfigPtrInput is an input type that accepts ProjectGitSubmodulesConfigArgs, ProjectGitSubmodulesConfigPtr and ProjectGitSubmodulesConfigPtrOutput values.
// You can construct a concrete instance of `ProjectGitSubmodulesConfigPtrInput` via:
//
//          ProjectGitSubmodulesConfigArgs{...}
//
//  or:
//
//          nil
type ProjectGitSubmodulesConfigPtrInput interface {
	pulumi.Input

	ToProjectGitSubmodulesConfigPtrOutput() ProjectGitSubmodulesConfigPtrOutput
	ToProjectGitSubmodulesConfigPtrOutputWithContext(context.Context) ProjectGitSubmodulesConfigPtrOutput
}

type projectGitSubmodulesConfigPtrType ProjectGitSubmodulesConfigArgs

func ProjectGitSubmodulesConfigPtr(v *ProjectGitSubmodulesConfigArgs) ProjectGitSubmodulesConfigPtrInput {
	return (*projectGitSubmodulesConfigPtrType)(v)
}

func (*projectGitSubmodulesConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectGitSubmodulesConfig)(nil)).Elem()
}

func (i *projectGitSubmodulesConfigPtrType) ToProjectGitSubmodulesConfigPtrOutput() ProjectGitSubmodulesConfigPtrOutput {
	return i.ToProjectGitSubmodulesConfigPtrOutputWithContext(context.Background())
}

func (i *projectGitSubmodulesConfigPtrType) ToProjectGitSubmodulesConfigPtrOutputWithContext(ctx context.Context) ProjectGitSubmodulesConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectGitSubmodulesConfigPtrOutput)
}

type ProjectGitSubmodulesConfigOutput struct{ *pulumi.OutputState }

func (ProjectGitSubmodulesConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectGitSubmodulesConfig)(nil)).Elem()
}

func (o ProjectGitSubmodulesConfigOutput) ToProjectGitSubmodulesConfigOutput() ProjectGitSubmodulesConfigOutput {
	return o
}

func (o ProjectGitSubmodulesConfigOutput) ToProjectGitSubmodulesConfigOutputWithContext(ctx context.Context) ProjectGitSubmodulesConfigOutput {
	return o
}

func (o ProjectGitSubmodulesConfigOutput) ToProjectGitSubmodulesConfigPtrOutput() ProjectGitSubmodulesConfigPtrOutput {
	return o.ToProjectGitSubmodulesConfigPtrOutputWithContext(context.Background())
}

func (o ProjectGitSubmodulesConfigOutput) ToProjectGitSubmodulesConfigPtrOutputWithContext(ctx context.Context) ProjectGitSubmodulesConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ProjectGitSubmodulesConfig) *ProjectGitSubmodulesConfig {
		return &v
	}).(ProjectGitSubmodulesConfigPtrOutput)
}

func (o ProjectGitSubmodulesConfigOutput) FetchSubmodules() pulumi.BoolOutput {
	return o.ApplyT(func(v ProjectGitSubmodulesConfig) bool { return v.FetchSubmodules }).(pulumi.BoolOutput)
}

type ProjectGitSubmodulesConfigPtrOutput struct{ *pulumi.OutputState }

func (ProjectGitSubmodulesConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectGitSubmodulesConfig)(nil)).Elem()
}

func (o ProjectGitSubmodulesConfigPtrOutput) ToProjectGitSubmodulesConfigPtrOutput() ProjectGitSubmodulesConfigPtrOutput {
	return o
}

func (o ProjectGitSubmodulesConfigPtrOutput) ToProjectGitSubmodulesConfigPtrOutputWithContext(ctx context.Context) ProjectGitSubmodulesConfigPtrOutput {
	return o
}

func (o ProjectGitSubmodulesConfigPtrOutput) Elem() ProjectGitSubmodulesConfigOutput {
	return o.ApplyT(func(v *ProjectGitSubmodulesConfig) ProjectGitSubmodulesConfig {
		if v != nil {
			return *v
		}
		var ret ProjectGitSubmodulesConfig
		return ret
	}).(ProjectGitSubmodulesConfigOutput)
}

func (o ProjectGitSubmodulesConfigPtrOutput) FetchSubmodules() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ProjectGitSubmodulesConfig) *bool {
		if v == nil {
			return nil
		}
		return &v.FetchSubmodules
	}).(pulumi.BoolPtrOutput)
}

type ProjectLogsConfig struct {
	CloudWatchLogs *ProjectCloudWatchLogsConfig `pulumi:"cloudWatchLogs"`
	S3Logs         *ProjectS3LogsConfig         `pulumi:"s3Logs"`
}

// ProjectLogsConfigInput is an input type that accepts ProjectLogsConfigArgs and ProjectLogsConfigOutput values.
// You can construct a concrete instance of `ProjectLogsConfigInput` via:
//
//          ProjectLogsConfigArgs{...}
type ProjectLogsConfigInput interface {
	pulumi.Input

	ToProjectLogsConfigOutput() ProjectLogsConfigOutput
	ToProjectLogsConfigOutputWithContext(context.Context) ProjectLogsConfigOutput
}

type ProjectLogsConfigArgs struct {
	CloudWatchLogs ProjectCloudWatchLogsConfigPtrInput `pulumi:"cloudWatchLogs"`
	S3Logs         ProjectS3LogsConfigPtrInput         `pulumi:"s3Logs"`
}

func (ProjectLogsConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectLogsConfig)(nil)).Elem()
}

func (i ProjectLogsConfigArgs) ToProjectLogsConfigOutput() ProjectLogsConfigOutput {
	return i.ToProjectLogsConfigOutputWithContext(context.Background())
}

func (i ProjectLogsConfigArgs) ToProjectLogsConfigOutputWithContext(ctx context.Context) ProjectLogsConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectLogsConfigOutput)
}

func (i ProjectLogsConfigArgs) ToProjectLogsConfigPtrOutput() ProjectLogsConfigPtrOutput {
	return i.ToProjectLogsConfigPtrOutputWithContext(context.Background())
}

func (i ProjectLogsConfigArgs) ToProjectLogsConfigPtrOutputWithContext(ctx context.Context) ProjectLogsConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectLogsConfigOutput).ToProjectLogsConfigPtrOutputWithContext(ctx)
}

// ProjectLogsConfigPtrInput is an input type that accepts ProjectLogsConfigArgs, ProjectLogsConfigPtr and ProjectLogsConfigPtrOutput values.
// You can construct a concrete instance of `ProjectLogsConfigPtrInput` via:
//
//          ProjectLogsConfigArgs{...}
//
//  or:
//
//          nil
type ProjectLogsConfigPtrInput interface {
	pulumi.Input

	ToProjectLogsConfigPtrOutput() ProjectLogsConfigPtrOutput
	ToProjectLogsConfigPtrOutputWithContext(context.Context) ProjectLogsConfigPtrOutput
}

type projectLogsConfigPtrType ProjectLogsConfigArgs

func ProjectLogsConfigPtr(v *ProjectLogsConfigArgs) ProjectLogsConfigPtrInput {
	return (*projectLogsConfigPtrType)(v)
}

func (*projectLogsConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectLogsConfig)(nil)).Elem()
}

func (i *projectLogsConfigPtrType) ToProjectLogsConfigPtrOutput() ProjectLogsConfigPtrOutput {
	return i.ToProjectLogsConfigPtrOutputWithContext(context.Background())
}

func (i *projectLogsConfigPtrType) ToProjectLogsConfigPtrOutputWithContext(ctx context.Context) ProjectLogsConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectLogsConfigPtrOutput)
}

type ProjectLogsConfigOutput struct{ *pulumi.OutputState }

func (ProjectLogsConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectLogsConfig)(nil)).Elem()
}

func (o ProjectLogsConfigOutput) ToProjectLogsConfigOutput() ProjectLogsConfigOutput {
	return o
}

func (o ProjectLogsConfigOutput) ToProjectLogsConfigOutputWithContext(ctx context.Context) ProjectLogsConfigOutput {
	return o
}

func (o ProjectLogsConfigOutput) ToProjectLogsConfigPtrOutput() ProjectLogsConfigPtrOutput {
	return o.ToProjectLogsConfigPtrOutputWithContext(context.Background())
}

func (o ProjectLogsConfigOutput) ToProjectLogsConfigPtrOutputWithContext(ctx context.Context) ProjectLogsConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ProjectLogsConfig) *ProjectLogsConfig {
		return &v
	}).(ProjectLogsConfigPtrOutput)
}

func (o ProjectLogsConfigOutput) CloudWatchLogs() ProjectCloudWatchLogsConfigPtrOutput {
	return o.ApplyT(func(v ProjectLogsConfig) *ProjectCloudWatchLogsConfig { return v.CloudWatchLogs }).(ProjectCloudWatchLogsConfigPtrOutput)
}

func (o ProjectLogsConfigOutput) S3Logs() ProjectS3LogsConfigPtrOutput {
	return o.ApplyT(func(v ProjectLogsConfig) *ProjectS3LogsConfig { return v.S3Logs }).(ProjectS3LogsConfigPtrOutput)
}

type ProjectLogsConfigPtrOutput struct{ *pulumi.OutputState }

func (ProjectLogsConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectLogsConfig)(nil)).Elem()
}

func (o ProjectLogsConfigPtrOutput) ToProjectLogsConfigPtrOutput() ProjectLogsConfigPtrOutput {
	return o
}

func (o ProjectLogsConfigPtrOutput) ToProjectLogsConfigPtrOutputWithContext(ctx context.Context) ProjectLogsConfigPtrOutput {
	return o
}

func (o ProjectLogsConfigPtrOutput) Elem() ProjectLogsConfigOutput {
	return o.ApplyT(func(v *ProjectLogsConfig) ProjectLogsConfig {
		if v != nil {
			return *v
		}
		var ret ProjectLogsConfig
		return ret
	}).(ProjectLogsConfigOutput)
}

func (o ProjectLogsConfigPtrOutput) CloudWatchLogs() ProjectCloudWatchLogsConfigPtrOutput {
	return o.ApplyT(func(v *ProjectLogsConfig) *ProjectCloudWatchLogsConfig {
		if v == nil {
			return nil
		}
		return v.CloudWatchLogs
	}).(ProjectCloudWatchLogsConfigPtrOutput)
}

func (o ProjectLogsConfigPtrOutput) S3Logs() ProjectS3LogsConfigPtrOutput {
	return o.ApplyT(func(v *ProjectLogsConfig) *ProjectS3LogsConfig {
		if v == nil {
			return nil
		}
		return v.S3Logs
	}).(ProjectS3LogsConfigPtrOutput)
}

type ProjectProjectBuildBatchConfig struct {
	CombineArtifacts *bool                     `pulumi:"combineArtifacts"`
	Restrictions     *ProjectBatchRestrictions `pulumi:"restrictions"`
	ServiceRole      *string                   `pulumi:"serviceRole"`
	TimeoutInMins    *int                      `pulumi:"timeoutInMins"`
}

// ProjectProjectBuildBatchConfigInput is an input type that accepts ProjectProjectBuildBatchConfigArgs and ProjectProjectBuildBatchConfigOutput values.
// You can construct a concrete instance of `ProjectProjectBuildBatchConfigInput` via:
//
//          ProjectProjectBuildBatchConfigArgs{...}
type ProjectProjectBuildBatchConfigInput interface {
	pulumi.Input

	ToProjectProjectBuildBatchConfigOutput() ProjectProjectBuildBatchConfigOutput
	ToProjectProjectBuildBatchConfigOutputWithContext(context.Context) ProjectProjectBuildBatchConfigOutput
}

type ProjectProjectBuildBatchConfigArgs struct {
	CombineArtifacts pulumi.BoolPtrInput              `pulumi:"combineArtifacts"`
	Restrictions     ProjectBatchRestrictionsPtrInput `pulumi:"restrictions"`
	ServiceRole      pulumi.StringPtrInput            `pulumi:"serviceRole"`
	TimeoutInMins    pulumi.IntPtrInput               `pulumi:"timeoutInMins"`
}

func (ProjectProjectBuildBatchConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectProjectBuildBatchConfig)(nil)).Elem()
}

func (i ProjectProjectBuildBatchConfigArgs) ToProjectProjectBuildBatchConfigOutput() ProjectProjectBuildBatchConfigOutput {
	return i.ToProjectProjectBuildBatchConfigOutputWithContext(context.Background())
}

func (i ProjectProjectBuildBatchConfigArgs) ToProjectProjectBuildBatchConfigOutputWithContext(ctx context.Context) ProjectProjectBuildBatchConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectProjectBuildBatchConfigOutput)
}

func (i ProjectProjectBuildBatchConfigArgs) ToProjectProjectBuildBatchConfigPtrOutput() ProjectProjectBuildBatchConfigPtrOutput {
	return i.ToProjectProjectBuildBatchConfigPtrOutputWithContext(context.Background())
}

func (i ProjectProjectBuildBatchConfigArgs) ToProjectProjectBuildBatchConfigPtrOutputWithContext(ctx context.Context) ProjectProjectBuildBatchConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectProjectBuildBatchConfigOutput).ToProjectProjectBuildBatchConfigPtrOutputWithContext(ctx)
}

// ProjectProjectBuildBatchConfigPtrInput is an input type that accepts ProjectProjectBuildBatchConfigArgs, ProjectProjectBuildBatchConfigPtr and ProjectProjectBuildBatchConfigPtrOutput values.
// You can construct a concrete instance of `ProjectProjectBuildBatchConfigPtrInput` via:
//
//          ProjectProjectBuildBatchConfigArgs{...}
//
//  or:
//
//          nil
type ProjectProjectBuildBatchConfigPtrInput interface {
	pulumi.Input

	ToProjectProjectBuildBatchConfigPtrOutput() ProjectProjectBuildBatchConfigPtrOutput
	ToProjectProjectBuildBatchConfigPtrOutputWithContext(context.Context) ProjectProjectBuildBatchConfigPtrOutput
}

type projectProjectBuildBatchConfigPtrType ProjectProjectBuildBatchConfigArgs

func ProjectProjectBuildBatchConfigPtr(v *ProjectProjectBuildBatchConfigArgs) ProjectProjectBuildBatchConfigPtrInput {
	return (*projectProjectBuildBatchConfigPtrType)(v)
}

func (*projectProjectBuildBatchConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectProjectBuildBatchConfig)(nil)).Elem()
}

func (i *projectProjectBuildBatchConfigPtrType) ToProjectProjectBuildBatchConfigPtrOutput() ProjectProjectBuildBatchConfigPtrOutput {
	return i.ToProjectProjectBuildBatchConfigPtrOutputWithContext(context.Background())
}

func (i *projectProjectBuildBatchConfigPtrType) ToProjectProjectBuildBatchConfigPtrOutputWithContext(ctx context.Context) ProjectProjectBuildBatchConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectProjectBuildBatchConfigPtrOutput)
}

type ProjectProjectBuildBatchConfigOutput struct{ *pulumi.OutputState }

func (ProjectProjectBuildBatchConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectProjectBuildBatchConfig)(nil)).Elem()
}

func (o ProjectProjectBuildBatchConfigOutput) ToProjectProjectBuildBatchConfigOutput() ProjectProjectBuildBatchConfigOutput {
	return o
}

func (o ProjectProjectBuildBatchConfigOutput) ToProjectProjectBuildBatchConfigOutputWithContext(ctx context.Context) ProjectProjectBuildBatchConfigOutput {
	return o
}

func (o ProjectProjectBuildBatchConfigOutput) ToProjectProjectBuildBatchConfigPtrOutput() ProjectProjectBuildBatchConfigPtrOutput {
	return o.ToProjectProjectBuildBatchConfigPtrOutputWithContext(context.Background())
}

func (o ProjectProjectBuildBatchConfigOutput) ToProjectProjectBuildBatchConfigPtrOutputWithContext(ctx context.Context) ProjectProjectBuildBatchConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ProjectProjectBuildBatchConfig) *ProjectProjectBuildBatchConfig {
		return &v
	}).(ProjectProjectBuildBatchConfigPtrOutput)
}

func (o ProjectProjectBuildBatchConfigOutput) CombineArtifacts() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ProjectProjectBuildBatchConfig) *bool { return v.CombineArtifacts }).(pulumi.BoolPtrOutput)
}

func (o ProjectProjectBuildBatchConfigOutput) Restrictions() ProjectBatchRestrictionsPtrOutput {
	return o.ApplyT(func(v ProjectProjectBuildBatchConfig) *ProjectBatchRestrictions { return v.Restrictions }).(ProjectBatchRestrictionsPtrOutput)
}

func (o ProjectProjectBuildBatchConfigOutput) ServiceRole() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectProjectBuildBatchConfig) *string { return v.ServiceRole }).(pulumi.StringPtrOutput)
}

func (o ProjectProjectBuildBatchConfigOutput) TimeoutInMins() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ProjectProjectBuildBatchConfig) *int { return v.TimeoutInMins }).(pulumi.IntPtrOutput)
}

type ProjectProjectBuildBatchConfigPtrOutput struct{ *pulumi.OutputState }

func (ProjectProjectBuildBatchConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectProjectBuildBatchConfig)(nil)).Elem()
}

func (o ProjectProjectBuildBatchConfigPtrOutput) ToProjectProjectBuildBatchConfigPtrOutput() ProjectProjectBuildBatchConfigPtrOutput {
	return o
}

func (o ProjectProjectBuildBatchConfigPtrOutput) ToProjectProjectBuildBatchConfigPtrOutputWithContext(ctx context.Context) ProjectProjectBuildBatchConfigPtrOutput {
	return o
}

func (o ProjectProjectBuildBatchConfigPtrOutput) Elem() ProjectProjectBuildBatchConfigOutput {
	return o.ApplyT(func(v *ProjectProjectBuildBatchConfig) ProjectProjectBuildBatchConfig {
		if v != nil {
			return *v
		}
		var ret ProjectProjectBuildBatchConfig
		return ret
	}).(ProjectProjectBuildBatchConfigOutput)
}

func (o ProjectProjectBuildBatchConfigPtrOutput) CombineArtifacts() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ProjectProjectBuildBatchConfig) *bool {
		if v == nil {
			return nil
		}
		return v.CombineArtifacts
	}).(pulumi.BoolPtrOutput)
}

func (o ProjectProjectBuildBatchConfigPtrOutput) Restrictions() ProjectBatchRestrictionsPtrOutput {
	return o.ApplyT(func(v *ProjectProjectBuildBatchConfig) *ProjectBatchRestrictions {
		if v == nil {
			return nil
		}
		return v.Restrictions
	}).(ProjectBatchRestrictionsPtrOutput)
}

func (o ProjectProjectBuildBatchConfigPtrOutput) ServiceRole() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectProjectBuildBatchConfig) *string {
		if v == nil {
			return nil
		}
		return v.ServiceRole
	}).(pulumi.StringPtrOutput)
}

func (o ProjectProjectBuildBatchConfigPtrOutput) TimeoutInMins() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ProjectProjectBuildBatchConfig) *int {
		if v == nil {
			return nil
		}
		return v.TimeoutInMins
	}).(pulumi.IntPtrOutput)
}

type ProjectProjectCache struct {
	Location *string  `pulumi:"location"`
	Modes    []string `pulumi:"modes"`
	Type     string   `pulumi:"type"`
}

// ProjectProjectCacheInput is an input type that accepts ProjectProjectCacheArgs and ProjectProjectCacheOutput values.
// You can construct a concrete instance of `ProjectProjectCacheInput` via:
//
//          ProjectProjectCacheArgs{...}
type ProjectProjectCacheInput interface {
	pulumi.Input

	ToProjectProjectCacheOutput() ProjectProjectCacheOutput
	ToProjectProjectCacheOutputWithContext(context.Context) ProjectProjectCacheOutput
}

type ProjectProjectCacheArgs struct {
	Location pulumi.StringPtrInput   `pulumi:"location"`
	Modes    pulumi.StringArrayInput `pulumi:"modes"`
	Type     pulumi.StringInput      `pulumi:"type"`
}

func (ProjectProjectCacheArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectProjectCache)(nil)).Elem()
}

func (i ProjectProjectCacheArgs) ToProjectProjectCacheOutput() ProjectProjectCacheOutput {
	return i.ToProjectProjectCacheOutputWithContext(context.Background())
}

func (i ProjectProjectCacheArgs) ToProjectProjectCacheOutputWithContext(ctx context.Context) ProjectProjectCacheOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectProjectCacheOutput)
}

func (i ProjectProjectCacheArgs) ToProjectProjectCachePtrOutput() ProjectProjectCachePtrOutput {
	return i.ToProjectProjectCachePtrOutputWithContext(context.Background())
}

func (i ProjectProjectCacheArgs) ToProjectProjectCachePtrOutputWithContext(ctx context.Context) ProjectProjectCachePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectProjectCacheOutput).ToProjectProjectCachePtrOutputWithContext(ctx)
}

// ProjectProjectCachePtrInput is an input type that accepts ProjectProjectCacheArgs, ProjectProjectCachePtr and ProjectProjectCachePtrOutput values.
// You can construct a concrete instance of `ProjectProjectCachePtrInput` via:
//
//          ProjectProjectCacheArgs{...}
//
//  or:
//
//          nil
type ProjectProjectCachePtrInput interface {
	pulumi.Input

	ToProjectProjectCachePtrOutput() ProjectProjectCachePtrOutput
	ToProjectProjectCachePtrOutputWithContext(context.Context) ProjectProjectCachePtrOutput
}

type projectProjectCachePtrType ProjectProjectCacheArgs

func ProjectProjectCachePtr(v *ProjectProjectCacheArgs) ProjectProjectCachePtrInput {
	return (*projectProjectCachePtrType)(v)
}

func (*projectProjectCachePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectProjectCache)(nil)).Elem()
}

func (i *projectProjectCachePtrType) ToProjectProjectCachePtrOutput() ProjectProjectCachePtrOutput {
	return i.ToProjectProjectCachePtrOutputWithContext(context.Background())
}

func (i *projectProjectCachePtrType) ToProjectProjectCachePtrOutputWithContext(ctx context.Context) ProjectProjectCachePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectProjectCachePtrOutput)
}

type ProjectProjectCacheOutput struct{ *pulumi.OutputState }

func (ProjectProjectCacheOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectProjectCache)(nil)).Elem()
}

func (o ProjectProjectCacheOutput) ToProjectProjectCacheOutput() ProjectProjectCacheOutput {
	return o
}

func (o ProjectProjectCacheOutput) ToProjectProjectCacheOutputWithContext(ctx context.Context) ProjectProjectCacheOutput {
	return o
}

func (o ProjectProjectCacheOutput) ToProjectProjectCachePtrOutput() ProjectProjectCachePtrOutput {
	return o.ToProjectProjectCachePtrOutputWithContext(context.Background())
}

func (o ProjectProjectCacheOutput) ToProjectProjectCachePtrOutputWithContext(ctx context.Context) ProjectProjectCachePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ProjectProjectCache) *ProjectProjectCache {
		return &v
	}).(ProjectProjectCachePtrOutput)
}

func (o ProjectProjectCacheOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectProjectCache) *string { return v.Location }).(pulumi.StringPtrOutput)
}

func (o ProjectProjectCacheOutput) Modes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ProjectProjectCache) []string { return v.Modes }).(pulumi.StringArrayOutput)
}

func (o ProjectProjectCacheOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectProjectCache) string { return v.Type }).(pulumi.StringOutput)
}

type ProjectProjectCachePtrOutput struct{ *pulumi.OutputState }

func (ProjectProjectCachePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectProjectCache)(nil)).Elem()
}

func (o ProjectProjectCachePtrOutput) ToProjectProjectCachePtrOutput() ProjectProjectCachePtrOutput {
	return o
}

func (o ProjectProjectCachePtrOutput) ToProjectProjectCachePtrOutputWithContext(ctx context.Context) ProjectProjectCachePtrOutput {
	return o
}

func (o ProjectProjectCachePtrOutput) Elem() ProjectProjectCacheOutput {
	return o.ApplyT(func(v *ProjectProjectCache) ProjectProjectCache {
		if v != nil {
			return *v
		}
		var ret ProjectProjectCache
		return ret
	}).(ProjectProjectCacheOutput)
}

func (o ProjectProjectCachePtrOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectProjectCache) *string {
		if v == nil {
			return nil
		}
		return v.Location
	}).(pulumi.StringPtrOutput)
}

func (o ProjectProjectCachePtrOutput) Modes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ProjectProjectCache) []string {
		if v == nil {
			return nil
		}
		return v.Modes
	}).(pulumi.StringArrayOutput)
}

func (o ProjectProjectCachePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectProjectCache) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

type ProjectProjectFileSystemLocation struct {
	Identifier   string  `pulumi:"identifier"`
	Location     string  `pulumi:"location"`
	MountOptions *string `pulumi:"mountOptions"`
	MountPoint   string  `pulumi:"mountPoint"`
	Type         string  `pulumi:"type"`
}

// ProjectProjectFileSystemLocationInput is an input type that accepts ProjectProjectFileSystemLocationArgs and ProjectProjectFileSystemLocationOutput values.
// You can construct a concrete instance of `ProjectProjectFileSystemLocationInput` via:
//
//          ProjectProjectFileSystemLocationArgs{...}
type ProjectProjectFileSystemLocationInput interface {
	pulumi.Input

	ToProjectProjectFileSystemLocationOutput() ProjectProjectFileSystemLocationOutput
	ToProjectProjectFileSystemLocationOutputWithContext(context.Context) ProjectProjectFileSystemLocationOutput
}

type ProjectProjectFileSystemLocationArgs struct {
	Identifier   pulumi.StringInput    `pulumi:"identifier"`
	Location     pulumi.StringInput    `pulumi:"location"`
	MountOptions pulumi.StringPtrInput `pulumi:"mountOptions"`
	MountPoint   pulumi.StringInput    `pulumi:"mountPoint"`
	Type         pulumi.StringInput    `pulumi:"type"`
}

func (ProjectProjectFileSystemLocationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectProjectFileSystemLocation)(nil)).Elem()
}

func (i ProjectProjectFileSystemLocationArgs) ToProjectProjectFileSystemLocationOutput() ProjectProjectFileSystemLocationOutput {
	return i.ToProjectProjectFileSystemLocationOutputWithContext(context.Background())
}

func (i ProjectProjectFileSystemLocationArgs) ToProjectProjectFileSystemLocationOutputWithContext(ctx context.Context) ProjectProjectFileSystemLocationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectProjectFileSystemLocationOutput)
}

// ProjectProjectFileSystemLocationArrayInput is an input type that accepts ProjectProjectFileSystemLocationArray and ProjectProjectFileSystemLocationArrayOutput values.
// You can construct a concrete instance of `ProjectProjectFileSystemLocationArrayInput` via:
//
//          ProjectProjectFileSystemLocationArray{ ProjectProjectFileSystemLocationArgs{...} }
type ProjectProjectFileSystemLocationArrayInput interface {
	pulumi.Input

	ToProjectProjectFileSystemLocationArrayOutput() ProjectProjectFileSystemLocationArrayOutput
	ToProjectProjectFileSystemLocationArrayOutputWithContext(context.Context) ProjectProjectFileSystemLocationArrayOutput
}

type ProjectProjectFileSystemLocationArray []ProjectProjectFileSystemLocationInput

func (ProjectProjectFileSystemLocationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectProjectFileSystemLocation)(nil)).Elem()
}

func (i ProjectProjectFileSystemLocationArray) ToProjectProjectFileSystemLocationArrayOutput() ProjectProjectFileSystemLocationArrayOutput {
	return i.ToProjectProjectFileSystemLocationArrayOutputWithContext(context.Background())
}

func (i ProjectProjectFileSystemLocationArray) ToProjectProjectFileSystemLocationArrayOutputWithContext(ctx context.Context) ProjectProjectFileSystemLocationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectProjectFileSystemLocationArrayOutput)
}

type ProjectProjectFileSystemLocationOutput struct{ *pulumi.OutputState }

func (ProjectProjectFileSystemLocationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectProjectFileSystemLocation)(nil)).Elem()
}

func (o ProjectProjectFileSystemLocationOutput) ToProjectProjectFileSystemLocationOutput() ProjectProjectFileSystemLocationOutput {
	return o
}

func (o ProjectProjectFileSystemLocationOutput) ToProjectProjectFileSystemLocationOutputWithContext(ctx context.Context) ProjectProjectFileSystemLocationOutput {
	return o
}

func (o ProjectProjectFileSystemLocationOutput) Identifier() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectProjectFileSystemLocation) string { return v.Identifier }).(pulumi.StringOutput)
}

func (o ProjectProjectFileSystemLocationOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectProjectFileSystemLocation) string { return v.Location }).(pulumi.StringOutput)
}

func (o ProjectProjectFileSystemLocationOutput) MountOptions() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectProjectFileSystemLocation) *string { return v.MountOptions }).(pulumi.StringPtrOutput)
}

func (o ProjectProjectFileSystemLocationOutput) MountPoint() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectProjectFileSystemLocation) string { return v.MountPoint }).(pulumi.StringOutput)
}

func (o ProjectProjectFileSystemLocationOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectProjectFileSystemLocation) string { return v.Type }).(pulumi.StringOutput)
}

type ProjectProjectFileSystemLocationArrayOutput struct{ *pulumi.OutputState }

func (ProjectProjectFileSystemLocationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectProjectFileSystemLocation)(nil)).Elem()
}

func (o ProjectProjectFileSystemLocationArrayOutput) ToProjectProjectFileSystemLocationArrayOutput() ProjectProjectFileSystemLocationArrayOutput {
	return o
}

func (o ProjectProjectFileSystemLocationArrayOutput) ToProjectProjectFileSystemLocationArrayOutputWithContext(ctx context.Context) ProjectProjectFileSystemLocationArrayOutput {
	return o
}

func (o ProjectProjectFileSystemLocationArrayOutput) Index(i pulumi.IntInput) ProjectProjectFileSystemLocationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ProjectProjectFileSystemLocation {
		return vs[0].([]ProjectProjectFileSystemLocation)[vs[1].(int)]
	}).(ProjectProjectFileSystemLocationOutput)
}

type ProjectProjectSourceVersion struct {
	SourceIdentifier string  `pulumi:"sourceIdentifier"`
	SourceVersion    *string `pulumi:"sourceVersion"`
}

// ProjectProjectSourceVersionInput is an input type that accepts ProjectProjectSourceVersionArgs and ProjectProjectSourceVersionOutput values.
// You can construct a concrete instance of `ProjectProjectSourceVersionInput` via:
//
//          ProjectProjectSourceVersionArgs{...}
type ProjectProjectSourceVersionInput interface {
	pulumi.Input

	ToProjectProjectSourceVersionOutput() ProjectProjectSourceVersionOutput
	ToProjectProjectSourceVersionOutputWithContext(context.Context) ProjectProjectSourceVersionOutput
}

type ProjectProjectSourceVersionArgs struct {
	SourceIdentifier pulumi.StringInput    `pulumi:"sourceIdentifier"`
	SourceVersion    pulumi.StringPtrInput `pulumi:"sourceVersion"`
}

func (ProjectProjectSourceVersionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectProjectSourceVersion)(nil)).Elem()
}

func (i ProjectProjectSourceVersionArgs) ToProjectProjectSourceVersionOutput() ProjectProjectSourceVersionOutput {
	return i.ToProjectProjectSourceVersionOutputWithContext(context.Background())
}

func (i ProjectProjectSourceVersionArgs) ToProjectProjectSourceVersionOutputWithContext(ctx context.Context) ProjectProjectSourceVersionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectProjectSourceVersionOutput)
}

// ProjectProjectSourceVersionArrayInput is an input type that accepts ProjectProjectSourceVersionArray and ProjectProjectSourceVersionArrayOutput values.
// You can construct a concrete instance of `ProjectProjectSourceVersionArrayInput` via:
//
//          ProjectProjectSourceVersionArray{ ProjectProjectSourceVersionArgs{...} }
type ProjectProjectSourceVersionArrayInput interface {
	pulumi.Input

	ToProjectProjectSourceVersionArrayOutput() ProjectProjectSourceVersionArrayOutput
	ToProjectProjectSourceVersionArrayOutputWithContext(context.Context) ProjectProjectSourceVersionArrayOutput
}

type ProjectProjectSourceVersionArray []ProjectProjectSourceVersionInput

func (ProjectProjectSourceVersionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectProjectSourceVersion)(nil)).Elem()
}

func (i ProjectProjectSourceVersionArray) ToProjectProjectSourceVersionArrayOutput() ProjectProjectSourceVersionArrayOutput {
	return i.ToProjectProjectSourceVersionArrayOutputWithContext(context.Background())
}

func (i ProjectProjectSourceVersionArray) ToProjectProjectSourceVersionArrayOutputWithContext(ctx context.Context) ProjectProjectSourceVersionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectProjectSourceVersionArrayOutput)
}

type ProjectProjectSourceVersionOutput struct{ *pulumi.OutputState }

func (ProjectProjectSourceVersionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectProjectSourceVersion)(nil)).Elem()
}

func (o ProjectProjectSourceVersionOutput) ToProjectProjectSourceVersionOutput() ProjectProjectSourceVersionOutput {
	return o
}

func (o ProjectProjectSourceVersionOutput) ToProjectProjectSourceVersionOutputWithContext(ctx context.Context) ProjectProjectSourceVersionOutput {
	return o
}

func (o ProjectProjectSourceVersionOutput) SourceIdentifier() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectProjectSourceVersion) string { return v.SourceIdentifier }).(pulumi.StringOutput)
}

func (o ProjectProjectSourceVersionOutput) SourceVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectProjectSourceVersion) *string { return v.SourceVersion }).(pulumi.StringPtrOutput)
}

type ProjectProjectSourceVersionArrayOutput struct{ *pulumi.OutputState }

func (ProjectProjectSourceVersionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectProjectSourceVersion)(nil)).Elem()
}

func (o ProjectProjectSourceVersionArrayOutput) ToProjectProjectSourceVersionArrayOutput() ProjectProjectSourceVersionArrayOutput {
	return o
}

func (o ProjectProjectSourceVersionArrayOutput) ToProjectProjectSourceVersionArrayOutputWithContext(ctx context.Context) ProjectProjectSourceVersionArrayOutput {
	return o
}

func (o ProjectProjectSourceVersionArrayOutput) Index(i pulumi.IntInput) ProjectProjectSourceVersionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ProjectProjectSourceVersion {
		return vs[0].([]ProjectProjectSourceVersion)[vs[1].(int)]
	}).(ProjectProjectSourceVersionOutput)
}

type ProjectProjectTriggers struct {
	BuildType    *string              `pulumi:"buildType"`
	FilterGroups []ProjectFilterGroup `pulumi:"filterGroups"`
	Webhook      *bool                `pulumi:"webhook"`
}

// ProjectProjectTriggersInput is an input type that accepts ProjectProjectTriggersArgs and ProjectProjectTriggersOutput values.
// You can construct a concrete instance of `ProjectProjectTriggersInput` via:
//
//          ProjectProjectTriggersArgs{...}
type ProjectProjectTriggersInput interface {
	pulumi.Input

	ToProjectProjectTriggersOutput() ProjectProjectTriggersOutput
	ToProjectProjectTriggersOutputWithContext(context.Context) ProjectProjectTriggersOutput
}

type ProjectProjectTriggersArgs struct {
	BuildType    pulumi.StringPtrInput        `pulumi:"buildType"`
	FilterGroups ProjectFilterGroupArrayInput `pulumi:"filterGroups"`
	Webhook      pulumi.BoolPtrInput          `pulumi:"webhook"`
}

func (ProjectProjectTriggersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectProjectTriggers)(nil)).Elem()
}

func (i ProjectProjectTriggersArgs) ToProjectProjectTriggersOutput() ProjectProjectTriggersOutput {
	return i.ToProjectProjectTriggersOutputWithContext(context.Background())
}

func (i ProjectProjectTriggersArgs) ToProjectProjectTriggersOutputWithContext(ctx context.Context) ProjectProjectTriggersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectProjectTriggersOutput)
}

func (i ProjectProjectTriggersArgs) ToProjectProjectTriggersPtrOutput() ProjectProjectTriggersPtrOutput {
	return i.ToProjectProjectTriggersPtrOutputWithContext(context.Background())
}

func (i ProjectProjectTriggersArgs) ToProjectProjectTriggersPtrOutputWithContext(ctx context.Context) ProjectProjectTriggersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectProjectTriggersOutput).ToProjectProjectTriggersPtrOutputWithContext(ctx)
}

// ProjectProjectTriggersPtrInput is an input type that accepts ProjectProjectTriggersArgs, ProjectProjectTriggersPtr and ProjectProjectTriggersPtrOutput values.
// You can construct a concrete instance of `ProjectProjectTriggersPtrInput` via:
//
//          ProjectProjectTriggersArgs{...}
//
//  or:
//
//          nil
type ProjectProjectTriggersPtrInput interface {
	pulumi.Input

	ToProjectProjectTriggersPtrOutput() ProjectProjectTriggersPtrOutput
	ToProjectProjectTriggersPtrOutputWithContext(context.Context) ProjectProjectTriggersPtrOutput
}

type projectProjectTriggersPtrType ProjectProjectTriggersArgs

func ProjectProjectTriggersPtr(v *ProjectProjectTriggersArgs) ProjectProjectTriggersPtrInput {
	return (*projectProjectTriggersPtrType)(v)
}

func (*projectProjectTriggersPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectProjectTriggers)(nil)).Elem()
}

func (i *projectProjectTriggersPtrType) ToProjectProjectTriggersPtrOutput() ProjectProjectTriggersPtrOutput {
	return i.ToProjectProjectTriggersPtrOutputWithContext(context.Background())
}

func (i *projectProjectTriggersPtrType) ToProjectProjectTriggersPtrOutputWithContext(ctx context.Context) ProjectProjectTriggersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectProjectTriggersPtrOutput)
}

type ProjectProjectTriggersOutput struct{ *pulumi.OutputState }

func (ProjectProjectTriggersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectProjectTriggers)(nil)).Elem()
}

func (o ProjectProjectTriggersOutput) ToProjectProjectTriggersOutput() ProjectProjectTriggersOutput {
	return o
}

func (o ProjectProjectTriggersOutput) ToProjectProjectTriggersOutputWithContext(ctx context.Context) ProjectProjectTriggersOutput {
	return o
}

func (o ProjectProjectTriggersOutput) ToProjectProjectTriggersPtrOutput() ProjectProjectTriggersPtrOutput {
	return o.ToProjectProjectTriggersPtrOutputWithContext(context.Background())
}

func (o ProjectProjectTriggersOutput) ToProjectProjectTriggersPtrOutputWithContext(ctx context.Context) ProjectProjectTriggersPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ProjectProjectTriggers) *ProjectProjectTriggers {
		return &v
	}).(ProjectProjectTriggersPtrOutput)
}

func (o ProjectProjectTriggersOutput) BuildType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectProjectTriggers) *string { return v.BuildType }).(pulumi.StringPtrOutput)
}

func (o ProjectProjectTriggersOutput) FilterGroups() ProjectFilterGroupArrayOutput {
	return o.ApplyT(func(v ProjectProjectTriggers) []ProjectFilterGroup { return v.FilterGroups }).(ProjectFilterGroupArrayOutput)
}

func (o ProjectProjectTriggersOutput) Webhook() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ProjectProjectTriggers) *bool { return v.Webhook }).(pulumi.BoolPtrOutput)
}

type ProjectProjectTriggersPtrOutput struct{ *pulumi.OutputState }

func (ProjectProjectTriggersPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectProjectTriggers)(nil)).Elem()
}

func (o ProjectProjectTriggersPtrOutput) ToProjectProjectTriggersPtrOutput() ProjectProjectTriggersPtrOutput {
	return o
}

func (o ProjectProjectTriggersPtrOutput) ToProjectProjectTriggersPtrOutputWithContext(ctx context.Context) ProjectProjectTriggersPtrOutput {
	return o
}

func (o ProjectProjectTriggersPtrOutput) Elem() ProjectProjectTriggersOutput {
	return o.ApplyT(func(v *ProjectProjectTriggers) ProjectProjectTriggers {
		if v != nil {
			return *v
		}
		var ret ProjectProjectTriggers
		return ret
	}).(ProjectProjectTriggersOutput)
}

func (o ProjectProjectTriggersPtrOutput) BuildType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectProjectTriggers) *string {
		if v == nil {
			return nil
		}
		return v.BuildType
	}).(pulumi.StringPtrOutput)
}

func (o ProjectProjectTriggersPtrOutput) FilterGroups() ProjectFilterGroupArrayOutput {
	return o.ApplyT(func(v *ProjectProjectTriggers) []ProjectFilterGroup {
		if v == nil {
			return nil
		}
		return v.FilterGroups
	}).(ProjectFilterGroupArrayOutput)
}

func (o ProjectProjectTriggersPtrOutput) Webhook() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ProjectProjectTriggers) *bool {
		if v == nil {
			return nil
		}
		return v.Webhook
	}).(pulumi.BoolPtrOutput)
}

type ProjectRegistryCredential struct {
	Credential         string `pulumi:"credential"`
	CredentialProvider string `pulumi:"credentialProvider"`
}

// ProjectRegistryCredentialInput is an input type that accepts ProjectRegistryCredentialArgs and ProjectRegistryCredentialOutput values.
// You can construct a concrete instance of `ProjectRegistryCredentialInput` via:
//
//          ProjectRegistryCredentialArgs{...}
type ProjectRegistryCredentialInput interface {
	pulumi.Input

	ToProjectRegistryCredentialOutput() ProjectRegistryCredentialOutput
	ToProjectRegistryCredentialOutputWithContext(context.Context) ProjectRegistryCredentialOutput
}

type ProjectRegistryCredentialArgs struct {
	Credential         pulumi.StringInput `pulumi:"credential"`
	CredentialProvider pulumi.StringInput `pulumi:"credentialProvider"`
}

func (ProjectRegistryCredentialArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectRegistryCredential)(nil)).Elem()
}

func (i ProjectRegistryCredentialArgs) ToProjectRegistryCredentialOutput() ProjectRegistryCredentialOutput {
	return i.ToProjectRegistryCredentialOutputWithContext(context.Background())
}

func (i ProjectRegistryCredentialArgs) ToProjectRegistryCredentialOutputWithContext(ctx context.Context) ProjectRegistryCredentialOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectRegistryCredentialOutput)
}

func (i ProjectRegistryCredentialArgs) ToProjectRegistryCredentialPtrOutput() ProjectRegistryCredentialPtrOutput {
	return i.ToProjectRegistryCredentialPtrOutputWithContext(context.Background())
}

func (i ProjectRegistryCredentialArgs) ToProjectRegistryCredentialPtrOutputWithContext(ctx context.Context) ProjectRegistryCredentialPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectRegistryCredentialOutput).ToProjectRegistryCredentialPtrOutputWithContext(ctx)
}

// ProjectRegistryCredentialPtrInput is an input type that accepts ProjectRegistryCredentialArgs, ProjectRegistryCredentialPtr and ProjectRegistryCredentialPtrOutput values.
// You can construct a concrete instance of `ProjectRegistryCredentialPtrInput` via:
//
//          ProjectRegistryCredentialArgs{...}
//
//  or:
//
//          nil
type ProjectRegistryCredentialPtrInput interface {
	pulumi.Input

	ToProjectRegistryCredentialPtrOutput() ProjectRegistryCredentialPtrOutput
	ToProjectRegistryCredentialPtrOutputWithContext(context.Context) ProjectRegistryCredentialPtrOutput
}

type projectRegistryCredentialPtrType ProjectRegistryCredentialArgs

func ProjectRegistryCredentialPtr(v *ProjectRegistryCredentialArgs) ProjectRegistryCredentialPtrInput {
	return (*projectRegistryCredentialPtrType)(v)
}

func (*projectRegistryCredentialPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectRegistryCredential)(nil)).Elem()
}

func (i *projectRegistryCredentialPtrType) ToProjectRegistryCredentialPtrOutput() ProjectRegistryCredentialPtrOutput {
	return i.ToProjectRegistryCredentialPtrOutputWithContext(context.Background())
}

func (i *projectRegistryCredentialPtrType) ToProjectRegistryCredentialPtrOutputWithContext(ctx context.Context) ProjectRegistryCredentialPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectRegistryCredentialPtrOutput)
}

type ProjectRegistryCredentialOutput struct{ *pulumi.OutputState }

func (ProjectRegistryCredentialOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectRegistryCredential)(nil)).Elem()
}

func (o ProjectRegistryCredentialOutput) ToProjectRegistryCredentialOutput() ProjectRegistryCredentialOutput {
	return o
}

func (o ProjectRegistryCredentialOutput) ToProjectRegistryCredentialOutputWithContext(ctx context.Context) ProjectRegistryCredentialOutput {
	return o
}

func (o ProjectRegistryCredentialOutput) ToProjectRegistryCredentialPtrOutput() ProjectRegistryCredentialPtrOutput {
	return o.ToProjectRegistryCredentialPtrOutputWithContext(context.Background())
}

func (o ProjectRegistryCredentialOutput) ToProjectRegistryCredentialPtrOutputWithContext(ctx context.Context) ProjectRegistryCredentialPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ProjectRegistryCredential) *ProjectRegistryCredential {
		return &v
	}).(ProjectRegistryCredentialPtrOutput)
}

func (o ProjectRegistryCredentialOutput) Credential() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectRegistryCredential) string { return v.Credential }).(pulumi.StringOutput)
}

func (o ProjectRegistryCredentialOutput) CredentialProvider() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectRegistryCredential) string { return v.CredentialProvider }).(pulumi.StringOutput)
}

type ProjectRegistryCredentialPtrOutput struct{ *pulumi.OutputState }

func (ProjectRegistryCredentialPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectRegistryCredential)(nil)).Elem()
}

func (o ProjectRegistryCredentialPtrOutput) ToProjectRegistryCredentialPtrOutput() ProjectRegistryCredentialPtrOutput {
	return o
}

func (o ProjectRegistryCredentialPtrOutput) ToProjectRegistryCredentialPtrOutputWithContext(ctx context.Context) ProjectRegistryCredentialPtrOutput {
	return o
}

func (o ProjectRegistryCredentialPtrOutput) Elem() ProjectRegistryCredentialOutput {
	return o.ApplyT(func(v *ProjectRegistryCredential) ProjectRegistryCredential {
		if v != nil {
			return *v
		}
		var ret ProjectRegistryCredential
		return ret
	}).(ProjectRegistryCredentialOutput)
}

func (o ProjectRegistryCredentialPtrOutput) Credential() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectRegistryCredential) *string {
		if v == nil {
			return nil
		}
		return &v.Credential
	}).(pulumi.StringPtrOutput)
}

func (o ProjectRegistryCredentialPtrOutput) CredentialProvider() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectRegistryCredential) *string {
		if v == nil {
			return nil
		}
		return &v.CredentialProvider
	}).(pulumi.StringPtrOutput)
}

type ProjectS3LogsConfig struct {
	EncryptionDisabled *bool   `pulumi:"encryptionDisabled"`
	Location           *string `pulumi:"location"`
	Status             string  `pulumi:"status"`
}

// ProjectS3LogsConfigInput is an input type that accepts ProjectS3LogsConfigArgs and ProjectS3LogsConfigOutput values.
// You can construct a concrete instance of `ProjectS3LogsConfigInput` via:
//
//          ProjectS3LogsConfigArgs{...}
type ProjectS3LogsConfigInput interface {
	pulumi.Input

	ToProjectS3LogsConfigOutput() ProjectS3LogsConfigOutput
	ToProjectS3LogsConfigOutputWithContext(context.Context) ProjectS3LogsConfigOutput
}

type ProjectS3LogsConfigArgs struct {
	EncryptionDisabled pulumi.BoolPtrInput   `pulumi:"encryptionDisabled"`
	Location           pulumi.StringPtrInput `pulumi:"location"`
	Status             pulumi.StringInput    `pulumi:"status"`
}

func (ProjectS3LogsConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectS3LogsConfig)(nil)).Elem()
}

func (i ProjectS3LogsConfigArgs) ToProjectS3LogsConfigOutput() ProjectS3LogsConfigOutput {
	return i.ToProjectS3LogsConfigOutputWithContext(context.Background())
}

func (i ProjectS3LogsConfigArgs) ToProjectS3LogsConfigOutputWithContext(ctx context.Context) ProjectS3LogsConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectS3LogsConfigOutput)
}

func (i ProjectS3LogsConfigArgs) ToProjectS3LogsConfigPtrOutput() ProjectS3LogsConfigPtrOutput {
	return i.ToProjectS3LogsConfigPtrOutputWithContext(context.Background())
}

func (i ProjectS3LogsConfigArgs) ToProjectS3LogsConfigPtrOutputWithContext(ctx context.Context) ProjectS3LogsConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectS3LogsConfigOutput).ToProjectS3LogsConfigPtrOutputWithContext(ctx)
}

// ProjectS3LogsConfigPtrInput is an input type that accepts ProjectS3LogsConfigArgs, ProjectS3LogsConfigPtr and ProjectS3LogsConfigPtrOutput values.
// You can construct a concrete instance of `ProjectS3LogsConfigPtrInput` via:
//
//          ProjectS3LogsConfigArgs{...}
//
//  or:
//
//          nil
type ProjectS3LogsConfigPtrInput interface {
	pulumi.Input

	ToProjectS3LogsConfigPtrOutput() ProjectS3LogsConfigPtrOutput
	ToProjectS3LogsConfigPtrOutputWithContext(context.Context) ProjectS3LogsConfigPtrOutput
}

type projectS3LogsConfigPtrType ProjectS3LogsConfigArgs

func ProjectS3LogsConfigPtr(v *ProjectS3LogsConfigArgs) ProjectS3LogsConfigPtrInput {
	return (*projectS3LogsConfigPtrType)(v)
}

func (*projectS3LogsConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectS3LogsConfig)(nil)).Elem()
}

func (i *projectS3LogsConfigPtrType) ToProjectS3LogsConfigPtrOutput() ProjectS3LogsConfigPtrOutput {
	return i.ToProjectS3LogsConfigPtrOutputWithContext(context.Background())
}

func (i *projectS3LogsConfigPtrType) ToProjectS3LogsConfigPtrOutputWithContext(ctx context.Context) ProjectS3LogsConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectS3LogsConfigPtrOutput)
}

type ProjectS3LogsConfigOutput struct{ *pulumi.OutputState }

func (ProjectS3LogsConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectS3LogsConfig)(nil)).Elem()
}

func (o ProjectS3LogsConfigOutput) ToProjectS3LogsConfigOutput() ProjectS3LogsConfigOutput {
	return o
}

func (o ProjectS3LogsConfigOutput) ToProjectS3LogsConfigOutputWithContext(ctx context.Context) ProjectS3LogsConfigOutput {
	return o
}

func (o ProjectS3LogsConfigOutput) ToProjectS3LogsConfigPtrOutput() ProjectS3LogsConfigPtrOutput {
	return o.ToProjectS3LogsConfigPtrOutputWithContext(context.Background())
}

func (o ProjectS3LogsConfigOutput) ToProjectS3LogsConfigPtrOutputWithContext(ctx context.Context) ProjectS3LogsConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ProjectS3LogsConfig) *ProjectS3LogsConfig {
		return &v
	}).(ProjectS3LogsConfigPtrOutput)
}

func (o ProjectS3LogsConfigOutput) EncryptionDisabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ProjectS3LogsConfig) *bool { return v.EncryptionDisabled }).(pulumi.BoolPtrOutput)
}

func (o ProjectS3LogsConfigOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectS3LogsConfig) *string { return v.Location }).(pulumi.StringPtrOutput)
}

func (o ProjectS3LogsConfigOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectS3LogsConfig) string { return v.Status }).(pulumi.StringOutput)
}

type ProjectS3LogsConfigPtrOutput struct{ *pulumi.OutputState }

func (ProjectS3LogsConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectS3LogsConfig)(nil)).Elem()
}

func (o ProjectS3LogsConfigPtrOutput) ToProjectS3LogsConfigPtrOutput() ProjectS3LogsConfigPtrOutput {
	return o
}

func (o ProjectS3LogsConfigPtrOutput) ToProjectS3LogsConfigPtrOutputWithContext(ctx context.Context) ProjectS3LogsConfigPtrOutput {
	return o
}

func (o ProjectS3LogsConfigPtrOutput) Elem() ProjectS3LogsConfigOutput {
	return o.ApplyT(func(v *ProjectS3LogsConfig) ProjectS3LogsConfig {
		if v != nil {
			return *v
		}
		var ret ProjectS3LogsConfig
		return ret
	}).(ProjectS3LogsConfigOutput)
}

func (o ProjectS3LogsConfigPtrOutput) EncryptionDisabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ProjectS3LogsConfig) *bool {
		if v == nil {
			return nil
		}
		return v.EncryptionDisabled
	}).(pulumi.BoolPtrOutput)
}

func (o ProjectS3LogsConfigPtrOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectS3LogsConfig) *string {
		if v == nil {
			return nil
		}
		return v.Location
	}).(pulumi.StringPtrOutput)
}

func (o ProjectS3LogsConfigPtrOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectS3LogsConfig) *string {
		if v == nil {
			return nil
		}
		return &v.Status
	}).(pulumi.StringPtrOutput)
}

type ProjectSource struct {
	Auth                *ProjectSourceAuth          `pulumi:"auth"`
	BuildSpec           *string                     `pulumi:"buildSpec"`
	BuildStatusConfig   *ProjectBuildStatusConfig   `pulumi:"buildStatusConfig"`
	GitCloneDepth       *int                        `pulumi:"gitCloneDepth"`
	GitSubmodulesConfig *ProjectGitSubmodulesConfig `pulumi:"gitSubmodulesConfig"`
	InsecureSsl         *bool                       `pulumi:"insecureSsl"`
	Location            *string                     `pulumi:"location"`
	ReportBuildStatus   *bool                       `pulumi:"reportBuildStatus"`
	SourceIdentifier    *string                     `pulumi:"sourceIdentifier"`
	Type                string                      `pulumi:"type"`
}

// ProjectSourceInput is an input type that accepts ProjectSourceArgs and ProjectSourceOutput values.
// You can construct a concrete instance of `ProjectSourceInput` via:
//
//          ProjectSourceArgs{...}
type ProjectSourceInput interface {
	pulumi.Input

	ToProjectSourceOutput() ProjectSourceOutput
	ToProjectSourceOutputWithContext(context.Context) ProjectSourceOutput
}

type ProjectSourceArgs struct {
	Auth                ProjectSourceAuthPtrInput          `pulumi:"auth"`
	BuildSpec           pulumi.StringPtrInput              `pulumi:"buildSpec"`
	BuildStatusConfig   ProjectBuildStatusConfigPtrInput   `pulumi:"buildStatusConfig"`
	GitCloneDepth       pulumi.IntPtrInput                 `pulumi:"gitCloneDepth"`
	GitSubmodulesConfig ProjectGitSubmodulesConfigPtrInput `pulumi:"gitSubmodulesConfig"`
	InsecureSsl         pulumi.BoolPtrInput                `pulumi:"insecureSsl"`
	Location            pulumi.StringPtrInput              `pulumi:"location"`
	ReportBuildStatus   pulumi.BoolPtrInput                `pulumi:"reportBuildStatus"`
	SourceIdentifier    pulumi.StringPtrInput              `pulumi:"sourceIdentifier"`
	Type                pulumi.StringInput                 `pulumi:"type"`
}

func (ProjectSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectSource)(nil)).Elem()
}

func (i ProjectSourceArgs) ToProjectSourceOutput() ProjectSourceOutput {
	return i.ToProjectSourceOutputWithContext(context.Background())
}

func (i ProjectSourceArgs) ToProjectSourceOutputWithContext(ctx context.Context) ProjectSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectSourceOutput)
}

func (i ProjectSourceArgs) ToProjectSourcePtrOutput() ProjectSourcePtrOutput {
	return i.ToProjectSourcePtrOutputWithContext(context.Background())
}

func (i ProjectSourceArgs) ToProjectSourcePtrOutputWithContext(ctx context.Context) ProjectSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectSourceOutput).ToProjectSourcePtrOutputWithContext(ctx)
}

// ProjectSourcePtrInput is an input type that accepts ProjectSourceArgs, ProjectSourcePtr and ProjectSourcePtrOutput values.
// You can construct a concrete instance of `ProjectSourcePtrInput` via:
//
//          ProjectSourceArgs{...}
//
//  or:
//
//          nil
type ProjectSourcePtrInput interface {
	pulumi.Input

	ToProjectSourcePtrOutput() ProjectSourcePtrOutput
	ToProjectSourcePtrOutputWithContext(context.Context) ProjectSourcePtrOutput
}

type projectSourcePtrType ProjectSourceArgs

func ProjectSourcePtr(v *ProjectSourceArgs) ProjectSourcePtrInput {
	return (*projectSourcePtrType)(v)
}

func (*projectSourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectSource)(nil)).Elem()
}

func (i *projectSourcePtrType) ToProjectSourcePtrOutput() ProjectSourcePtrOutput {
	return i.ToProjectSourcePtrOutputWithContext(context.Background())
}

func (i *projectSourcePtrType) ToProjectSourcePtrOutputWithContext(ctx context.Context) ProjectSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectSourcePtrOutput)
}

// ProjectSourceArrayInput is an input type that accepts ProjectSourceArray and ProjectSourceArrayOutput values.
// You can construct a concrete instance of `ProjectSourceArrayInput` via:
//
//          ProjectSourceArray{ ProjectSourceArgs{...} }
type ProjectSourceArrayInput interface {
	pulumi.Input

	ToProjectSourceArrayOutput() ProjectSourceArrayOutput
	ToProjectSourceArrayOutputWithContext(context.Context) ProjectSourceArrayOutput
}

type ProjectSourceArray []ProjectSourceInput

func (ProjectSourceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectSource)(nil)).Elem()
}

func (i ProjectSourceArray) ToProjectSourceArrayOutput() ProjectSourceArrayOutput {
	return i.ToProjectSourceArrayOutputWithContext(context.Background())
}

func (i ProjectSourceArray) ToProjectSourceArrayOutputWithContext(ctx context.Context) ProjectSourceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectSourceArrayOutput)
}

type ProjectSourceOutput struct{ *pulumi.OutputState }

func (ProjectSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectSource)(nil)).Elem()
}

func (o ProjectSourceOutput) ToProjectSourceOutput() ProjectSourceOutput {
	return o
}

func (o ProjectSourceOutput) ToProjectSourceOutputWithContext(ctx context.Context) ProjectSourceOutput {
	return o
}

func (o ProjectSourceOutput) ToProjectSourcePtrOutput() ProjectSourcePtrOutput {
	return o.ToProjectSourcePtrOutputWithContext(context.Background())
}

func (o ProjectSourceOutput) ToProjectSourcePtrOutputWithContext(ctx context.Context) ProjectSourcePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ProjectSource) *ProjectSource {
		return &v
	}).(ProjectSourcePtrOutput)
}

func (o ProjectSourceOutput) Auth() ProjectSourceAuthPtrOutput {
	return o.ApplyT(func(v ProjectSource) *ProjectSourceAuth { return v.Auth }).(ProjectSourceAuthPtrOutput)
}

func (o ProjectSourceOutput) BuildSpec() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectSource) *string { return v.BuildSpec }).(pulumi.StringPtrOutput)
}

func (o ProjectSourceOutput) BuildStatusConfig() ProjectBuildStatusConfigPtrOutput {
	return o.ApplyT(func(v ProjectSource) *ProjectBuildStatusConfig { return v.BuildStatusConfig }).(ProjectBuildStatusConfigPtrOutput)
}

func (o ProjectSourceOutput) GitCloneDepth() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ProjectSource) *int { return v.GitCloneDepth }).(pulumi.IntPtrOutput)
}

func (o ProjectSourceOutput) GitSubmodulesConfig() ProjectGitSubmodulesConfigPtrOutput {
	return o.ApplyT(func(v ProjectSource) *ProjectGitSubmodulesConfig { return v.GitSubmodulesConfig }).(ProjectGitSubmodulesConfigPtrOutput)
}

func (o ProjectSourceOutput) InsecureSsl() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ProjectSource) *bool { return v.InsecureSsl }).(pulumi.BoolPtrOutput)
}

func (o ProjectSourceOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectSource) *string { return v.Location }).(pulumi.StringPtrOutput)
}

func (o ProjectSourceOutput) ReportBuildStatus() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ProjectSource) *bool { return v.ReportBuildStatus }).(pulumi.BoolPtrOutput)
}

func (o ProjectSourceOutput) SourceIdentifier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectSource) *string { return v.SourceIdentifier }).(pulumi.StringPtrOutput)
}

func (o ProjectSourceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectSource) string { return v.Type }).(pulumi.StringOutput)
}

type ProjectSourcePtrOutput struct{ *pulumi.OutputState }

func (ProjectSourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectSource)(nil)).Elem()
}

func (o ProjectSourcePtrOutput) ToProjectSourcePtrOutput() ProjectSourcePtrOutput {
	return o
}

func (o ProjectSourcePtrOutput) ToProjectSourcePtrOutputWithContext(ctx context.Context) ProjectSourcePtrOutput {
	return o
}

func (o ProjectSourcePtrOutput) Elem() ProjectSourceOutput {
	return o.ApplyT(func(v *ProjectSource) ProjectSource {
		if v != nil {
			return *v
		}
		var ret ProjectSource
		return ret
	}).(ProjectSourceOutput)
}

func (o ProjectSourcePtrOutput) Auth() ProjectSourceAuthPtrOutput {
	return o.ApplyT(func(v *ProjectSource) *ProjectSourceAuth {
		if v == nil {
			return nil
		}
		return v.Auth
	}).(ProjectSourceAuthPtrOutput)
}

func (o ProjectSourcePtrOutput) BuildSpec() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectSource) *string {
		if v == nil {
			return nil
		}
		return v.BuildSpec
	}).(pulumi.StringPtrOutput)
}

func (o ProjectSourcePtrOutput) BuildStatusConfig() ProjectBuildStatusConfigPtrOutput {
	return o.ApplyT(func(v *ProjectSource) *ProjectBuildStatusConfig {
		if v == nil {
			return nil
		}
		return v.BuildStatusConfig
	}).(ProjectBuildStatusConfigPtrOutput)
}

func (o ProjectSourcePtrOutput) GitCloneDepth() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ProjectSource) *int {
		if v == nil {
			return nil
		}
		return v.GitCloneDepth
	}).(pulumi.IntPtrOutput)
}

func (o ProjectSourcePtrOutput) GitSubmodulesConfig() ProjectGitSubmodulesConfigPtrOutput {
	return o.ApplyT(func(v *ProjectSource) *ProjectGitSubmodulesConfig {
		if v == nil {
			return nil
		}
		return v.GitSubmodulesConfig
	}).(ProjectGitSubmodulesConfigPtrOutput)
}

func (o ProjectSourcePtrOutput) InsecureSsl() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ProjectSource) *bool {
		if v == nil {
			return nil
		}
		return v.InsecureSsl
	}).(pulumi.BoolPtrOutput)
}

func (o ProjectSourcePtrOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectSource) *string {
		if v == nil {
			return nil
		}
		return v.Location
	}).(pulumi.StringPtrOutput)
}

func (o ProjectSourcePtrOutput) ReportBuildStatus() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ProjectSource) *bool {
		if v == nil {
			return nil
		}
		return v.ReportBuildStatus
	}).(pulumi.BoolPtrOutput)
}

func (o ProjectSourcePtrOutput) SourceIdentifier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectSource) *string {
		if v == nil {
			return nil
		}
		return v.SourceIdentifier
	}).(pulumi.StringPtrOutput)
}

func (o ProjectSourcePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectSource) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

type ProjectSourceArrayOutput struct{ *pulumi.OutputState }

func (ProjectSourceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectSource)(nil)).Elem()
}

func (o ProjectSourceArrayOutput) ToProjectSourceArrayOutput() ProjectSourceArrayOutput {
	return o
}

func (o ProjectSourceArrayOutput) ToProjectSourceArrayOutputWithContext(ctx context.Context) ProjectSourceArrayOutput {
	return o
}

func (o ProjectSourceArrayOutput) Index(i pulumi.IntInput) ProjectSourceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ProjectSource {
		return vs[0].([]ProjectSource)[vs[1].(int)]
	}).(ProjectSourceOutput)
}

type ProjectSourceAuth struct {
	Resource *string `pulumi:"resource"`
	Type     string  `pulumi:"type"`
}

// ProjectSourceAuthInput is an input type that accepts ProjectSourceAuthArgs and ProjectSourceAuthOutput values.
// You can construct a concrete instance of `ProjectSourceAuthInput` via:
//
//          ProjectSourceAuthArgs{...}
type ProjectSourceAuthInput interface {
	pulumi.Input

	ToProjectSourceAuthOutput() ProjectSourceAuthOutput
	ToProjectSourceAuthOutputWithContext(context.Context) ProjectSourceAuthOutput
}

type ProjectSourceAuthArgs struct {
	Resource pulumi.StringPtrInput `pulumi:"resource"`
	Type     pulumi.StringInput    `pulumi:"type"`
}

func (ProjectSourceAuthArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectSourceAuth)(nil)).Elem()
}

func (i ProjectSourceAuthArgs) ToProjectSourceAuthOutput() ProjectSourceAuthOutput {
	return i.ToProjectSourceAuthOutputWithContext(context.Background())
}

func (i ProjectSourceAuthArgs) ToProjectSourceAuthOutputWithContext(ctx context.Context) ProjectSourceAuthOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectSourceAuthOutput)
}

func (i ProjectSourceAuthArgs) ToProjectSourceAuthPtrOutput() ProjectSourceAuthPtrOutput {
	return i.ToProjectSourceAuthPtrOutputWithContext(context.Background())
}

func (i ProjectSourceAuthArgs) ToProjectSourceAuthPtrOutputWithContext(ctx context.Context) ProjectSourceAuthPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectSourceAuthOutput).ToProjectSourceAuthPtrOutputWithContext(ctx)
}

// ProjectSourceAuthPtrInput is an input type that accepts ProjectSourceAuthArgs, ProjectSourceAuthPtr and ProjectSourceAuthPtrOutput values.
// You can construct a concrete instance of `ProjectSourceAuthPtrInput` via:
//
//          ProjectSourceAuthArgs{...}
//
//  or:
//
//          nil
type ProjectSourceAuthPtrInput interface {
	pulumi.Input

	ToProjectSourceAuthPtrOutput() ProjectSourceAuthPtrOutput
	ToProjectSourceAuthPtrOutputWithContext(context.Context) ProjectSourceAuthPtrOutput
}

type projectSourceAuthPtrType ProjectSourceAuthArgs

func ProjectSourceAuthPtr(v *ProjectSourceAuthArgs) ProjectSourceAuthPtrInput {
	return (*projectSourceAuthPtrType)(v)
}

func (*projectSourceAuthPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectSourceAuth)(nil)).Elem()
}

func (i *projectSourceAuthPtrType) ToProjectSourceAuthPtrOutput() ProjectSourceAuthPtrOutput {
	return i.ToProjectSourceAuthPtrOutputWithContext(context.Background())
}

func (i *projectSourceAuthPtrType) ToProjectSourceAuthPtrOutputWithContext(ctx context.Context) ProjectSourceAuthPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectSourceAuthPtrOutput)
}

type ProjectSourceAuthOutput struct{ *pulumi.OutputState }

func (ProjectSourceAuthOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectSourceAuth)(nil)).Elem()
}

func (o ProjectSourceAuthOutput) ToProjectSourceAuthOutput() ProjectSourceAuthOutput {
	return o
}

func (o ProjectSourceAuthOutput) ToProjectSourceAuthOutputWithContext(ctx context.Context) ProjectSourceAuthOutput {
	return o
}

func (o ProjectSourceAuthOutput) ToProjectSourceAuthPtrOutput() ProjectSourceAuthPtrOutput {
	return o.ToProjectSourceAuthPtrOutputWithContext(context.Background())
}

func (o ProjectSourceAuthOutput) ToProjectSourceAuthPtrOutputWithContext(ctx context.Context) ProjectSourceAuthPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ProjectSourceAuth) *ProjectSourceAuth {
		return &v
	}).(ProjectSourceAuthPtrOutput)
}

func (o ProjectSourceAuthOutput) Resource() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectSourceAuth) *string { return v.Resource }).(pulumi.StringPtrOutput)
}

func (o ProjectSourceAuthOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectSourceAuth) string { return v.Type }).(pulumi.StringOutput)
}

type ProjectSourceAuthPtrOutput struct{ *pulumi.OutputState }

func (ProjectSourceAuthPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectSourceAuth)(nil)).Elem()
}

func (o ProjectSourceAuthPtrOutput) ToProjectSourceAuthPtrOutput() ProjectSourceAuthPtrOutput {
	return o
}

func (o ProjectSourceAuthPtrOutput) ToProjectSourceAuthPtrOutputWithContext(ctx context.Context) ProjectSourceAuthPtrOutput {
	return o
}

func (o ProjectSourceAuthPtrOutput) Elem() ProjectSourceAuthOutput {
	return o.ApplyT(func(v *ProjectSourceAuth) ProjectSourceAuth {
		if v != nil {
			return *v
		}
		var ret ProjectSourceAuth
		return ret
	}).(ProjectSourceAuthOutput)
}

func (o ProjectSourceAuthPtrOutput) Resource() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectSourceAuth) *string {
		if v == nil {
			return nil
		}
		return v.Resource
	}).(pulumi.StringPtrOutput)
}

func (o ProjectSourceAuthPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectSourceAuth) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

type ProjectTag struct {
	Key   string `pulumi:"key"`
	Value string `pulumi:"value"`
}

// ProjectTagInput is an input type that accepts ProjectTagArgs and ProjectTagOutput values.
// You can construct a concrete instance of `ProjectTagInput` via:
//
//          ProjectTagArgs{...}
type ProjectTagInput interface {
	pulumi.Input

	ToProjectTagOutput() ProjectTagOutput
	ToProjectTagOutputWithContext(context.Context) ProjectTagOutput
}

type ProjectTagArgs struct {
	Key   pulumi.StringInput `pulumi:"key"`
	Value pulumi.StringInput `pulumi:"value"`
}

func (ProjectTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectTag)(nil)).Elem()
}

func (i ProjectTagArgs) ToProjectTagOutput() ProjectTagOutput {
	return i.ToProjectTagOutputWithContext(context.Background())
}

func (i ProjectTagArgs) ToProjectTagOutputWithContext(ctx context.Context) ProjectTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectTagOutput)
}

// ProjectTagArrayInput is an input type that accepts ProjectTagArray and ProjectTagArrayOutput values.
// You can construct a concrete instance of `ProjectTagArrayInput` via:
//
//          ProjectTagArray{ ProjectTagArgs{...} }
type ProjectTagArrayInput interface {
	pulumi.Input

	ToProjectTagArrayOutput() ProjectTagArrayOutput
	ToProjectTagArrayOutputWithContext(context.Context) ProjectTagArrayOutput
}

type ProjectTagArray []ProjectTagInput

func (ProjectTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectTag)(nil)).Elem()
}

func (i ProjectTagArray) ToProjectTagArrayOutput() ProjectTagArrayOutput {
	return i.ToProjectTagArrayOutputWithContext(context.Background())
}

func (i ProjectTagArray) ToProjectTagArrayOutputWithContext(ctx context.Context) ProjectTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectTagArrayOutput)
}

type ProjectTagOutput struct{ *pulumi.OutputState }

func (ProjectTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectTag)(nil)).Elem()
}

func (o ProjectTagOutput) ToProjectTagOutput() ProjectTagOutput {
	return o
}

func (o ProjectTagOutput) ToProjectTagOutputWithContext(ctx context.Context) ProjectTagOutput {
	return o
}

func (o ProjectTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectTag) string { return v.Key }).(pulumi.StringOutput)
}

func (o ProjectTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectTag) string { return v.Value }).(pulumi.StringOutput)
}

type ProjectTagArrayOutput struct{ *pulumi.OutputState }

func (ProjectTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectTag)(nil)).Elem()
}

func (o ProjectTagArrayOutput) ToProjectTagArrayOutput() ProjectTagArrayOutput {
	return o
}

func (o ProjectTagArrayOutput) ToProjectTagArrayOutputWithContext(ctx context.Context) ProjectTagArrayOutput {
	return o
}

func (o ProjectTagArrayOutput) Index(i pulumi.IntInput) ProjectTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ProjectTag {
		return vs[0].([]ProjectTag)[vs[1].(int)]
	}).(ProjectTagOutput)
}

type ProjectVpcConfig struct {
	SecurityGroupIds []string `pulumi:"securityGroupIds"`
	Subnets          []string `pulumi:"subnets"`
	VpcId            *string  `pulumi:"vpcId"`
}

// ProjectVpcConfigInput is an input type that accepts ProjectVpcConfigArgs and ProjectVpcConfigOutput values.
// You can construct a concrete instance of `ProjectVpcConfigInput` via:
//
//          ProjectVpcConfigArgs{...}
type ProjectVpcConfigInput interface {
	pulumi.Input

	ToProjectVpcConfigOutput() ProjectVpcConfigOutput
	ToProjectVpcConfigOutputWithContext(context.Context) ProjectVpcConfigOutput
}

type ProjectVpcConfigArgs struct {
	SecurityGroupIds pulumi.StringArrayInput `pulumi:"securityGroupIds"`
	Subnets          pulumi.StringArrayInput `pulumi:"subnets"`
	VpcId            pulumi.StringPtrInput   `pulumi:"vpcId"`
}

func (ProjectVpcConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectVpcConfig)(nil)).Elem()
}

func (i ProjectVpcConfigArgs) ToProjectVpcConfigOutput() ProjectVpcConfigOutput {
	return i.ToProjectVpcConfigOutputWithContext(context.Background())
}

func (i ProjectVpcConfigArgs) ToProjectVpcConfigOutputWithContext(ctx context.Context) ProjectVpcConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectVpcConfigOutput)
}

func (i ProjectVpcConfigArgs) ToProjectVpcConfigPtrOutput() ProjectVpcConfigPtrOutput {
	return i.ToProjectVpcConfigPtrOutputWithContext(context.Background())
}

func (i ProjectVpcConfigArgs) ToProjectVpcConfigPtrOutputWithContext(ctx context.Context) ProjectVpcConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectVpcConfigOutput).ToProjectVpcConfigPtrOutputWithContext(ctx)
}

// ProjectVpcConfigPtrInput is an input type that accepts ProjectVpcConfigArgs, ProjectVpcConfigPtr and ProjectVpcConfigPtrOutput values.
// You can construct a concrete instance of `ProjectVpcConfigPtrInput` via:
//
//          ProjectVpcConfigArgs{...}
//
//  or:
//
//          nil
type ProjectVpcConfigPtrInput interface {
	pulumi.Input

	ToProjectVpcConfigPtrOutput() ProjectVpcConfigPtrOutput
	ToProjectVpcConfigPtrOutputWithContext(context.Context) ProjectVpcConfigPtrOutput
}

type projectVpcConfigPtrType ProjectVpcConfigArgs

func ProjectVpcConfigPtr(v *ProjectVpcConfigArgs) ProjectVpcConfigPtrInput {
	return (*projectVpcConfigPtrType)(v)
}

func (*projectVpcConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectVpcConfig)(nil)).Elem()
}

func (i *projectVpcConfigPtrType) ToProjectVpcConfigPtrOutput() ProjectVpcConfigPtrOutput {
	return i.ToProjectVpcConfigPtrOutputWithContext(context.Background())
}

func (i *projectVpcConfigPtrType) ToProjectVpcConfigPtrOutputWithContext(ctx context.Context) ProjectVpcConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectVpcConfigPtrOutput)
}

type ProjectVpcConfigOutput struct{ *pulumi.OutputState }

func (ProjectVpcConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectVpcConfig)(nil)).Elem()
}

func (o ProjectVpcConfigOutput) ToProjectVpcConfigOutput() ProjectVpcConfigOutput {
	return o
}

func (o ProjectVpcConfigOutput) ToProjectVpcConfigOutputWithContext(ctx context.Context) ProjectVpcConfigOutput {
	return o
}

func (o ProjectVpcConfigOutput) ToProjectVpcConfigPtrOutput() ProjectVpcConfigPtrOutput {
	return o.ToProjectVpcConfigPtrOutputWithContext(context.Background())
}

func (o ProjectVpcConfigOutput) ToProjectVpcConfigPtrOutputWithContext(ctx context.Context) ProjectVpcConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ProjectVpcConfig) *ProjectVpcConfig {
		return &v
	}).(ProjectVpcConfigPtrOutput)
}

func (o ProjectVpcConfigOutput) SecurityGroupIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ProjectVpcConfig) []string { return v.SecurityGroupIds }).(pulumi.StringArrayOutput)
}

func (o ProjectVpcConfigOutput) Subnets() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ProjectVpcConfig) []string { return v.Subnets }).(pulumi.StringArrayOutput)
}

func (o ProjectVpcConfigOutput) VpcId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectVpcConfig) *string { return v.VpcId }).(pulumi.StringPtrOutput)
}

type ProjectVpcConfigPtrOutput struct{ *pulumi.OutputState }

func (ProjectVpcConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectVpcConfig)(nil)).Elem()
}

func (o ProjectVpcConfigPtrOutput) ToProjectVpcConfigPtrOutput() ProjectVpcConfigPtrOutput {
	return o
}

func (o ProjectVpcConfigPtrOutput) ToProjectVpcConfigPtrOutputWithContext(ctx context.Context) ProjectVpcConfigPtrOutput {
	return o
}

func (o ProjectVpcConfigPtrOutput) Elem() ProjectVpcConfigOutput {
	return o.ApplyT(func(v *ProjectVpcConfig) ProjectVpcConfig {
		if v != nil {
			return *v
		}
		var ret ProjectVpcConfig
		return ret
	}).(ProjectVpcConfigOutput)
}

func (o ProjectVpcConfigPtrOutput) SecurityGroupIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ProjectVpcConfig) []string {
		if v == nil {
			return nil
		}
		return v.SecurityGroupIds
	}).(pulumi.StringArrayOutput)
}

func (o ProjectVpcConfigPtrOutput) Subnets() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ProjectVpcConfig) []string {
		if v == nil {
			return nil
		}
		return v.Subnets
	}).(pulumi.StringArrayOutput)
}

func (o ProjectVpcConfigPtrOutput) VpcId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectVpcConfig) *string {
		if v == nil {
			return nil
		}
		return v.VpcId
	}).(pulumi.StringPtrOutput)
}

type ReportGroupReportExportConfig struct {
	ExportConfigType string                           `pulumi:"exportConfigType"`
	S3Destination    *ReportGroupS3ReportExportConfig `pulumi:"s3Destination"`
}

// ReportGroupReportExportConfigInput is an input type that accepts ReportGroupReportExportConfigArgs and ReportGroupReportExportConfigOutput values.
// You can construct a concrete instance of `ReportGroupReportExportConfigInput` via:
//
//          ReportGroupReportExportConfigArgs{...}
type ReportGroupReportExportConfigInput interface {
	pulumi.Input

	ToReportGroupReportExportConfigOutput() ReportGroupReportExportConfigOutput
	ToReportGroupReportExportConfigOutputWithContext(context.Context) ReportGroupReportExportConfigOutput
}

type ReportGroupReportExportConfigArgs struct {
	ExportConfigType pulumi.StringInput                      `pulumi:"exportConfigType"`
	S3Destination    ReportGroupS3ReportExportConfigPtrInput `pulumi:"s3Destination"`
}

func (ReportGroupReportExportConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportGroupReportExportConfig)(nil)).Elem()
}

func (i ReportGroupReportExportConfigArgs) ToReportGroupReportExportConfigOutput() ReportGroupReportExportConfigOutput {
	return i.ToReportGroupReportExportConfigOutputWithContext(context.Background())
}

func (i ReportGroupReportExportConfigArgs) ToReportGroupReportExportConfigOutputWithContext(ctx context.Context) ReportGroupReportExportConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportGroupReportExportConfigOutput)
}

func (i ReportGroupReportExportConfigArgs) ToReportGroupReportExportConfigPtrOutput() ReportGroupReportExportConfigPtrOutput {
	return i.ToReportGroupReportExportConfigPtrOutputWithContext(context.Background())
}

func (i ReportGroupReportExportConfigArgs) ToReportGroupReportExportConfigPtrOutputWithContext(ctx context.Context) ReportGroupReportExportConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportGroupReportExportConfigOutput).ToReportGroupReportExportConfigPtrOutputWithContext(ctx)
}

// ReportGroupReportExportConfigPtrInput is an input type that accepts ReportGroupReportExportConfigArgs, ReportGroupReportExportConfigPtr and ReportGroupReportExportConfigPtrOutput values.
// You can construct a concrete instance of `ReportGroupReportExportConfigPtrInput` via:
//
//          ReportGroupReportExportConfigArgs{...}
//
//  or:
//
//          nil
type ReportGroupReportExportConfigPtrInput interface {
	pulumi.Input

	ToReportGroupReportExportConfigPtrOutput() ReportGroupReportExportConfigPtrOutput
	ToReportGroupReportExportConfigPtrOutputWithContext(context.Context) ReportGroupReportExportConfigPtrOutput
}

type reportGroupReportExportConfigPtrType ReportGroupReportExportConfigArgs

func ReportGroupReportExportConfigPtr(v *ReportGroupReportExportConfigArgs) ReportGroupReportExportConfigPtrInput {
	return (*reportGroupReportExportConfigPtrType)(v)
}

func (*reportGroupReportExportConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ReportGroupReportExportConfig)(nil)).Elem()
}

func (i *reportGroupReportExportConfigPtrType) ToReportGroupReportExportConfigPtrOutput() ReportGroupReportExportConfigPtrOutput {
	return i.ToReportGroupReportExportConfigPtrOutputWithContext(context.Background())
}

func (i *reportGroupReportExportConfigPtrType) ToReportGroupReportExportConfigPtrOutputWithContext(ctx context.Context) ReportGroupReportExportConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportGroupReportExportConfigPtrOutput)
}

type ReportGroupReportExportConfigOutput struct{ *pulumi.OutputState }

func (ReportGroupReportExportConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportGroupReportExportConfig)(nil)).Elem()
}

func (o ReportGroupReportExportConfigOutput) ToReportGroupReportExportConfigOutput() ReportGroupReportExportConfigOutput {
	return o
}

func (o ReportGroupReportExportConfigOutput) ToReportGroupReportExportConfigOutputWithContext(ctx context.Context) ReportGroupReportExportConfigOutput {
	return o
}

func (o ReportGroupReportExportConfigOutput) ToReportGroupReportExportConfigPtrOutput() ReportGroupReportExportConfigPtrOutput {
	return o.ToReportGroupReportExportConfigPtrOutputWithContext(context.Background())
}

func (o ReportGroupReportExportConfigOutput) ToReportGroupReportExportConfigPtrOutputWithContext(ctx context.Context) ReportGroupReportExportConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ReportGroupReportExportConfig) *ReportGroupReportExportConfig {
		return &v
	}).(ReportGroupReportExportConfigPtrOutput)
}

func (o ReportGroupReportExportConfigOutput) ExportConfigType() pulumi.StringOutput {
	return o.ApplyT(func(v ReportGroupReportExportConfig) string { return v.ExportConfigType }).(pulumi.StringOutput)
}

func (o ReportGroupReportExportConfigOutput) S3Destination() ReportGroupS3ReportExportConfigPtrOutput {
	return o.ApplyT(func(v ReportGroupReportExportConfig) *ReportGroupS3ReportExportConfig { return v.S3Destination }).(ReportGroupS3ReportExportConfigPtrOutput)
}

type ReportGroupReportExportConfigPtrOutput struct{ *pulumi.OutputState }

func (ReportGroupReportExportConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ReportGroupReportExportConfig)(nil)).Elem()
}

func (o ReportGroupReportExportConfigPtrOutput) ToReportGroupReportExportConfigPtrOutput() ReportGroupReportExportConfigPtrOutput {
	return o
}

func (o ReportGroupReportExportConfigPtrOutput) ToReportGroupReportExportConfigPtrOutputWithContext(ctx context.Context) ReportGroupReportExportConfigPtrOutput {
	return o
}

func (o ReportGroupReportExportConfigPtrOutput) Elem() ReportGroupReportExportConfigOutput {
	return o.ApplyT(func(v *ReportGroupReportExportConfig) ReportGroupReportExportConfig {
		if v != nil {
			return *v
		}
		var ret ReportGroupReportExportConfig
		return ret
	}).(ReportGroupReportExportConfigOutput)
}

func (o ReportGroupReportExportConfigPtrOutput) ExportConfigType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReportGroupReportExportConfig) *string {
		if v == nil {
			return nil
		}
		return &v.ExportConfigType
	}).(pulumi.StringPtrOutput)
}

func (o ReportGroupReportExportConfigPtrOutput) S3Destination() ReportGroupS3ReportExportConfigPtrOutput {
	return o.ApplyT(func(v *ReportGroupReportExportConfig) *ReportGroupS3ReportExportConfig {
		if v == nil {
			return nil
		}
		return v.S3Destination
	}).(ReportGroupS3ReportExportConfigPtrOutput)
}

type ReportGroupS3ReportExportConfig struct {
	Bucket             string  `pulumi:"bucket"`
	BucketOwner        *string `pulumi:"bucketOwner"`
	EncryptionDisabled *bool   `pulumi:"encryptionDisabled"`
	EncryptionKey      *string `pulumi:"encryptionKey"`
	Packaging          *string `pulumi:"packaging"`
	Path               *string `pulumi:"path"`
}

// ReportGroupS3ReportExportConfigInput is an input type that accepts ReportGroupS3ReportExportConfigArgs and ReportGroupS3ReportExportConfigOutput values.
// You can construct a concrete instance of `ReportGroupS3ReportExportConfigInput` via:
//
//          ReportGroupS3ReportExportConfigArgs{...}
type ReportGroupS3ReportExportConfigInput interface {
	pulumi.Input

	ToReportGroupS3ReportExportConfigOutput() ReportGroupS3ReportExportConfigOutput
	ToReportGroupS3ReportExportConfigOutputWithContext(context.Context) ReportGroupS3ReportExportConfigOutput
}

type ReportGroupS3ReportExportConfigArgs struct {
	Bucket             pulumi.StringInput    `pulumi:"bucket"`
	BucketOwner        pulumi.StringPtrInput `pulumi:"bucketOwner"`
	EncryptionDisabled pulumi.BoolPtrInput   `pulumi:"encryptionDisabled"`
	EncryptionKey      pulumi.StringPtrInput `pulumi:"encryptionKey"`
	Packaging          pulumi.StringPtrInput `pulumi:"packaging"`
	Path               pulumi.StringPtrInput `pulumi:"path"`
}

func (ReportGroupS3ReportExportConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportGroupS3ReportExportConfig)(nil)).Elem()
}

func (i ReportGroupS3ReportExportConfigArgs) ToReportGroupS3ReportExportConfigOutput() ReportGroupS3ReportExportConfigOutput {
	return i.ToReportGroupS3ReportExportConfigOutputWithContext(context.Background())
}

func (i ReportGroupS3ReportExportConfigArgs) ToReportGroupS3ReportExportConfigOutputWithContext(ctx context.Context) ReportGroupS3ReportExportConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportGroupS3ReportExportConfigOutput)
}

func (i ReportGroupS3ReportExportConfigArgs) ToReportGroupS3ReportExportConfigPtrOutput() ReportGroupS3ReportExportConfigPtrOutput {
	return i.ToReportGroupS3ReportExportConfigPtrOutputWithContext(context.Background())
}

func (i ReportGroupS3ReportExportConfigArgs) ToReportGroupS3ReportExportConfigPtrOutputWithContext(ctx context.Context) ReportGroupS3ReportExportConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportGroupS3ReportExportConfigOutput).ToReportGroupS3ReportExportConfigPtrOutputWithContext(ctx)
}

// ReportGroupS3ReportExportConfigPtrInput is an input type that accepts ReportGroupS3ReportExportConfigArgs, ReportGroupS3ReportExportConfigPtr and ReportGroupS3ReportExportConfigPtrOutput values.
// You can construct a concrete instance of `ReportGroupS3ReportExportConfigPtrInput` via:
//
//          ReportGroupS3ReportExportConfigArgs{...}
//
//  or:
//
//          nil
type ReportGroupS3ReportExportConfigPtrInput interface {
	pulumi.Input

	ToReportGroupS3ReportExportConfigPtrOutput() ReportGroupS3ReportExportConfigPtrOutput
	ToReportGroupS3ReportExportConfigPtrOutputWithContext(context.Context) ReportGroupS3ReportExportConfigPtrOutput
}

type reportGroupS3ReportExportConfigPtrType ReportGroupS3ReportExportConfigArgs

func ReportGroupS3ReportExportConfigPtr(v *ReportGroupS3ReportExportConfigArgs) ReportGroupS3ReportExportConfigPtrInput {
	return (*reportGroupS3ReportExportConfigPtrType)(v)
}

func (*reportGroupS3ReportExportConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ReportGroupS3ReportExportConfig)(nil)).Elem()
}

func (i *reportGroupS3ReportExportConfigPtrType) ToReportGroupS3ReportExportConfigPtrOutput() ReportGroupS3ReportExportConfigPtrOutput {
	return i.ToReportGroupS3ReportExportConfigPtrOutputWithContext(context.Background())
}

func (i *reportGroupS3ReportExportConfigPtrType) ToReportGroupS3ReportExportConfigPtrOutputWithContext(ctx context.Context) ReportGroupS3ReportExportConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportGroupS3ReportExportConfigPtrOutput)
}

type ReportGroupS3ReportExportConfigOutput struct{ *pulumi.OutputState }

func (ReportGroupS3ReportExportConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportGroupS3ReportExportConfig)(nil)).Elem()
}

func (o ReportGroupS3ReportExportConfigOutput) ToReportGroupS3ReportExportConfigOutput() ReportGroupS3ReportExportConfigOutput {
	return o
}

func (o ReportGroupS3ReportExportConfigOutput) ToReportGroupS3ReportExportConfigOutputWithContext(ctx context.Context) ReportGroupS3ReportExportConfigOutput {
	return o
}

func (o ReportGroupS3ReportExportConfigOutput) ToReportGroupS3ReportExportConfigPtrOutput() ReportGroupS3ReportExportConfigPtrOutput {
	return o.ToReportGroupS3ReportExportConfigPtrOutputWithContext(context.Background())
}

func (o ReportGroupS3ReportExportConfigOutput) ToReportGroupS3ReportExportConfigPtrOutputWithContext(ctx context.Context) ReportGroupS3ReportExportConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ReportGroupS3ReportExportConfig) *ReportGroupS3ReportExportConfig {
		return &v
	}).(ReportGroupS3ReportExportConfigPtrOutput)
}

func (o ReportGroupS3ReportExportConfigOutput) Bucket() pulumi.StringOutput {
	return o.ApplyT(func(v ReportGroupS3ReportExportConfig) string { return v.Bucket }).(pulumi.StringOutput)
}

func (o ReportGroupS3ReportExportConfigOutput) BucketOwner() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReportGroupS3ReportExportConfig) *string { return v.BucketOwner }).(pulumi.StringPtrOutput)
}

func (o ReportGroupS3ReportExportConfigOutput) EncryptionDisabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ReportGroupS3ReportExportConfig) *bool { return v.EncryptionDisabled }).(pulumi.BoolPtrOutput)
}

func (o ReportGroupS3ReportExportConfigOutput) EncryptionKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReportGroupS3ReportExportConfig) *string { return v.EncryptionKey }).(pulumi.StringPtrOutput)
}

func (o ReportGroupS3ReportExportConfigOutput) Packaging() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReportGroupS3ReportExportConfig) *string { return v.Packaging }).(pulumi.StringPtrOutput)
}

func (o ReportGroupS3ReportExportConfigOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReportGroupS3ReportExportConfig) *string { return v.Path }).(pulumi.StringPtrOutput)
}

type ReportGroupS3ReportExportConfigPtrOutput struct{ *pulumi.OutputState }

func (ReportGroupS3ReportExportConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ReportGroupS3ReportExportConfig)(nil)).Elem()
}

func (o ReportGroupS3ReportExportConfigPtrOutput) ToReportGroupS3ReportExportConfigPtrOutput() ReportGroupS3ReportExportConfigPtrOutput {
	return o
}

func (o ReportGroupS3ReportExportConfigPtrOutput) ToReportGroupS3ReportExportConfigPtrOutputWithContext(ctx context.Context) ReportGroupS3ReportExportConfigPtrOutput {
	return o
}

func (o ReportGroupS3ReportExportConfigPtrOutput) Elem() ReportGroupS3ReportExportConfigOutput {
	return o.ApplyT(func(v *ReportGroupS3ReportExportConfig) ReportGroupS3ReportExportConfig {
		if v != nil {
			return *v
		}
		var ret ReportGroupS3ReportExportConfig
		return ret
	}).(ReportGroupS3ReportExportConfigOutput)
}

func (o ReportGroupS3ReportExportConfigPtrOutput) Bucket() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReportGroupS3ReportExportConfig) *string {
		if v == nil {
			return nil
		}
		return &v.Bucket
	}).(pulumi.StringPtrOutput)
}

func (o ReportGroupS3ReportExportConfigPtrOutput) BucketOwner() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReportGroupS3ReportExportConfig) *string {
		if v == nil {
			return nil
		}
		return v.BucketOwner
	}).(pulumi.StringPtrOutput)
}

func (o ReportGroupS3ReportExportConfigPtrOutput) EncryptionDisabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ReportGroupS3ReportExportConfig) *bool {
		if v == nil {
			return nil
		}
		return v.EncryptionDisabled
	}).(pulumi.BoolPtrOutput)
}

func (o ReportGroupS3ReportExportConfigPtrOutput) EncryptionKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReportGroupS3ReportExportConfig) *string {
		if v == nil {
			return nil
		}
		return v.EncryptionKey
	}).(pulumi.StringPtrOutput)
}

func (o ReportGroupS3ReportExportConfigPtrOutput) Packaging() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReportGroupS3ReportExportConfig) *string {
		if v == nil {
			return nil
		}
		return v.Packaging
	}).(pulumi.StringPtrOutput)
}

func (o ReportGroupS3ReportExportConfigPtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReportGroupS3ReportExportConfig) *string {
		if v == nil {
			return nil
		}
		return v.Path
	}).(pulumi.StringPtrOutput)
}

type ReportGroupTag struct {
	Key   string `pulumi:"key"`
	Value string `pulumi:"value"`
}

// ReportGroupTagInput is an input type that accepts ReportGroupTagArgs and ReportGroupTagOutput values.
// You can construct a concrete instance of `ReportGroupTagInput` via:
//
//          ReportGroupTagArgs{...}
type ReportGroupTagInput interface {
	pulumi.Input

	ToReportGroupTagOutput() ReportGroupTagOutput
	ToReportGroupTagOutputWithContext(context.Context) ReportGroupTagOutput
}

type ReportGroupTagArgs struct {
	Key   pulumi.StringInput `pulumi:"key"`
	Value pulumi.StringInput `pulumi:"value"`
}

func (ReportGroupTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportGroupTag)(nil)).Elem()
}

func (i ReportGroupTagArgs) ToReportGroupTagOutput() ReportGroupTagOutput {
	return i.ToReportGroupTagOutputWithContext(context.Background())
}

func (i ReportGroupTagArgs) ToReportGroupTagOutputWithContext(ctx context.Context) ReportGroupTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportGroupTagOutput)
}

// ReportGroupTagArrayInput is an input type that accepts ReportGroupTagArray and ReportGroupTagArrayOutput values.
// You can construct a concrete instance of `ReportGroupTagArrayInput` via:
//
//          ReportGroupTagArray{ ReportGroupTagArgs{...} }
type ReportGroupTagArrayInput interface {
	pulumi.Input

	ToReportGroupTagArrayOutput() ReportGroupTagArrayOutput
	ToReportGroupTagArrayOutputWithContext(context.Context) ReportGroupTagArrayOutput
}

type ReportGroupTagArray []ReportGroupTagInput

func (ReportGroupTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ReportGroupTag)(nil)).Elem()
}

func (i ReportGroupTagArray) ToReportGroupTagArrayOutput() ReportGroupTagArrayOutput {
	return i.ToReportGroupTagArrayOutputWithContext(context.Background())
}

func (i ReportGroupTagArray) ToReportGroupTagArrayOutputWithContext(ctx context.Context) ReportGroupTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportGroupTagArrayOutput)
}

type ReportGroupTagOutput struct{ *pulumi.OutputState }

func (ReportGroupTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportGroupTag)(nil)).Elem()
}

func (o ReportGroupTagOutput) ToReportGroupTagOutput() ReportGroupTagOutput {
	return o
}

func (o ReportGroupTagOutput) ToReportGroupTagOutputWithContext(ctx context.Context) ReportGroupTagOutput {
	return o
}

func (o ReportGroupTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v ReportGroupTag) string { return v.Key }).(pulumi.StringOutput)
}

func (o ReportGroupTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v ReportGroupTag) string { return v.Value }).(pulumi.StringOutput)
}

type ReportGroupTagArrayOutput struct{ *pulumi.OutputState }

func (ReportGroupTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ReportGroupTag)(nil)).Elem()
}

func (o ReportGroupTagArrayOutput) ToReportGroupTagArrayOutput() ReportGroupTagArrayOutput {
	return o
}

func (o ReportGroupTagArrayOutput) ToReportGroupTagArrayOutputWithContext(ctx context.Context) ReportGroupTagArrayOutput {
	return o
}

func (o ReportGroupTagArrayOutput) Index(i pulumi.IntInput) ReportGroupTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ReportGroupTag {
		return vs[0].([]ReportGroupTag)[vs[1].(int)]
	}).(ReportGroupTagOutput)
}

func init() {
	pulumi.RegisterOutputType(ProjectArtifactsOutput{})
	pulumi.RegisterOutputType(ProjectArtifactsPtrOutput{})
	pulumi.RegisterOutputType(ProjectArtifactsArrayOutput{})
	pulumi.RegisterOutputType(ProjectBatchRestrictionsOutput{})
	pulumi.RegisterOutputType(ProjectBatchRestrictionsPtrOutput{})
	pulumi.RegisterOutputType(ProjectBuildStatusConfigOutput{})
	pulumi.RegisterOutputType(ProjectBuildStatusConfigPtrOutput{})
	pulumi.RegisterOutputType(ProjectCloudWatchLogsConfigOutput{})
	pulumi.RegisterOutputType(ProjectCloudWatchLogsConfigPtrOutput{})
	pulumi.RegisterOutputType(ProjectEnvironmentOutput{})
	pulumi.RegisterOutputType(ProjectEnvironmentPtrOutput{})
	pulumi.RegisterOutputType(ProjectEnvironmentVariableOutput{})
	pulumi.RegisterOutputType(ProjectEnvironmentVariableArrayOutput{})
	pulumi.RegisterOutputType(ProjectFilterGroupOutput{})
	pulumi.RegisterOutputType(ProjectFilterGroupArrayOutput{})
	pulumi.RegisterOutputType(ProjectGitSubmodulesConfigOutput{})
	pulumi.RegisterOutputType(ProjectGitSubmodulesConfigPtrOutput{})
	pulumi.RegisterOutputType(ProjectLogsConfigOutput{})
	pulumi.RegisterOutputType(ProjectLogsConfigPtrOutput{})
	pulumi.RegisterOutputType(ProjectProjectBuildBatchConfigOutput{})
	pulumi.RegisterOutputType(ProjectProjectBuildBatchConfigPtrOutput{})
	pulumi.RegisterOutputType(ProjectProjectCacheOutput{})
	pulumi.RegisterOutputType(ProjectProjectCachePtrOutput{})
	pulumi.RegisterOutputType(ProjectProjectFileSystemLocationOutput{})
	pulumi.RegisterOutputType(ProjectProjectFileSystemLocationArrayOutput{})
	pulumi.RegisterOutputType(ProjectProjectSourceVersionOutput{})
	pulumi.RegisterOutputType(ProjectProjectSourceVersionArrayOutput{})
	pulumi.RegisterOutputType(ProjectProjectTriggersOutput{})
	pulumi.RegisterOutputType(ProjectProjectTriggersPtrOutput{})
	pulumi.RegisterOutputType(ProjectRegistryCredentialOutput{})
	pulumi.RegisterOutputType(ProjectRegistryCredentialPtrOutput{})
	pulumi.RegisterOutputType(ProjectS3LogsConfigOutput{})
	pulumi.RegisterOutputType(ProjectS3LogsConfigPtrOutput{})
	pulumi.RegisterOutputType(ProjectSourceOutput{})
	pulumi.RegisterOutputType(ProjectSourcePtrOutput{})
	pulumi.RegisterOutputType(ProjectSourceArrayOutput{})
	pulumi.RegisterOutputType(ProjectSourceAuthOutput{})
	pulumi.RegisterOutputType(ProjectSourceAuthPtrOutput{})
	pulumi.RegisterOutputType(ProjectTagOutput{})
	pulumi.RegisterOutputType(ProjectTagArrayOutput{})
	pulumi.RegisterOutputType(ProjectVpcConfigOutput{})
	pulumi.RegisterOutputType(ProjectVpcConfigPtrOutput{})
	pulumi.RegisterOutputType(ReportGroupReportExportConfigOutput{})
	pulumi.RegisterOutputType(ReportGroupReportExportConfigPtrOutput{})
	pulumi.RegisterOutputType(ReportGroupS3ReportExportConfigOutput{})
	pulumi.RegisterOutputType(ReportGroupS3ReportExportConfigPtrOutput{})
	pulumi.RegisterOutputType(ReportGroupTagOutput{})
	pulumi.RegisterOutputType(ReportGroupTagArrayOutput{})
}
