// Code generated by vfsgen; DO NOT EDIT.

package gen

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// templates statically implements the virtual filesystem provided to vfsgen.
var templates = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(2019, 11, 9, 18, 24, 46, 979620387, time.UTC),
		},
		"/cloudformation.ts": &vfsgen۰CompressedFileInfo{
			name:             "cloudformation.ts",
			modTime:          time.Date(2019, 11, 9, 18, 24, 46, 979868307, time.UTC),
			uncompressedSize: 2584,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x95\x4b\x6f\xe3\x36\x14\x85\xf7\xfe\x15\x17\x46\x16\x76\xa1\xaa\x7b\xb9\x4e\x1a\x64\xe5\x45\x1a\x23\xcd\xae\x28\x02\x86\xbc\x52\x89\x48\xa4\xc0\x47\x26\x8e\xc2\xff\x3e\x20\xa9\xb7\xe3\x3c\x30\x83\xf1\xc6\x12\xfd\xf1\xde\x73\x8e\x45\x5d\x5e\xd5\x52\x19\xf8\x0d\x88\x86\xda\x96\xb6\xe2\x90\x2b\x59\xc1\xf2\xaf\x78\xf7\x47\xfc\x5a\x6e\x16\x0b\x2a\x85\x36\x70\x7f\x4f\xa5\xc8\x79\x01\x5b\x10\xf8\xad\xdd\x93\x5e\x85\xb5\xd5\x92\x96\xd2\xb2\x5c\xaa\x8a\x18\x2e\xc5\x72\xbd\x59\xe0\x73\x68\x10\x37\x2b\x2c\xb8\x14\xb0\xed\xab\xa4\x05\x9a\xd5\x32\x2e\x1f\xd1\xda\x10\xfa\x78\x04\x87\x55\xcf\x76\x30\x17\x06\x55\x4e\x28\xc2\x3f\xfe\xa7\x4b\x55\x68\x68\x16\x00\x10\x0b\x5c\x64\x9d\xc8\x9d\xa8\xad\xf9\x53\x1b\xc5\x45\x71\xbe\x09\x44\xec\x7c\x8a\x70\x7d\x0f\x5a\x12\xad\x63\x7d\xc0\x67\x83\x82\x75\x71\xa5\x7b\x25\x9f\x38\x43\x75\x8b\x5a\x5a\x45\xb1\xed\x1d\x2c\x28\x4b\x8d\x54\x2b\x41\x2a\xcc\x20\x96\x4d\x80\xa8\x42\x67\x83\xd6\x04\x64\x6d\xf4\xa0\xb2\xab\x73\x53\xfb\x08\xf5\xba\xad\xd7\xd7\x04\xee\x45\xea\xa9\x66\x0d\xdb\x11\xd7\x7b\xcf\x42\xb3\x34\x06\xf9\xfa\x0a\x5e\x48\x32\xc1\xba\x00\x02\x17\x6f\x06\xc0\x6d\x16\xfd\xb5\xb6\x35\xaa\xa3\x3f\x38\x89\x25\x5b\x4d\xd1\xca\x3a\x46\xeb\x46\xf1\xe5\x56\x50\xcf\x43\x81\xe6\x92\x52\x69\x85\xd9\xb1\xd5\xd4\xf7\x4e\x3c\xc9\xc7\xde\x75\x06\x7b\x25\x2b\xae\xb1\xfb\x37\x5a\x7b\x0a\x8d\x55\xa2\xdb\xa3\xac\x30\xbc\xc2\x94\x87\xbd\x73\x75\x19\x17\x0c\x9f\xb3\x71\xcf\x65\x02\x8d\x6b\x65\xa6\xe6\x7f\x14\xab\x95\x42\x9d\x01\x11\x87\x35\x6c\xcf\x41\xa1\x4e\x49\x07\xaf\x37\xa7\x2c\xbc\xe8\x2f\x89\xff\xf7\xbf\x1f\x94\xff\xa2\x3f\x25\xfc\x45\x9f\x94\x1c\x1e\xb7\x5f\x9a\x79\xdb\xf1\x33\xc2\x75\x44\x27\xe2\x87\x53\x3d\x3b\x10\xad\xa8\x52\x16\x9c\x92\x72\xc7\xde\x3d\xdf\x15\x1a\xc2\x88\x21\x33\x48\xc7\x5f\xa9\xc2\x20\x7a\x2f\x4b\x4e\x0f\x6f\x33\x0c\x4b\xfc\x88\xb1\x35\x23\x06\x3f\x26\x6e\xb1\x2e\x09\x3d\x09\xba\x45\xd3\x28\x22\x0a\x84\xb3\xfb\x04\xce\xcc\xa1\x46\xc8\xb6\x90\xde\x4a\x69\xee\x0e\x35\x6a\xe7\x8e\xd3\x69\x9a\x00\xa6\x7f\x93\x0a\x9d\x6b\xc3\x69\x9a\xdf\x61\x54\xa9\xc2\xea\x01\x95\xaf\x15\xd9\xeb\x70\xef\xcb\x45\xb8\x05\xda\x1a\x4d\xc3\xf3\x6e\x4f\x1a\x43\x27\xa5\x73\x17\x4d\x83\x82\x39\x97\x8d\x36\x78\x55\xce\x6d\xfa\x9e\x01\x08\x3e\xe2\xd5\xc4\x4f\x25\x99\x2d\xa3\xa3\xeb\x70\x39\xf2\xe3\xdf\x22\xba\x6e\xfd\x44\x30\xa8\x09\x6b\x23\x5b\x6f\xc4\xd3\xe3\xa8\x0d\xb2\x2e\x27\x8f\x7f\x2e\xab\x2f\xe7\xf5\x13\x33\x9b\xe6\x16\xdf\x9a\x71\x6d\x58\x79\xd7\x74\x77\x36\x66\x96\xe3\xb8\x9a\xd9\x9d\xcd\xad\x2b\xab\x8d\xac\x66\x53\xcb\x7f\x6a\xfb\x50\x72\x0a\x0a\x09\x93\xa2\x3c\x00\x31\x46\xf1\x07\x6b\x70\x98\x39\x37\xd6\xf8\xa3\xd6\x35\xb8\xec\x89\x68\xee\x7c\x34\x37\x4e\xcf\xc1\x5a\xc9\x1a\x95\xe1\xa8\x63\x7a\xa1\xd4\xbe\x5f\x3c\x91\xe2\x8c\x8a\x0d\x13\xa0\xb9\xb8\x89\xaf\xb6\xd9\xeb\x62\x3e\x5e\xa7\xb6\xdf\x18\xb2\x5f\x1d\xb4\xfe\x93\xa6\xe9\xaa\x55\xe0\xc7\x6c\xe3\xd6\xc9\x11\x33\xd8\xcd\x46\xd7\xc7\xdc\x38\x6e\x2b\x18\xe6\x5c\x20\x9b\x62\xa3\xa7\x67\x34\x9a\xbb\x70\xee\xe4\x23\x0a\xe7\xde\x9b\xcd\xc3\x93\x36\x7d\xde\x86\x93\xfb\x3d\x00\x00\xff\xff\x46\x3a\x5b\x25\x18\x0a\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/cloudformation.ts"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
