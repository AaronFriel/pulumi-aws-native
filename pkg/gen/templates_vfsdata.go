// Code generated by vfsgen; DO NOT EDIT.

package gen

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// templates statically implements the virtual filesystem provided to vfsgen.
var templates = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(2019, 11, 4, 21, 2, 24, 746347337, time.UTC),
		},
		"/cloudformation.ts": &vfsgen۰CompressedFileInfo{
			name:             "cloudformation.ts",
			modTime:          time.Date(2019, 11, 4, 21, 2, 24, 746672555, time.UTC),
			uncompressedSize: 2170,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x54\x4d\x4f\xe3\x3a\x14\xdd\xf7\x57\x5c\x55\x2c\xd2\xa7\xbc\xbc\x7d\xfa\x0a\x83\x58\x75\xc1\x50\x31\xec\x91\x89\x6f\x32\x16\x89\x6d\xf9\x83\xa1\x0a\xfe\xef\x23\xdb\xf9\x2e\x85\x41\x9a\x6c\xea\xb8\xc7\xf7\x9e\x73\x7c\x73\x58\x23\x85\x32\xf0\x0f\x10\x0d\xd2\xd6\xb6\x61\x50\x2a\xd1\xc0\xfa\x5b\x7c\xfb\x2f\xfe\xac\xb7\xab\x55\x21\xb8\x36\xf0\xf8\x58\x08\x5e\xb2\x0a\x76\xc0\xf1\x57\x77\x26\xbb\x09\x7b\xc9\xba\xa8\x85\xa5\xa5\x50\x0d\x31\x4c\xf0\xf5\x66\xbb\xc2\xd7\xd0\x20\x1e\x56\x58\x31\xc1\x61\x37\x54\xc9\x2a\x34\xc9\x3a\x6e\x9f\xa0\xb5\x21\xc5\xf3\x09\x38\xec\x7a\x6c\x0f\x66\xdc\xa0\x2a\x49\x81\xf0\xc3\xff\x75\xad\x2a\x0d\xed\x0a\x00\x62\x81\xab\xbc\x27\xb9\xe7\xd2\x9a\xff\xb5\x51\x8c\x57\x97\xdb\x80\x88\x9d\xcf\x21\xdc\xd0\xa3\xa8\x89\xd6\xb1\x3e\xe0\xab\x41\x4e\x7b\xbb\xb2\x83\x12\x2f\x8c\xa2\xba\x47\x2d\xac\x2a\xb0\xeb\x1d\x24\x28\x5b\x18\xa1\x12\x4e\x1a\xcc\x21\x96\x4d\x81\xa8\x4a\xe7\x23\xd7\x14\x84\x34\x7a\x64\xd9\xd7\xb9\x93\xde\x42\xbd\xe9\xea\x0d\x35\x81\x79\x92\x7a\xce\x59\xc3\x6e\x82\x1b\xb4\xe7\xa1\x59\x16\x8d\x7c\x7b\x03\x4f\x24\x9d\xc1\x7a\x03\x02\x2e\xbe\x8c\x00\xb7\x5d\x0d\x6b\x6d\x25\xaa\x93\x0b\x4e\x63\xc9\x8e\x53\x94\xb2\x89\xd6\xba\x89\x7d\xa5\xe5\x85\xc7\x43\x85\x26\x08\xdf\xd3\x64\xae\x7a\xcf\x5f\xc4\xf3\xa0\x39\x87\x83\x12\x0d\xd3\xd8\xdf\x45\x27\x4e\xa1\xb1\x8a\xf7\x67\x94\xe5\x86\x35\x98\xb1\x70\x76\xc9\x2d\x67\x9c\xe2\x6b\x3e\x76\x5c\xa7\xd0\xba\x8e\x62\x66\x7e\x22\x4f\x12\x46\x73\x20\xfc\xb8\x81\xdd\x25\x30\x1a\x7d\xda\xd3\xcd\xf4\xe6\xc7\xe9\x5a\x5c\x4c\x47\xa9\x41\x43\x28\x31\x64\x31\x66\x3a\x9a\x50\x28\x0c\x64\x0e\xa2\x66\xc5\xf1\x7d\x0c\xc5\x1a\x3f\xc3\x58\x49\x89\xc1\xcf\x11\xf7\x28\x6b\x52\x9c\x05\xba\x55\xdb\x2a\xc2\x2b\x84\x8b\xc7\x14\x2e\xcc\x51\x22\xe4\x3b\xc8\xee\x85\x30\x0f\x47\x89\xda\xb9\x53\xdd\x6d\x1b\x80\xd9\x77\xd2\xa0\x73\x9d\xec\xb6\xfd\x17\x26\x95\x1a\x6c\x9e\x50\xf9\x5a\x11\x7b\x1b\xde\x7d\xb9\x08\xee\x00\x5d\x8d\xb6\x65\x65\x7f\x26\x8b\x76\x92\xda\xb9\xab\xb6\x45\x4e\x9d\xcb\x27\x07\x3c\x2b\xe7\xb6\x43\xcf\x00\x08\x3a\xe2\x6a\xa6\xa7\x11\xd4\xd6\x51\xd1\x6d\x58\x4e\xf4\xf8\x39\xd5\xb2\xd3\x13\x81\x81\x4d\xd8\x9b\xc8\x7a\xc7\x9e\x01\x8e\xda\x20\xed\x7d\xf2\xf0\x3f\xf3\xea\xcb\x7e\xfd\x45\xcf\xe6\xbe\xc5\xef\x32\xee\x8d\x3b\x1f\x8a\xee\xa7\x7e\x21\x39\x06\xe2\x42\xee\x22\x19\x6f\xac\x36\xa2\x59\xe4\xa2\x7f\xa4\x7d\xaa\x59\x01\x0a\x09\x15\xbc\x3e\x02\x31\x46\xb1\x27\x6b\x70\x4c\xb5\x3b\x6b\x7c\x14\xf7\x0d\xae\x07\x44\x14\x77\x39\x49\xa6\xf3\x49\x2b\x95\x90\xa8\x0c\x43\x1d\xdd\x0b\xa5\x0e\xc3\xe6\x19\x17\x17\xa8\xd8\x30\x85\xa2\xe4\x77\x31\xb2\x16\x41\xb0\x0c\xf0\xb9\xec\x77\x62\xfc\xab\x51\xee\x9f\x2c\xcb\x92\x8e\x81\x0f\xf2\xd6\x6d\xd2\x13\xcc\x28\x37\x9f\xac\x4f\x71\x53\xbb\x2d\xa7\x58\x32\x8e\x74\x0e\x9b\x4c\xcf\x24\xfc\x7b\x73\x1e\xc4\x33\x72\xe7\x3e\x4a\xff\x71\xd2\xe6\xf3\x36\x7e\xb9\xbf\x03\x00\x00\xff\xff\xd5\x45\x5e\x3f\x7a\x08\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/cloudformation.ts"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
