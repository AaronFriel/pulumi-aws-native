// Code generated by vfsgen; DO NOT EDIT.

package gen

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// templates statically implements the virtual filesystem provided to vfsgen.
var templates = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(2019, 11, 8, 23, 0, 22, 643055809, time.UTC),
		},
		"/cloudformation.ts": &vfsgen۰CompressedFileInfo{
			name:             "cloudformation.ts",
			modTime:          time.Date(2019, 11, 8, 23, 0, 22, 643255997, time.UTC),
			uncompressedSize: 2363,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x55\x4f\x4f\xdc\x3e\x10\xbd\xef\xa7\x18\xad\x38\x64\x7f\xca\x2f\xbd\x67\xbb\x50\xc4\x89\x03\x65\x45\xb9\x23\x63\x4f\x52\x8b\xc4\x8e\xfc\x87\xb2\x0a\xfe\xee\x95\xed\xfc\x5f\x16\x8a\x54\x75\x2f\x38\xc3\xf3\xcc\x7b\xcf\xf6\x0c\xaf\x1b\xa9\x0c\xfc\x07\x44\x43\x63\x2b\x5b\x73\x28\x94\xac\x61\xfd\x2d\x7e\x7d\x89\x7f\xd6\xdb\xd5\x8a\x4a\xa1\x0d\x3c\x3c\x50\x29\x0a\x5e\xc2\x0e\x04\xfe\xea\xf6\x64\x57\x21\x96\xac\x69\x25\x2d\x2b\xa4\xaa\x89\xe1\x52\xac\x37\xdb\x15\xbe\x84\x02\x71\xb3\xc2\x92\x4b\x01\xbb\x21\x4b\x56\xa2\x49\xd6\x31\x7c\x84\xd6\x86\xd0\xa7\x23\x70\x88\x7a\x6c\x0f\xe6\xc2\xa0\x2a\x08\x45\xf8\xe1\xff\x75\xa9\x4a\x0d\xed\x0a\x00\x62\x82\x8b\xbc\x27\x79\x2d\x1a\x6b\xbe\x6a\xa3\xb8\x28\xcf\xb7\x01\x11\x2b\x9f\x42\xb8\xa1\x06\xad\x88\xd6\x31\x3f\xe0\x8b\x41\xc1\x7a\xbb\xb2\xbd\x92\xcf\x9c\xa1\xba\x43\x2d\xad\xa2\xd8\xd5\x0e\x12\x94\xa5\x46\xaa\x44\x90\x1a\x73\x88\x69\x53\x20\xaa\xd4\xf9\xc8\x35\x05\xd9\x18\x3d\xb2\xec\xf3\xdc\x36\xde\x42\xbd\xe9\xf2\x0d\x39\x81\x7b\x92\x7a\xce\x59\xc3\x6e\x82\x1b\xb4\xe7\xa1\x58\x16\x8d\x7c\x7d\x05\x4f\x24\x9d\xc1\x7a\x03\x02\x2e\x7e\x8c\x00\xb7\x5d\x0d\x6b\x6d\x1b\x54\x47\x07\x9c\xc6\x94\x1d\xa7\x28\x65\x13\xad\x75\x13\xfb\x0a\x2b\xa8\xc7\x43\x89\xe6\x92\x52\x69\x85\xb9\x66\xc9\x5c\xf7\xb5\x78\x96\x4f\x83\xea\x1c\xf6\x4a\xd6\x5c\x63\x7f\x1a\x9d\x3c\x85\xc6\x2a\xd1\xef\x51\x56\x18\x5e\x63\xc6\xc3\xde\x25\xbb\x9c\x0b\x86\x2f\xf9\xb4\xe6\x3a\x85\xd6\x75\x34\x33\xf3\x13\x45\x92\x70\x96\x03\x11\x87\x0d\xec\xce\x81\xb3\x8c\xf4\xd0\xcd\xf6\x84\x80\x70\x72\xff\x94\x7e\x57\xf1\x63\xf2\x3a\x02\x67\xd4\xc7\xe7\xb1\xb8\x59\x1d\xa5\x1a\x0d\x61\xc4\x90\xc5\x3b\xd1\xf1\x14\xa9\xc2\x40\x66\x2f\x2b\x4e\x0f\x6f\x63\x18\x56\xf8\x11\xc6\x36\x8c\x18\xfc\x18\x71\x87\x4d\x45\xe8\x49\xa0\x5b\xb5\xad\x22\xa2\x44\x38\x7b\x48\xe1\xcc\x1c\x1a\x84\x7c\x07\xd9\x9d\x94\xe6\xfe\xd0\xa0\x76\xee\x58\x77\xdb\x06\x60\xf6\x9d\xd4\xe8\x5c\x27\xbb\x6d\xff\x87\x49\xa6\x1a\xeb\x47\x54\x3e\x57\xc4\xde\x84\x6f\x9f\x2e\x82\x3b\x40\x97\xa3\x6d\x79\xd1\xef\xc9\xa2\x9d\xa4\x72\xee\xa2\x6d\x51\x30\xe7\xf2\xc9\x06\xcf\xca\xb9\xed\x50\x33\x00\x82\x8e\xb8\x9a\xe9\xa9\x25\xb3\x55\x54\x74\x13\x96\x13\x3d\xfe\xa1\xe9\xa6\xd3\x13\x81\x81\x4d\x88\x4d\x64\xbd\x61\xcf\x00\x47\x6d\x90\xf5\x3e\x79\xf8\x9f\x79\xf5\x69\xbf\xfe\xa2\x67\x73\xdf\x62\x63\x89\xb1\x31\xf2\xae\xe8\xfe\xd6\x2f\x24\xc7\x8e\xbe\x90\xbb\x68\xed\x57\x56\x1b\x59\x2f\x1a\xbb\xff\x35\xf6\xb1\xe2\x14\x14\x12\x26\x45\x75\x00\x62\x8c\xe2\x8f\xd6\xe0\xd8\x96\x6f\xad\xf1\xb3\xa4\x2f\x70\x39\x20\xa2\xb8\xf3\x49\x6b\x3d\x3d\x2a\x1a\x25\x1b\x54\x86\xa3\x8e\xee\x85\x54\xfb\x21\x78\xc2\xc5\x05\x2a\x16\x4c\x81\x16\xe2\x36\xb6\xac\x45\x23\x58\x4e\xa0\xb9\xec\x37\xe6\xd0\x67\x67\x91\xff\x65\x59\x96\x74\x0c\xfc\x24\x6a\xdd\x26\x3d\xc2\x8c\x72\xf3\xc9\xfa\x18\x37\xb5\xdb\x0a\x86\x05\x17\xc8\xe6\xb0\xc9\xed\x99\x4c\xaf\xde\x9c\x7b\xf9\x84\xc2\xb9\xf7\xc6\xd7\x78\xd3\xe6\xf7\x6d\x7c\xb9\xbf\x03\x00\x00\xff\xff\xcb\x0c\x3d\xf3\x3b\x09\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/cloudformation.ts"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
